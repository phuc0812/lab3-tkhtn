
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3b0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b60  0800a55c  0800a55c  0000b55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0bc  0800c0bc  0000e19c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0bc  0800c0bc  0000d0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0c4  0800c0c4  0000e19c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0c4  0800c0c4  0000d0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0c8  0800c0c8  0000d0c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000019c  20000000  0800c0cc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e19c  2**0
                  CONTENTS
 10 .bss          00001e98  2000019c  2000019c  0000e19c  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  20002034  20002034  0000e19c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e19c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001890d  00000000  00000000  0000e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042eb  00000000  00000000  00026ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001608  00000000  00000000  0002adc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001096  00000000  00000000  0002c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028430  00000000  00000000  0002d466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001be3e  00000000  00000000  00055896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1824  00000000  00000000  000716d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00152ef8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b08  00000000  00000000  00152f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00158a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000019c 	.word	0x2000019c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800a544 	.word	0x0800a544

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001a0 	.word	0x200001a0
 80001e8:	0800a544 	.word	0x0800a544

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f001 fcb8 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f8ce 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 f936 	bl	800076c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000500:	f009 faba 	bl	8009a78 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8000504:	f000 fd90 	bl	8001028 <BSP_LCD_Init>
  //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000508:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 800050c:	2001      	movs	r0, #1
 800050e:	f000 fe0d 	bl	800112c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000512:	2001      	movs	r0, #1
 8000514:	f000 fe6e 	bl	80011f4 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000518:	f001 f8de 	bl	80016d8 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 800051c:	4850      	ldr	r0, [pc, #320]	@ (8000660 <main+0x170>)
 800051e:	f000 fedb 	bl	80012d8 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000522:	484f      	ldr	r0, [pc, #316]	@ (8000660 <main+0x170>)
 8000524:	f000 fe8e 	bl	8001244 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000528:	f04f 30ff 	mov.w	r0, #4294967295
 800052c:	f000 fe72 	bl	8001214 <BSP_LCD_SetTextColor>
  BSP_LCD_DisplayStringAtLine(2, "Good evening,"); // write text
 8000530:	494c      	ldr	r1, [pc, #304]	@ (8000664 <main+0x174>)
 8000532:	2002      	movs	r0, #2
 8000534:	f001 f85e 	bl	80015f4 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(3, "it's too dark"); // write text
 8000538:	494b      	ldr	r1, [pc, #300]	@ (8000668 <main+0x178>)
 800053a:	2003      	movs	r0, #3
 800053c:	f001 f85a 	bl	80015f4 <BSP_LCD_DisplayStringAtLine>
  BSP_LCD_DisplayStringAtLine(4, "here"); // write text
 8000540:	494a      	ldr	r1, [pc, #296]	@ (800066c <main+0x17c>)
 8000542:	2004      	movs	r0, #4
 8000544:	f001 f856 	bl	80015f4 <BSP_LCD_DisplayStringAtLine>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(usb_rx_buffer[0] != 0)
 8000548:	4b49      	ldr	r3, [pc, #292]	@ (8000670 <main+0x180>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d0fb      	beq.n	8000548 <main+0x58>
	  {
		  if (strcmp((char *)usb_rx_buffer, (char *)hello_msg) == 0)
 8000550:	4948      	ldr	r1, [pc, #288]	@ (8000674 <main+0x184>)
 8000552:	4847      	ldr	r0, [pc, #284]	@ (8000670 <main+0x180>)
 8000554:	f7ff fe4a 	bl	80001ec <strcmp>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d10b      	bne.n	8000576 <main+0x86>
		  {
			  BSP_LCD_ClearStringLine(2);
 800055e:	2002      	movs	r0, #2
 8000560:	f000 fee2 	bl	8001328 <BSP_LCD_ClearStringLine>
			  BSP_LCD_DisplayStringAtLine(2, "Do you want to");
 8000564:	4944      	ldr	r1, [pc, #272]	@ (8000678 <main+0x188>)
 8000566:	2002      	movs	r0, #2
 8000568:	f001 f844 	bl	80015f4 <BSP_LCD_DisplayStringAtLine>
			  BSP_LCD_DisplayStringAtLine(3, "turn on light");
 800056c:	4943      	ldr	r1, [pc, #268]	@ (800067c <main+0x18c>)
 800056e:	2003      	movs	r0, #3
 8000570:	f001 f840 	bl	80015f4 <BSP_LCD_DisplayStringAtLine>
 8000574:	e06d      	b.n	8000652 <main+0x162>
		  }
		  else if (strcmp((char *)usb_rx_buffer, (char *)turn_on_led3) == 0)
 8000576:	4942      	ldr	r1, [pc, #264]	@ (8000680 <main+0x190>)
 8000578:	483d      	ldr	r0, [pc, #244]	@ (8000670 <main+0x180>)
 800057a:	f7ff fe37 	bl	80001ec <strcmp>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d10d      	bne.n	80005a0 <main+0xb0>
		  {
			  BSP_LCD_ClearStringLine(2);
 8000584:	2002      	movs	r0, #2
 8000586:	f000 fecf 	bl	8001328 <BSP_LCD_ClearStringLine>
			  BSP_LCD_DisplayStringAtLine(2, turn_on_led3);
 800058a:	493d      	ldr	r1, [pc, #244]	@ (8000680 <main+0x190>)
 800058c:	2002      	movs	r0, #2
 800058e:	f001 f831 	bl	80015f4 <BSP_LCD_DisplayStringAtLine>
			  HAL_GPIO_WritePin(GPIOG, LED3_Pin, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000598:	483a      	ldr	r0, [pc, #232]	@ (8000684 <main+0x194>)
 800059a:	f002 fc0d 	bl	8002db8 <HAL_GPIO_WritePin>
 800059e:	e058      	b.n	8000652 <main+0x162>
		  }
		  else if (strcmp((char *)usb_rx_buffer, (char *)turn_on_led4) == 0)
 80005a0:	4939      	ldr	r1, [pc, #228]	@ (8000688 <main+0x198>)
 80005a2:	4833      	ldr	r0, [pc, #204]	@ (8000670 <main+0x180>)
 80005a4:	f7ff fe22 	bl	80001ec <strcmp>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d10d      	bne.n	80005ca <main+0xda>
		  {
			  BSP_LCD_ClearStringLine(2);
 80005ae:	2002      	movs	r0, #2
 80005b0:	f000 feba 	bl	8001328 <BSP_LCD_ClearStringLine>
			  BSP_LCD_DisplayStringAtLine(2, turn_on_led4);
 80005b4:	4934      	ldr	r1, [pc, #208]	@ (8000688 <main+0x198>)
 80005b6:	2002      	movs	r0, #2
 80005b8:	f001 f81c 	bl	80015f4 <BSP_LCD_DisplayStringAtLine>
			  HAL_GPIO_WritePin(GPIOG, LED4_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005c2:	4830      	ldr	r0, [pc, #192]	@ (8000684 <main+0x194>)
 80005c4:	f002 fbf8 	bl	8002db8 <HAL_GPIO_WritePin>
 80005c8:	e043      	b.n	8000652 <main+0x162>
		  }
		  else if (strcmp((char *)usb_rx_buffer, (char *)turn_off_led3) == 0)
 80005ca:	4930      	ldr	r1, [pc, #192]	@ (800068c <main+0x19c>)
 80005cc:	4828      	ldr	r0, [pc, #160]	@ (8000670 <main+0x180>)
 80005ce:	f7ff fe0d 	bl	80001ec <strcmp>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d10d      	bne.n	80005f4 <main+0x104>
		  {
			  BSP_LCD_ClearStringLine(2);
 80005d8:	2002      	movs	r0, #2
 80005da:	f000 fea5 	bl	8001328 <BSP_LCD_ClearStringLine>
			  BSP_LCD_DisplayStringAtLine(2, turn_off_led3);
 80005de:	492b      	ldr	r1, [pc, #172]	@ (800068c <main+0x19c>)
 80005e0:	2002      	movs	r0, #2
 80005e2:	f001 f807 	bl	80015f4 <BSP_LCD_DisplayStringAtLine>
			  HAL_GPIO_WritePin(GPIOG, LED3_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ec:	4825      	ldr	r0, [pc, #148]	@ (8000684 <main+0x194>)
 80005ee:	f002 fbe3 	bl	8002db8 <HAL_GPIO_WritePin>
 80005f2:	e02e      	b.n	8000652 <main+0x162>
		  }
		  else if (strcmp((char *)usb_rx_buffer, (char *)turn_off_led4) == 0)
 80005f4:	4926      	ldr	r1, [pc, #152]	@ (8000690 <main+0x1a0>)
 80005f6:	481e      	ldr	r0, [pc, #120]	@ (8000670 <main+0x180>)
 80005f8:	f7ff fdf8 	bl	80001ec <strcmp>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d10d      	bne.n	800061e <main+0x12e>
		  {
			  BSP_LCD_ClearStringLine(2);
 8000602:	2002      	movs	r0, #2
 8000604:	f000 fe90 	bl	8001328 <BSP_LCD_ClearStringLine>
			  BSP_LCD_DisplayStringAtLine(2, turn_off_led4);
 8000608:	4921      	ldr	r1, [pc, #132]	@ (8000690 <main+0x1a0>)
 800060a:	2002      	movs	r0, #2
 800060c:	f000 fff2 	bl	80015f4 <BSP_LCD_DisplayStringAtLine>
			  HAL_GPIO_WritePin(GPIOG, LED4_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000616:	481b      	ldr	r0, [pc, #108]	@ (8000684 <main+0x194>)
 8000618:	f002 fbce 	bl	8002db8 <HAL_GPIO_WritePin>
 800061c:	e019      	b.n	8000652 <main+0x162>
		  }
		  else if (strcmp((char *)usb_rx_buffer, (char *)good_night) == 0)
 800061e:	491d      	ldr	r1, [pc, #116]	@ (8000694 <main+0x1a4>)
 8000620:	4813      	ldr	r0, [pc, #76]	@ (8000670 <main+0x180>)
 8000622:	f7ff fde3 	bl	80001ec <strcmp>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d112      	bne.n	8000652 <main+0x162>
		  {
			  BSP_LCD_ClearStringLine(2);
 800062c:	2002      	movs	r0, #2
 800062e:	f000 fe7b 	bl	8001328 <BSP_LCD_ClearStringLine>
			  BSP_LCD_DisplayStringAtLine(2, good_night);
 8000632:	4918      	ldr	r1, [pc, #96]	@ (8000694 <main+0x1a4>)
 8000634:	2002      	movs	r0, #2
 8000636:	f000 ffdd 	bl	80015f4 <BSP_LCD_DisplayStringAtLine>
			  // Tắt cả hai đèn LED
			  HAL_GPIO_WritePin(GPIOG, LED3_Pin, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000640:	4810      	ldr	r0, [pc, #64]	@ (8000684 <main+0x194>)
 8000642:	f002 fbb9 	bl	8002db8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOG, LED4_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800064c:	480d      	ldr	r0, [pc, #52]	@ (8000684 <main+0x194>)
 800064e:	f002 fbb3 	bl	8002db8 <HAL_GPIO_WritePin>
		  }
		  // Xóa buffer sau khi xử lý xong
		  memset(usb_rx_buffer, 0, sizeof(usb_rx_buffer));
 8000652:	2240      	movs	r2, #64	@ 0x40
 8000654:	2100      	movs	r1, #0
 8000656:	4806      	ldr	r0, [pc, #24]	@ (8000670 <main+0x180>)
 8000658:	f009 ff3a 	bl	800a4d0 <memset>
	  if(usb_rx_buffer[0] != 0)
 800065c:	e774      	b.n	8000548 <main+0x58>
 800065e:	bf00      	nop
 8000660:	ff0000ff 	.word	0xff0000ff
 8000664:	0800a55c 	.word	0x0800a55c
 8000668:	0800a56c 	.word	0x0800a56c
 800066c:	0800a57c 	.word	0x0800a57c
 8000670:	200001b8 	.word	0x200001b8
 8000674:	20000000 	.word	0x20000000
 8000678:	0800a584 	.word	0x0800a584
 800067c:	0800a594 	.word	0x0800a594
 8000680:	2000000c 	.word	0x2000000c
 8000684:	40021800 	.word	0x40021800
 8000688:	2000001c 	.word	0x2000001c
 800068c:	2000002c 	.word	0x2000002c
 8000690:	2000003c 	.word	0x2000003c
 8000694:	2000004c 	.word	0x2000004c

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 0320 	add.w	r3, r7, #32
 80006a2:	2230      	movs	r2, #48	@ 0x30
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f009 ff12 	bl	800a4d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c4:	4a27      	ldr	r2, [pc, #156]	@ (8000764 <SystemClock_Config+0xcc>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80006cc:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <SystemClock_Config+0xcc>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b22      	ldr	r3, [pc, #136]	@ (8000768 <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a21      	ldr	r2, [pc, #132]	@ (8000768 <SystemClock_Config+0xd0>)
 80006e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000768 <SystemClock_Config+0xd0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fe:	2302      	movs	r3, #2
 8000700:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	2308      	movs	r3, #8
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800070c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000710:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000716:	2307      	movs	r3, #7
 8000718:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	4618      	mov	r0, r3
 8000720:	f004 f890 	bl	8004844 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800072a:	f000 f87f 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	230f      	movs	r3, #15
 8000730:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2302      	movs	r3, #2
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000740:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000744:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2105      	movs	r1, #5
 800074c:	4618      	mov	r0, r3
 800074e:	f004 faf1 	bl	8004d34 <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000758:	f000 f868 	bl	800082c <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	@ 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	@ 0x28
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b27      	ldr	r3, [pc, #156]	@ (8000824 <MX_GPIO_Init+0xb8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a26      	ldr	r2, [pc, #152]	@ (8000824 <MX_GPIO_Init+0xb8>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <MX_GPIO_Init+0xb8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <MX_GPIO_Init+0xb8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000824 <MX_GPIO_Init+0xb8>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000824 <MX_GPIO_Init+0xb8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b19      	ldr	r3, [pc, #100]	@ (8000824 <MX_GPIO_Init+0xb8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a18      	ldr	r2, [pc, #96]	@ (8000824 <MX_GPIO_Init+0xb8>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <MX_GPIO_Init+0xb8>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b12      	ldr	r3, [pc, #72]	@ (8000824 <MX_GPIO_Init+0xb8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a11      	ldr	r2, [pc, #68]	@ (8000824 <MX_GPIO_Init+0xb8>)
 80007e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <MX_GPIO_Init+0xb8>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80007f8:	480b      	ldr	r0, [pc, #44]	@ (8000828 <MX_GPIO_Init+0xbc>)
 80007fa:	f002 fadd 	bl	8002db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 80007fe:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_GPIO_Init+0xbc>)
 8000818:	f002 f922 	bl	8002a60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	@ 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40021800 	.word	0x40021800

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <Error_Handler+0x8>

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	4a0f      	ldr	r2, [pc, #60]	@ (8000884 <HAL_MspInit+0x4c>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084c:	6453      	str	r3, [r2, #68]	@ 0x44
 800084e:	4b0d      	ldr	r3, [pc, #52]	@ (8000884 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	4a08      	ldr	r2, [pc, #32]	@ (8000884 <HAL_MspInit+0x4c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	@ 0x40
 800086a:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <NMI_Handler+0x4>

08000890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <MemManage_Handler+0x4>

080008a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <BusFault_Handler+0x4>

080008a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <UsageFault_Handler+0x4>

080008b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr

080008da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008de:	f001 fb15 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80008ec:	4802      	ldr	r0, [pc, #8]	@ (80008f8 <OTG_HS_IRQHandler+0x10>)
 80008ee:	f002 fe9a 	bl	8003626 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20001930 	.word	0x20001930

080008fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000900:	4b06      	ldr	r3, [pc, #24]	@ (800091c <SystemInit+0x20>)
 8000902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000906:	4a05      	ldr	r2, [pc, #20]	@ (800091c <SystemInit+0x20>)
 8000908:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800090c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000920:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000958 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000924:	f7ff ffea 	bl	80008fc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000928:	480c      	ldr	r0, [pc, #48]	@ (800095c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800092a:	490d      	ldr	r1, [pc, #52]	@ (8000960 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800092c:	4a0d      	ldr	r2, [pc, #52]	@ (8000964 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000930:	e002      	b.n	8000938 <LoopCopyDataInit>

08000932 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000932:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000934:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000936:	3304      	adds	r3, #4

08000938 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000938:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800093a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800093c:	d3f9      	bcc.n	8000932 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800093e:	4a0a      	ldr	r2, [pc, #40]	@ (8000968 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000940:	4c0a      	ldr	r4, [pc, #40]	@ (800096c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000944:	e001      	b.n	800094a <LoopFillZerobss>

08000946 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000946:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000948:	3204      	adds	r2, #4

0800094a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800094a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800094c:	d3fb      	bcc.n	8000946 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800094e:	f009 fdc7 	bl	800a4e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000952:	f7ff fdcd 	bl	80004f0 <main>
  bx  lr    
 8000956:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000958:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000960:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8000964:	0800c0cc 	.word	0x0800c0cc
  ldr r2, =_sbss
 8000968:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 800096c:	20002034 	.word	0x20002034

08000970 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000970:	e7fe      	b.n	8000970 <ADC_IRQHandler>

08000972 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8000976:	f000 fa5d 	bl	8000e34 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800097a:	20ca      	movs	r0, #202	@ 0xca
 800097c:	f000 f95d 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8000980:	20c3      	movs	r0, #195	@ 0xc3
 8000982:	f000 f967 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8000986:	2008      	movs	r0, #8
 8000988:	f000 f964 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800098c:	2050      	movs	r0, #80	@ 0x50
 800098e:	f000 f961 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8000992:	20cf      	movs	r0, #207	@ 0xcf
 8000994:	f000 f951 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000998:	2000      	movs	r0, #0
 800099a:	f000 f95b 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800099e:	20c1      	movs	r0, #193	@ 0xc1
 80009a0:	f000 f958 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80009a4:	2030      	movs	r0, #48	@ 0x30
 80009a6:	f000 f955 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80009aa:	20ed      	movs	r0, #237	@ 0xed
 80009ac:	f000 f945 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80009b0:	2064      	movs	r0, #100	@ 0x64
 80009b2:	f000 f94f 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80009b6:	2003      	movs	r0, #3
 80009b8:	f000 f94c 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80009bc:	2012      	movs	r0, #18
 80009be:	f000 f949 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80009c2:	2081      	movs	r0, #129	@ 0x81
 80009c4:	f000 f946 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80009c8:	20e8      	movs	r0, #232	@ 0xe8
 80009ca:	f000 f936 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80009ce:	2085      	movs	r0, #133	@ 0x85
 80009d0:	f000 f940 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80009d4:	2000      	movs	r0, #0
 80009d6:	f000 f93d 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80009da:	2078      	movs	r0, #120	@ 0x78
 80009dc:	f000 f93a 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80009e0:	20cb      	movs	r0, #203	@ 0xcb
 80009e2:	f000 f92a 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80009e6:	2039      	movs	r0, #57	@ 0x39
 80009e8:	f000 f934 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80009ec:	202c      	movs	r0, #44	@ 0x2c
 80009ee:	f000 f931 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f92e 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80009f8:	2034      	movs	r0, #52	@ 0x34
 80009fa:	f000 f92b 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80009fe:	2002      	movs	r0, #2
 8000a00:	f000 f928 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8000a04:	20f7      	movs	r0, #247	@ 0xf7
 8000a06:	f000 f918 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8000a0a:	2020      	movs	r0, #32
 8000a0c:	f000 f922 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8000a10:	20ea      	movs	r0, #234	@ 0xea
 8000a12:	f000 f912 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 f91c 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 f919 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8000a22:	20b1      	movs	r0, #177	@ 0xb1
 8000a24:	f000 f909 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f913 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000a2e:	201b      	movs	r0, #27
 8000a30:	f000 f910 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000a34:	20b6      	movs	r0, #182	@ 0xb6
 8000a36:	f000 f900 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000a3a:	200a      	movs	r0, #10
 8000a3c:	f000 f90a 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8000a40:	20a2      	movs	r0, #162	@ 0xa2
 8000a42:	f000 f907 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8000a46:	20c0      	movs	r0, #192	@ 0xc0
 8000a48:	f000 f8f7 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000a4c:	2010      	movs	r0, #16
 8000a4e:	f000 f901 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8000a52:	20c1      	movs	r0, #193	@ 0xc1
 8000a54:	f000 f8f1 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8000a58:	2010      	movs	r0, #16
 8000a5a:	f000 f8fb 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8000a5e:	20c5      	movs	r0, #197	@ 0xc5
 8000a60:	f000 f8eb 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8000a64:	2045      	movs	r0, #69	@ 0x45
 8000a66:	f000 f8f5 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8000a6a:	2015      	movs	r0, #21
 8000a6c:	f000 f8f2 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8000a70:	20c7      	movs	r0, #199	@ 0xc7
 8000a72:	f000 f8e2 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8000a76:	2090      	movs	r0, #144	@ 0x90
 8000a78:	f000 f8ec 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8000a7c:	2036      	movs	r0, #54	@ 0x36
 8000a7e:	f000 f8dc 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8000a82:	20c8      	movs	r0, #200	@ 0xc8
 8000a84:	f000 f8e6 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8000a88:	20f2      	movs	r0, #242	@ 0xf2
 8000a8a:	f000 f8d6 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f8e0 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8000a94:	20b0      	movs	r0, #176	@ 0xb0
 8000a96:	f000 f8d0 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8000a9a:	20c2      	movs	r0, #194	@ 0xc2
 8000a9c:	f000 f8da 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8000aa0:	20b6      	movs	r0, #182	@ 0xb6
 8000aa2:	f000 f8ca 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8000aa6:	200a      	movs	r0, #10
 8000aa8:	f000 f8d4 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8000aac:	20a7      	movs	r0, #167	@ 0xa7
 8000aae:	f000 f8d1 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8000ab2:	2027      	movs	r0, #39	@ 0x27
 8000ab4:	f000 f8ce 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000ab8:	2004      	movs	r0, #4
 8000aba:	f000 f8cb 	bl	8000c54 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8000abe:	202a      	movs	r0, #42	@ 0x2a
 8000ac0:	f000 f8bb 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 f8c5 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f000 f8c2 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 f8bf 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8000ad6:	20ef      	movs	r0, #239	@ 0xef
 8000ad8:	f000 f8bc 	bl	8000c54 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8000adc:	202b      	movs	r0, #43	@ 0x2b
 8000ade:	f000 f8ac 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f8b6 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 f8b3 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f000 f8b0 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8000af4:	203f      	movs	r0, #63	@ 0x3f
 8000af6:	f000 f8ad 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8000afa:	20f6      	movs	r0, #246	@ 0xf6
 8000afc:	f000 f89d 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f000 f8a7 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 f8a4 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8000b0c:	2006      	movs	r0, #6
 8000b0e:	f000 f8a1 	bl	8000c54 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8000b12:	202c      	movs	r0, #44	@ 0x2c
 8000b14:	f000 f891 	bl	8000c3a <ili9341_WriteReg>
  LCD_Delay(200);
 8000b18:	20c8      	movs	r0, #200	@ 0xc8
 8000b1a:	f000 fa79 	bl	8001010 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8000b1e:	2026      	movs	r0, #38	@ 0x26
 8000b20:	f000 f88b 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8000b24:	2001      	movs	r0, #1
 8000b26:	f000 f895 	bl	8000c54 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8000b2a:	20e0      	movs	r0, #224	@ 0xe0
 8000b2c:	f000 f885 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8000b30:	200f      	movs	r0, #15
 8000b32:	f000 f88f 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8000b36:	2029      	movs	r0, #41	@ 0x29
 8000b38:	f000 f88c 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8000b3c:	2024      	movs	r0, #36	@ 0x24
 8000b3e:	f000 f889 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000b42:	200c      	movs	r0, #12
 8000b44:	f000 f886 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8000b48:	200e      	movs	r0, #14
 8000b4a:	f000 f883 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000b4e:	2009      	movs	r0, #9
 8000b50:	f000 f880 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8000b54:	204e      	movs	r0, #78	@ 0x4e
 8000b56:	f000 f87d 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8000b5a:	2078      	movs	r0, #120	@ 0x78
 8000b5c:	f000 f87a 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8000b60:	203c      	movs	r0, #60	@ 0x3c
 8000b62:	f000 f877 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8000b66:	2009      	movs	r0, #9
 8000b68:	f000 f874 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8000b6c:	2013      	movs	r0, #19
 8000b6e:	f000 f871 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000b72:	2005      	movs	r0, #5
 8000b74:	f000 f86e 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8000b78:	2017      	movs	r0, #23
 8000b7a:	f000 f86b 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000b7e:	2011      	movs	r0, #17
 8000b80:	f000 f868 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8000b84:	2000      	movs	r0, #0
 8000b86:	f000 f865 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8000b8a:	20e1      	movs	r0, #225	@ 0xe1
 8000b8c:	f000 f855 	bl	8000c3a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8000b90:	2000      	movs	r0, #0
 8000b92:	f000 f85f 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8000b96:	2016      	movs	r0, #22
 8000b98:	f000 f85c 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8000b9c:	201b      	movs	r0, #27
 8000b9e:	f000 f859 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8000ba2:	2004      	movs	r0, #4
 8000ba4:	f000 f856 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8000ba8:	2011      	movs	r0, #17
 8000baa:	f000 f853 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8000bae:	2007      	movs	r0, #7
 8000bb0:	f000 f850 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8000bb4:	2031      	movs	r0, #49	@ 0x31
 8000bb6:	f000 f84d 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8000bba:	2033      	movs	r0, #51	@ 0x33
 8000bbc:	f000 f84a 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8000bc0:	2042      	movs	r0, #66	@ 0x42
 8000bc2:	f000 f847 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8000bc6:	2005      	movs	r0, #5
 8000bc8:	f000 f844 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8000bcc:	200c      	movs	r0, #12
 8000bce:	f000 f841 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8000bd2:	200a      	movs	r0, #10
 8000bd4:	f000 f83e 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8000bd8:	2028      	movs	r0, #40	@ 0x28
 8000bda:	f000 f83b 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8000bde:	202f      	movs	r0, #47	@ 0x2f
 8000be0:	f000 f838 	bl	8000c54 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8000be4:	200f      	movs	r0, #15
 8000be6:	f000 f835 	bl	8000c54 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8000bea:	2011      	movs	r0, #17
 8000bec:	f000 f825 	bl	8000c3a <ili9341_WriteReg>
  LCD_Delay(200);
 8000bf0:	20c8      	movs	r0, #200	@ 0xc8
 8000bf2:	f000 fa0d 	bl	8001010 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000bf6:	2029      	movs	r0, #41	@ 0x29
 8000bf8:	f000 f81f 	bl	8000c3a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8000bfc:	202c      	movs	r0, #44	@ 0x2c
 8000bfe:	f000 f81c 	bl	8000c3a <ili9341_WriteReg>
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8000c0a:	f000 f913 	bl	8000e34 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8000c0e:	2103      	movs	r1, #3
 8000c10:	20d3      	movs	r0, #211	@ 0xd3
 8000c12:	f000 f82c 	bl	8000c6e <ili9341_ReadData>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29b      	uxth	r3, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8000c22:	2029      	movs	r0, #41	@ 0x29
 8000c24:	f000 f809 	bl	8000c3a <ili9341_WriteReg>
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8000c30:	2028      	movs	r0, #40	@ 0x28
 8000c32:	f000 f802 	bl	8000c3a <ili9341_WriteReg>
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f000 f98e 	bl	8000f68 <LCD_IO_WriteReg>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 f95f 	bl	8000f24 <LCD_IO_WriteData>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	460a      	mov	r2, r1
 8000c78:	80fb      	strh	r3, [r7, #6]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000c7e:	797a      	ldrb	r2, [r7, #5]
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	4611      	mov	r1, r2
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f991 	bl	8000fac <LCD_IO_ReadData>
 8000c8a:	4603      	mov	r3, r0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8000c98:	23f0      	movs	r3, #240	@ 0xf0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8000ca8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000cbc:	4819      	ldr	r0, [pc, #100]	@ (8000d24 <SPIx_Init+0x6c>)
 8000cbe:	f005 f957 	bl	8005f70 <HAL_SPI_GetState>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d12b      	bne.n	8000d20 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <SPIx_Init+0x6c>)
 8000cca:	4a17      	ldr	r2, [pc, #92]	@ (8000d28 <SPIx_Init+0x70>)
 8000ccc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <SPIx_Init+0x6c>)
 8000cd0:	2218      	movs	r2, #24
 8000cd2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <SPIx_Init+0x6c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8000cda:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <SPIx_Init+0x6c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <SPIx_Init+0x6c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <SPIx_Init+0x6c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <SPIx_Init+0x6c>)
 8000cee:	2207      	movs	r2, #7
 8000cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <SPIx_Init+0x6c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <SPIx_Init+0x6c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <SPIx_Init+0x6c>)
 8000d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d04:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000d06:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <SPIx_Init+0x6c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <SPIx_Init+0x6c>)
 8000d0e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d12:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8000d14:	4803      	ldr	r0, [pc, #12]	@ (8000d24 <SPIx_Init+0x6c>)
 8000d16:	f000 f853 	bl	8000dc0 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8000d1a:	4802      	ldr	r0, [pc, #8]	@ (8000d24 <SPIx_Init+0x6c>)
 8000d1c:	f004 fc5d 	bl	80055da <HAL_SPI_Init>
  }
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200001f8 	.word	0x200001f8
 8000d28:	40015000 	.word	0x40015000

08000d2c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <SPIx_Read+0x38>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f107 0108 	add.w	r1, r7, #8
 8000d46:	4808      	ldr	r0, [pc, #32]	@ (8000d68 <SPIx_Read+0x3c>)
 8000d48:	f004 fe50 	bl	80059ec <HAL_SPI_Receive>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000d56:	f000 f827 	bl	8000da8 <SPIx_Error>
  }

  return readvalue;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000094 	.word	0x20000094
 8000d68:	200001f8 	.word	0x200001f8

08000d6c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <SPIx_Write+0x34>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1db9      	adds	r1, r7, #6
 8000d80:	2201      	movs	r2, #1
 8000d82:	4808      	ldr	r0, [pc, #32]	@ (8000da4 <SPIx_Write+0x38>)
 8000d84:	f004 fcee 	bl	8005764 <HAL_SPI_Transmit>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8000d92:	f000 f809 	bl	8000da8 <SPIx_Error>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000094 	.word	0x20000094
 8000da4:	200001f8 	.word	0x200001f8

08000da8 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8000dac:	4803      	ldr	r0, [pc, #12]	@ (8000dbc <SPIx_Error+0x14>)
 8000dae:	f004 fc9d 	bl	80056ec <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8000db2:	f7ff ff81 	bl	8000cb8 <SPIx_Init>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200001f8 	.word	0x200001f8

08000dc0 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	4b17      	ldr	r3, [pc, #92]	@ (8000e2c <SPIx_MspInit+0x6c>)
 8000dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd0:	4a16      	ldr	r2, [pc, #88]	@ (8000e2c <SPIx_MspInit+0x6c>)
 8000dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000dd6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd8:	4b14      	ldr	r3, [pc, #80]	@ (8000e2c <SPIx_MspInit+0x6c>)
 8000dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <SPIx_MspInit+0x6c>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dec:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <SPIx_MspInit+0x6c>)
 8000dee:	f043 0320 	orr.w	r3, r3, #32
 8000df2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <SPIx_MspInit+0x6c>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df8:	f003 0320 	and.w	r3, r3, #32
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8000e00:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000e12:	2305      	movs	r3, #5
 8000e14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <SPIx_MspInit+0x70>)
 8000e1e:	f001 fe1f 	bl	8002a60 <HAL_GPIO_Init>
}
 8000e22:	bf00      	nop
 8000e24:	3728      	adds	r7, #40	@ 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40021400 	.word	0x40021400

08000e34 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8000e3a:	4b36      	ldr	r3, [pc, #216]	@ (8000f14 <LCD_IO_Init+0xe0>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d164      	bne.n	8000f0c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8000e42:	4b34      	ldr	r3, [pc, #208]	@ (8000f14 <LCD_IO_Init+0xe0>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b32      	ldr	r3, [pc, #200]	@ (8000f18 <LCD_IO_Init+0xe4>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e50:	4a31      	ldr	r2, [pc, #196]	@ (8000f18 <LCD_IO_Init+0xe4>)
 8000e52:	f043 0308 	orr.w	r3, r3, #8
 8000e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e58:	4b2f      	ldr	r3, [pc, #188]	@ (8000f18 <LCD_IO_Init+0xe4>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	f003 0308 	and.w	r3, r3, #8
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000e64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000e72:	2302      	movs	r3, #2
 8000e74:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4827      	ldr	r0, [pc, #156]	@ (8000f1c <LCD_IO_Init+0xe8>)
 8000e7e:	f001 fdef 	bl	8002a60 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <LCD_IO_Init+0xe4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <LCD_IO_Init+0xe4>)
 8000e8c:	f043 0308 	orr.w	r3, r3, #8
 8000e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e92:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <LCD_IO_Init+0xe4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000e9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4819      	ldr	r0, [pc, #100]	@ (8000f1c <LCD_IO_Init+0xe8>)
 8000eb8:	f001 fdd2 	bl	8002a60 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <LCD_IO_Init+0xe4>)
 8000ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec4:	4a14      	ldr	r2, [pc, #80]	@ (8000f18 <LCD_IO_Init+0xe4>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <LCD_IO_Init+0xe4>)
 8000ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	4619      	mov	r1, r3
 8000eee:	480c      	ldr	r0, [pc, #48]	@ (8000f20 <LCD_IO_Init+0xec>)
 8000ef0:	f001 fdb6 	bl	8002a60 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2104      	movs	r1, #4
 8000ef8:	4809      	ldr	r0, [pc, #36]	@ (8000f20 <LCD_IO_Init+0xec>)
 8000efa:	f001 ff5d 	bl	8002db8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000efe:	2201      	movs	r2, #1
 8000f00:	2104      	movs	r1, #4
 8000f02:	4807      	ldr	r0, [pc, #28]	@ (8000f20 <LCD_IO_Init+0xec>)
 8000f04:	f001 ff58 	bl	8002db8 <HAL_GPIO_WritePin>

    SPIx_Init();
 8000f08:	f7ff fed6 	bl	8000cb8 <SPIx_Init>
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000250 	.word	0x20000250
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020c00 	.word	0x40020c00
 8000f20:	40020800 	.word	0x40020800

08000f24 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f34:	480a      	ldr	r0, [pc, #40]	@ (8000f60 <LCD_IO_WriteData+0x3c>)
 8000f36:	f001 ff3f 	bl	8002db8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	4809      	ldr	r0, [pc, #36]	@ (8000f64 <LCD_IO_WriteData+0x40>)
 8000f40:	f001 ff3a 	bl	8002db8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff10 	bl	8000d6c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	2104      	movs	r1, #4
 8000f50:	4804      	ldr	r0, [pc, #16]	@ (8000f64 <LCD_IO_WriteData+0x40>)
 8000f52:	f001 ff31 	bl	8002db8 <HAL_GPIO_WritePin>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40020c00 	.word	0x40020c00
 8000f64:	40020800 	.word	0x40020800

08000f68 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f78:	480a      	ldr	r0, [pc, #40]	@ (8000fa4 <LCD_IO_WriteReg+0x3c>)
 8000f7a:	f001 ff1d 	bl	8002db8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2104      	movs	r1, #4
 8000f82:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <LCD_IO_WriteReg+0x40>)
 8000f84:	f001 ff18 	bl	8002db8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff feed 	bl	8000d6c <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000f92:	2201      	movs	r2, #1
 8000f94:	2104      	movs	r1, #4
 8000f96:	4804      	ldr	r0, [pc, #16]	@ (8000fa8 <LCD_IO_WriteReg+0x40>)
 8000f98:	f001 ff0e 	bl	8002db8 <HAL_GPIO_WritePin>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	40020800 	.word	0x40020800

08000fac <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	80fb      	strh	r3, [r7, #6]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2104      	movs	r1, #4
 8000fc4:	4810      	ldr	r0, [pc, #64]	@ (8001008 <LCD_IO_ReadData+0x5c>)
 8000fc6:	f001 fef7 	bl	8002db8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd0:	480e      	ldr	r0, [pc, #56]	@ (800100c <LCD_IO_ReadData+0x60>)
 8000fd2:	f001 fef1 	bl	8002db8 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8000fd6:	88fb      	ldrh	r3, [r7, #6]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fec7 	bl	8000d6c <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8000fde:	797b      	ldrb	r3, [r7, #5]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fea3 	bl	8000d2c <SPIx_Read>
 8000fe6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fee:	4807      	ldr	r0, [pc, #28]	@ (800100c <LCD_IO_ReadData+0x60>)
 8000ff0:	f001 fee2 	bl	8002db8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	4803      	ldr	r0, [pc, #12]	@ (8001008 <LCD_IO_ReadData+0x5c>)
 8000ffa:	f001 fedd 	bl	8002db8 <HAL_GPIO_WritePin>

  return readvalue;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40020800 	.word	0x40020800
 800100c:	40020c00 	.word	0x40020c00

08001010 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f000 ff97 	bl	8001f4c <HAL_Delay>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 800102c:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 800102e:	4a2e      	ldr	r2, [pc, #184]	@ (80010e8 <BSP_LCD_Init+0xc0>)
 8001030:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001032:	4b2c      	ldr	r3, [pc, #176]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 8001034:	2209      	movs	r2, #9
 8001036:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001038:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 800103a:	2201      	movs	r2, #1
 800103c:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800103e:	4b29      	ldr	r3, [pc, #164]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 8001040:	221d      	movs	r2, #29
 8001042:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001044:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 8001046:	2203      	movs	r2, #3
 8001048:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 800104a:	4b26      	ldr	r3, [pc, #152]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 800104c:	f240 120d 	movw	r2, #269	@ 0x10d
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8001052:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 8001054:	f240 1243 	movw	r2, #323	@ 0x143
 8001058:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 800105a:	4b22      	ldr	r3, [pc, #136]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 800105c:	f240 1217 	movw	r2, #279	@ 0x117
 8001060:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8001062:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 8001064:	f240 1247 	movw	r2, #327	@ 0x147
 8001068:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8001072:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 8001074:	2200      	movs	r2, #0
 8001076:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 800107a:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <BSP_LCD_Init+0xc4>)
 8001084:	2208      	movs	r2, #8
 8001086:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <BSP_LCD_Init+0xc4>)
 800108a:	22c0      	movs	r2, #192	@ 0xc0
 800108c:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <BSP_LCD_Init+0xc4>)
 8001090:	2204      	movs	r2, #4
 8001092:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001094:	4b15      	ldr	r3, [pc, #84]	@ (80010ec <BSP_LCD_Init+0xc4>)
 8001096:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800109a:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800109c:	4813      	ldr	r0, [pc, #76]	@ (80010ec <BSP_LCD_Init+0xc4>)
 800109e:	f004 f841 	bl	8005124 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80010a8:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 80010ba:	f000 fb1d 	bl	80016f8 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 80010be:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <BSP_LCD_Init+0xbc>)
 80010c0:	f001 fe94 	bl	8002dec <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <BSP_LCD_Init+0xc8>)
 80010c6:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <BSP_LCD_Init+0xcc>)
 80010c8:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <BSP_LCD_Init+0xc8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80010d2:	f000 fcff 	bl	8001ad4 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80010d6:	4808      	ldr	r0, [pc, #32]	@ (80010f8 <BSP_LCD_Init+0xd0>)
 80010d8:	f000 f8ce 	bl	8001278 <BSP_LCD_SetFont>

  return LCD_OK;
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000254 	.word	0x20000254
 80010e8:	40016800 	.word	0x40016800
 80010ec:	2000033c 	.word	0x2000033c
 80010f0:	20000388 	.word	0x20000388
 80010f4:	2000005c 	.word	0x2000005c
 80010f8:	20000098 	.word	0x20000098

080010fc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001100:	4b03      	ldr	r3, [pc, #12]	@ (8001110 <BSP_LCD_GetXSize+0x14>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001106:	4798      	blx	r3
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000388 	.word	0x20000388

08001114 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001118:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <BSP_LCD_GetYSize+0x14>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800111e:	4798      	blx	r3
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000388 	.word	0x20000388

0800112c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b090      	sub	sp, #64	@ 0x40
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800113c:	f7ff ffde 	bl	80010fc <BSP_LCD_GetXSize>
 8001140:	4603      	mov	r3, r0
 8001142:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8001148:	f7ff ffe4 	bl	8001114 <BSP_LCD_GetYSize>
 800114c:	4603      	mov	r3, r0
 800114e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8001158:	23ff      	movs	r3, #255	@ 0xff
 800115a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001172:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001178:	2307      	movs	r3, #7
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800117c:	f7ff ffbe 	bl	80010fc <BSP_LCD_GetXSize>
 8001180:	4603      	mov	r3, r0
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001184:	f7ff ffc6 	bl	8001114 <BSP_LCD_GetYSize>
 8001188:	4603      	mov	r3, r0
 800118a:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 800118c:	88fa      	ldrh	r2, [r7, #6]
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4619      	mov	r1, r3
 8001194:	4814      	ldr	r0, [pc, #80]	@ (80011e8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8001196:	f001 ff03 	bl	8002fa0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800119a:	88fa      	ldrh	r2, [r7, #6]
 800119c:	4913      	ldr	r1, [pc, #76]	@ (80011ec <BSP_LCD_LayerDefaultInit+0xc0>)
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	440b      	add	r3, r1
 80011a8:	3304      	adds	r3, #4
 80011aa:	f04f 32ff 	mov.w	r2, #4294967295
 80011ae:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	490e      	ldr	r1, [pc, #56]	@ (80011ec <BSP_LCD_LayerDefaultInit+0xc0>)
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	3308      	adds	r3, #8
 80011c0:	4a0b      	ldr	r2, [pc, #44]	@ (80011f0 <BSP_LCD_LayerDefaultInit+0xc4>)
 80011c2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 80011c4:	88fa      	ldrh	r2, [r7, #6]
 80011c6:	4909      	ldr	r1, [pc, #36]	@ (80011ec <BSP_LCD_LayerDefaultInit+0xc0>)
 80011c8:	4613      	mov	r3, r2
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80011d6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80011d8:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80011da:	f001 ff1f 	bl	800301c <HAL_LTDC_EnableDither>
}
 80011de:	bf00      	nop
 80011e0:	3740      	adds	r7, #64	@ 0x40
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000254 	.word	0x20000254
 80011ec:	20000370 	.word	0x20000370
 80011f0:	20000098 	.word	0x20000098

080011f4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <BSP_LCD_SelectLayer+0x1c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	2000036c 	.word	0x2000036c

08001214 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <BSP_LCD_SetTextColor+0x28>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4907      	ldr	r1, [pc, #28]	@ (8001240 <BSP_LCD_SetTextColor+0x2c>)
 8001222:	4613      	mov	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	601a      	str	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	2000036c 	.word	0x2000036c
 8001240:	20000370 	.word	0x20000370

08001244 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800124c:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <BSP_LCD_SetBackColor+0x2c>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4908      	ldr	r1, [pc, #32]	@ (8001274 <BSP_LCD_SetBackColor+0x30>)
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	3304      	adds	r3, #4
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	601a      	str	r2, [r3, #0]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	2000036c 	.word	0x2000036c
 8001274:	20000370 	.word	0x20000370

08001278 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <BSP_LCD_SetFont+0x2c>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4908      	ldr	r1, [pc, #32]	@ (80012a8 <BSP_LCD_SetFont+0x30>)
 8001286:	4613      	mov	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	4413      	add	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	440b      	add	r3, r1
 8001290:	3308      	adds	r3, #8
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	601a      	str	r2, [r3, #0]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000036c 	.word	0x2000036c
 80012a8:	20000370 	.word	0x20000370

080012ac <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80012b0:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <BSP_LCD_GetFont+0x24>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4907      	ldr	r1, [pc, #28]	@ (80012d4 <BSP_LCD_GetFont+0x28>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	3308      	adds	r3, #8
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	2000036c 	.word	0x2000036c
 80012d4:	20000370 	.word	0x20000370

080012d8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80012d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012da:	b085      	sub	sp, #20
 80012dc:	af02      	add	r7, sp, #8
 80012de:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 80012e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <BSP_LCD_Clear+0x48>)
 80012e2:	681c      	ldr	r4, [r3, #0]
 80012e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <BSP_LCD_Clear+0x48>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001324 <BSP_LCD_Clear+0x4c>)
 80012ea:	2134      	movs	r1, #52	@ 0x34
 80012ec:	fb01 f303 	mul.w	r3, r1, r3
 80012f0:	4413      	add	r3, r2
 80012f2:	335c      	adds	r3, #92	@ 0x5c
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	461e      	mov	r6, r3
 80012f8:	f7ff ff00 	bl	80010fc <BSP_LCD_GetXSize>
 80012fc:	4605      	mov	r5, r0
 80012fe:	f7ff ff09 	bl	8001114 <BSP_LCD_GetYSize>
 8001302:	4602      	mov	r2, r0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	2300      	movs	r3, #0
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	4613      	mov	r3, r2
 800130e:	462a      	mov	r2, r5
 8001310:	4631      	mov	r1, r6
 8001312:	4620      	mov	r0, r4
 8001314:	f000 fba6 	bl	8001a64 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001320:	2000036c 	.word	0x2000036c
 8001324:	20000254 	.word	0x20000254

08001328 <BSP_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line.
  * @param  Line: the line to be cleared
  */
void BSP_LCD_ClearStringLine(uint32_t Line)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t colorbackup = DrawProp[ActiveLayer].TextColor;
 8001330:	4b2d      	ldr	r3, [pc, #180]	@ (80013e8 <BSP_LCD_ClearStringLine+0xc0>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	492d      	ldr	r1, [pc, #180]	@ (80013ec <BSP_LCD_ClearStringLine+0xc4>)
 8001336:	4613      	mov	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60fb      	str	r3, [r7, #12]
  DrawProp[ActiveLayer].TextColor = DrawProp[ActiveLayer].BackColor;
 8001344:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <BSP_LCD_ClearStringLine+0xc0>)
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	4b27      	ldr	r3, [pc, #156]	@ (80013e8 <BSP_LCD_ClearStringLine+0xc0>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	4827      	ldr	r0, [pc, #156]	@ (80013ec <BSP_LCD_ClearStringLine+0xc4>)
 800134e:	460b      	mov	r3, r1
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	440b      	add	r3, r1
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4403      	add	r3, r0
 8001358:	3304      	adds	r3, #4
 800135a:	6819      	ldr	r1, [r3, #0]
 800135c:	4823      	ldr	r0, [pc, #140]	@ (80013ec <BSP_LCD_ClearStringLine+0xc4>)
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4403      	add	r3, r0
 8001368:	6019      	str	r1, [r3, #0]

  /* Draw rectangle with background color */
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(),
 800136a:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <BSP_LCD_ClearStringLine+0xc0>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	491f      	ldr	r1, [pc, #124]	@ (80013ec <BSP_LCD_ClearStringLine+0xc4>)
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	3308      	adds	r3, #8
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	88da      	ldrh	r2, [r3, #6]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	b29b      	uxth	r3, r3
 8001384:	fb12 f303 	smulbb	r3, r2, r3
 8001388:	b29c      	uxth	r4, r3
 800138a:	f7ff feb7 	bl	80010fc <BSP_LCD_GetXSize>
 800138e:	4603      	mov	r3, r0
 8001390:	b299      	uxth	r1, r3
                   DrawProp[ActiveLayer].pFont->Height);
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <BSP_LCD_ClearStringLine+0xc0>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4815      	ldr	r0, [pc, #84]	@ (80013ec <BSP_LCD_ClearStringLine+0xc4>)
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4403      	add	r3, r0
 80013a2:	3308      	adds	r3, #8
 80013a4:	681b      	ldr	r3, [r3, #0]
  BSP_LCD_FillRect(0, (Line * DrawProp[ActiveLayer].pFont->Height), BSP_LCD_GetXSize(),
 80013a6:	88db      	ldrh	r3, [r3, #6]
 80013a8:	460a      	mov	r2, r1
 80013aa:	4621      	mov	r1, r4
 80013ac:	2000      	movs	r0, #0
 80013ae:	f000 f939 	bl	8001624 <BSP_LCD_FillRect>

  DrawProp[ActiveLayer].TextColor = colorbackup;
 80013b2:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <BSP_LCD_ClearStringLine+0xc0>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	490d      	ldr	r1, [pc, #52]	@ (80013ec <BSP_LCD_ClearStringLine+0xc4>)
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	601a      	str	r2, [r3, #0]
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <BSP_LCD_ClearStringLine+0xc0>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4908      	ldr	r1, [pc, #32]	@ (80013ec <BSP_LCD_ClearStringLine+0xc4>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff1b 	bl	8001214 <BSP_LCD_SetTextColor>
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000036c 	.word	0x2000036c
 80013ec:	20000370 	.word	0x20000370

080013f0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	80fb      	strh	r3, [r7, #6]
 80013fa:	460b      	mov	r3, r1
 80013fc:	80bb      	strh	r3, [r7, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001402:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <BSP_LCD_DisplayChar+0x80>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	491b      	ldr	r1, [pc, #108]	@ (8001474 <BSP_LCD_DisplayChar+0x84>)
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	3308      	adds	r3, #8
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6819      	ldr	r1, [r3, #0]
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800141e:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <BSP_LCD_DisplayChar+0x80>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4c14      	ldr	r4, [pc, #80]	@ (8001474 <BSP_LCD_DisplayChar+0x84>)
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4423      	add	r3, r4
 800142e:	3308      	adds	r3, #8
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8001434:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001438:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <BSP_LCD_DisplayChar+0x80>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4c0d      	ldr	r4, [pc, #52]	@ (8001474 <BSP_LCD_DisplayChar+0x84>)
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4423      	add	r3, r4
 8001448:	3308      	adds	r3, #8
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	889b      	ldrh	r3, [r3, #4]
 800144e:	3307      	adds	r3, #7
 8001450:	2b00      	cmp	r3, #0
 8001452:	da00      	bge.n	8001456 <BSP_LCD_DisplayChar+0x66>
 8001454:	3307      	adds	r3, #7
 8001456:	10db      	asrs	r3, r3, #3
 8001458:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800145c:	18ca      	adds	r2, r1, r3
 800145e:	88b9      	ldrh	r1, [r7, #4]
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fa44 	bl	80018f0 <DrawChar>
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}
 8001470:	2000036c 	.word	0x2000036c
 8001474:	20000370 	.word	0x20000370

08001478 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	60ba      	str	r2, [r7, #8]
 8001480:	461a      	mov	r2, r3
 8001482:	4603      	mov	r3, r0
 8001484:	81fb      	strh	r3, [r7, #14]
 8001486:	460b      	mov	r3, r1
 8001488:	81bb      	strh	r3, [r7, #12]
 800148a:	4613      	mov	r3, r2
 800148c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800148e:	2301      	movs	r3, #1
 8001490:	83fb      	strh	r3, [r7, #30]
 8001492:	2300      	movs	r3, #0
 8001494:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 80014a2:	e002      	b.n	80014aa <BSP_LCD_DisplayStringAt+0x32>
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	3301      	adds	r3, #1
 80014a8:	61bb      	str	r3, [r7, #24]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	617a      	str	r2, [r7, #20]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f6      	bne.n	80014a4 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 80014b6:	f7ff fe21 	bl	80010fc <BSP_LCD_GetXSize>
 80014ba:	4601      	mov	r1, r0
 80014bc:	4b4b      	ldr	r3, [pc, #300]	@ (80015ec <BSP_LCD_DisplayStringAt+0x174>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	484b      	ldr	r0, [pc, #300]	@ (80015f0 <BSP_LCD_DisplayStringAt+0x178>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4403      	add	r3, r0
 80014cc:	3308      	adds	r3, #8
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	889b      	ldrh	r3, [r3, #4]
 80014d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d6:	613b      	str	r3, [r7, #16]

  switch (mode)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d01c      	beq.n	8001518 <BSP_LCD_DisplayStringAt+0xa0>
 80014de:	2b03      	cmp	r3, #3
 80014e0:	dc33      	bgt.n	800154a <BSP_LCD_DisplayStringAt+0xd2>
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d002      	beq.n	80014ec <BSP_LCD_DisplayStringAt+0x74>
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d019      	beq.n	800151e <BSP_LCD_DisplayStringAt+0xa6>
 80014ea:	e02e      	b.n	800154a <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	1ad1      	subs	r1, r2, r3
 80014f2:	4b3e      	ldr	r3, [pc, #248]	@ (80015ec <BSP_LCD_DisplayStringAt+0x174>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	483e      	ldr	r0, [pc, #248]	@ (80015f0 <BSP_LCD_DisplayStringAt+0x178>)
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4403      	add	r3, r0
 8001502:	3308      	adds	r3, #8
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	889b      	ldrh	r3, [r3, #4]
 8001508:	fb01 f303 	mul.w	r3, r1, r3
 800150c:	085b      	lsrs	r3, r3, #1
 800150e:	b29a      	uxth	r2, r3
 8001510:	89fb      	ldrh	r3, [r7, #14]
 8001512:	4413      	add	r3, r2
 8001514:	83fb      	strh	r3, [r7, #30]
      break;
 8001516:	e01b      	b.n	8001550 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8001518:	89fb      	ldrh	r3, [r7, #14]
 800151a:	83fb      	strh	r3, [r7, #30]
      break;
 800151c:	e018      	b.n	8001550 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	b299      	uxth	r1, r3
 8001526:	4b31      	ldr	r3, [pc, #196]	@ (80015ec <BSP_LCD_DisplayStringAt+0x174>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4831      	ldr	r0, [pc, #196]	@ (80015f0 <BSP_LCD_DisplayStringAt+0x178>)
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4403      	add	r3, r0
 8001536:	3308      	adds	r3, #8
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	889b      	ldrh	r3, [r3, #4]
 800153c:	fb11 f303 	smulbb	r3, r1, r3
 8001540:	b29a      	uxth	r2, r3
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	4413      	add	r3, r2
 8001546:	83fb      	strh	r3, [r7, #30]
      break;
 8001548:	e002      	b.n	8001550 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	83fb      	strh	r3, [r7, #30]
      break;
 800154e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001550:	e01a      	b.n	8001588 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	89b9      	ldrh	r1, [r7, #12]
 8001558:	8bfb      	ldrh	r3, [r7, #30]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ff48 	bl	80013f0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001560:	4b22      	ldr	r3, [pc, #136]	@ (80015ec <BSP_LCD_DisplayStringAt+0x174>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4922      	ldr	r1, [pc, #136]	@ (80015f0 <BSP_LCD_DisplayStringAt+0x178>)
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	3308      	adds	r3, #8
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	889a      	ldrh	r2, [r3, #4]
 8001576:	8bfb      	ldrh	r3, [r7, #30]
 8001578:	4413      	add	r3, r2
 800157a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	3301      	adds	r3, #1
 8001580:	60bb      	str	r3, [r7, #8]
    i++;
 8001582:	8bbb      	ldrh	r3, [r7, #28]
 8001584:	3301      	adds	r3, #1
 8001586:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf14      	ite	ne
 8001590:	2301      	movne	r3, #1
 8001592:	2300      	moveq	r3, #0
 8001594:	b2dc      	uxtb	r4, r3
 8001596:	f7ff fdb1 	bl	80010fc <BSP_LCD_GetXSize>
 800159a:	8bb9      	ldrh	r1, [r7, #28]
 800159c:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <BSP_LCD_DisplayStringAt+0x174>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4d13      	ldr	r5, [pc, #76]	@ (80015f0 <BSP_LCD_DisplayStringAt+0x178>)
 80015a2:	4613      	mov	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	442b      	add	r3, r5
 80015ac:	3308      	adds	r3, #8
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	889b      	ldrh	r3, [r3, #4]
 80015b2:	fb01 f303 	mul.w	r3, r1, r3
 80015b6:	1ac3      	subs	r3, r0, r3
 80015b8:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <BSP_LCD_DisplayStringAt+0x174>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <BSP_LCD_DisplayStringAt+0x178>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4403      	add	r3, r0
 80015ca:	3308      	adds	r3, #8
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80015d0:	4299      	cmp	r1, r3
 80015d2:	bf2c      	ite	cs
 80015d4:	2301      	movcs	r3, #1
 80015d6:	2300      	movcc	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4023      	ands	r3, r4
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1b7      	bne.n	8001552 <BSP_LCD_DisplayStringAt+0xda>
  }
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bdb0      	pop	{r4, r5, r7, pc}
 80015ec:	2000036c 	.word	0x2000036c
 80015f0:	20000370 	.word	0x20000370

080015f4 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8001600:	f7ff fe54 	bl	80012ac <BSP_LCD_GetFont>
 8001604:	4603      	mov	r3, r0
 8001606:	88db      	ldrh	r3, [r3, #6]
 8001608:	88fa      	ldrh	r2, [r7, #6]
 800160a:	fb12 f303 	smulbb	r3, r2, r3
 800160e:	b299      	uxth	r1, r3
 8001610:	2303      	movs	r3, #3
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	2000      	movs	r0, #0
 8001616:	f7ff ff2f 	bl	8001478 <BSP_LCD_DisplayStringAt>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af02      	add	r7, sp, #8
 800162c:	4604      	mov	r4, r0
 800162e:	4608      	mov	r0, r1
 8001630:	4611      	mov	r1, r2
 8001632:	461a      	mov	r2, r3
 8001634:	4623      	mov	r3, r4
 8001636:	80fb      	strh	r3, [r7, #6]
 8001638:	4603      	mov	r3, r0
 800163a:	80bb      	strh	r3, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
 8001640:	4613      	mov	r3, r2
 8001642:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001648:	4b20      	ldr	r3, [pc, #128]	@ (80016cc <BSP_LCD_FillRect+0xa8>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4920      	ldr	r1, [pc, #128]	@ (80016d0 <BSP_LCD_FillRect+0xac>)
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fdda 	bl	8001214 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8001660:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <BSP_LCD_FillRect+0xa8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1b      	ldr	r2, [pc, #108]	@ (80016d4 <BSP_LCD_FillRect+0xb0>)
 8001666:	2134      	movs	r1, #52	@ 0x34
 8001668:	fb01 f303 	mul.w	r3, r1, r3
 800166c:	4413      	add	r3, r2
 800166e:	335c      	adds	r3, #92	@ 0x5c
 8001670:	681c      	ldr	r4, [r3, #0]
 8001672:	f7ff fd43 	bl	80010fc <BSP_LCD_GetXSize>
 8001676:	4602      	mov	r2, r0
 8001678:	88bb      	ldrh	r3, [r7, #4]
 800167a:	fb03 f202 	mul.w	r2, r3, r2
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4423      	add	r3, r4
 8001686:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width),
 8001688:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <BSP_LCD_FillRect+0xa8>)
 800168a:	681c      	ldr	r4, [r3, #0]
 800168c:	68fd      	ldr	r5, [r7, #12]
 800168e:	887e      	ldrh	r6, [r7, #2]
 8001690:	f8b7 8000 	ldrh.w	r8, [r7]
 8001694:	f7ff fd32 	bl	80010fc <BSP_LCD_GetXSize>
 8001698:	4602      	mov	r2, r0
 800169a:	887b      	ldrh	r3, [r7, #2]
 800169c:	1ad1      	subs	r1, r2, r3
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <BSP_LCD_FillRect+0xa8>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	480b      	ldr	r0, [pc, #44]	@ (80016d0 <BSP_LCD_FillRect+0xac>)
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4403      	add	r3, r0
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	9100      	str	r1, [sp, #0]
 80016b4:	4643      	mov	r3, r8
 80016b6:	4632      	mov	r2, r6
 80016b8:	4629      	mov	r1, r5
 80016ba:	4620      	mov	r0, r4
 80016bc:	f000 f9d2 	bl	8001a64 <FillBuffer>
             DrawProp[ActiveLayer].TextColor);
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016ca:	bf00      	nop
 80016cc:	2000036c 	.word	0x2000036c
 80016d0:	20000370 	.word	0x20000370
 80016d4:	20000254 	.word	0x20000254

080016d8 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 80016dc:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <BSP_LCD_DisplayOn+0x1c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80016e6:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <BSP_LCD_DisplayOn+0x1c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4798      	blx	r3
  }
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000388 	.word	0x20000388

080016f8 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08e      	sub	sp, #56	@ 0x38
 80016fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
 8001702:	4b61      	ldr	r3, [pc, #388]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	4a60      	ldr	r2, [pc, #384]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001708:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800170c:	6453      	str	r3, [r2, #68]	@ 0x44
 800170e:	4b5e      	ldr	r3, [pc, #376]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001716:	623b      	str	r3, [r7, #32]
 8001718:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	4b5a      	ldr	r3, [pc, #360]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a59      	ldr	r2, [pc, #356]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001724:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b57      	ldr	r3, [pc, #348]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
 800173a:	4b53      	ldr	r3, [pc, #332]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a52      	ldr	r2, [pc, #328]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b50      	ldr	r3, [pc, #320]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	61bb      	str	r3, [r7, #24]
 8001750:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	4b4c      	ldr	r3, [pc, #304]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a4b      	ldr	r2, [pc, #300]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b49      	ldr	r3, [pc, #292]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
 8001772:	4b45      	ldr	r3, [pc, #276]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	4a44      	ldr	r2, [pc, #272]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	6313      	str	r3, [r2, #48]	@ 0x30
 800177e:	4b42      	ldr	r3, [pc, #264]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b3e      	ldr	r3, [pc, #248]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4a3d      	ldr	r2, [pc, #244]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 8001794:	f043 0308 	orr.w	r3, r3, #8
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b3b      	ldr	r3, [pc, #236]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	4b37      	ldr	r3, [pc, #220]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a36      	ldr	r2, [pc, #216]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 80017b0:	f043 0320 	orr.w	r3, r3, #32
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b34      	ldr	r3, [pc, #208]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0320 	and.w	r3, r3, #32
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	4b30      	ldr	r3, [pc, #192]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 80017cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <BSP_LCD_MspInit+0x190>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80017de:	f641 0358 	movw	r3, #6232	@ 0x1858
 80017e2:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80017ec:	2302      	movs	r3, #2
 80017ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 80017f0:	230e      	movs	r3, #14
 80017f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80017f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f8:	4619      	mov	r1, r3
 80017fa:	4824      	ldr	r0, [pc, #144]	@ (800188c <BSP_LCD_MspInit+0x194>)
 80017fc:	f001 f930 	bl	8002a60 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8001800:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800180a:	4619      	mov	r1, r3
 800180c:	4820      	ldr	r0, [pc, #128]	@ (8001890 <BSP_LCD_MspInit+0x198>)
 800180e:	f001 f927 	bl	8002a60 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001812:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001816:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001818:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	481d      	ldr	r0, [pc, #116]	@ (8001894 <BSP_LCD_MspInit+0x19c>)
 8001820:	f001 f91e 	bl	8002a60 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001824:	2348      	movs	r3, #72	@ 0x48
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800182c:	4619      	mov	r1, r3
 800182e:	481a      	ldr	r0, [pc, #104]	@ (8001898 <BSP_LCD_MspInit+0x1a0>)
 8001830:	f001 f916 	bl	8002a60 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001834:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800183a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183e:	4619      	mov	r1, r3
 8001840:	4816      	ldr	r0, [pc, #88]	@ (800189c <BSP_LCD_MspInit+0x1a4>)
 8001842:	f001 f90d 	bl	8002a60 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001846:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800184c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001850:	4619      	mov	r1, r3
 8001852:	4813      	ldr	r0, [pc, #76]	@ (80018a0 <BSP_LCD_MspInit+0x1a8>)
 8001854:	f001 f904 	bl	8002a60 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001858:	2303      	movs	r3, #3
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 800185c:	2309      	movs	r3, #9
 800185e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001860:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001864:	4619      	mov	r1, r3
 8001866:	480a      	ldr	r0, [pc, #40]	@ (8001890 <BSP_LCD_MspInit+0x198>)
 8001868:	f001 f8fa 	bl	8002a60 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800186c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	4809      	ldr	r0, [pc, #36]	@ (80018a0 <BSP_LCD_MspInit+0x1a8>)
 800187a:	f001 f8f1 	bl	8002a60 <HAL_GPIO_Init>
}
 800187e:	bf00      	nop
 8001880:	3738      	adds	r7, #56	@ 0x38
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400
 8001894:	40020800 	.word	0x40020800
 8001898:	40020c00 	.word	0x40020c00
 800189c:	40021400 	.word	0x40021400
 80018a0:	40021800 	.word	0x40021800

080018a4 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	603a      	str	r2, [r7, #0]
 80018ae:	80fb      	strh	r3, [r7, #6]
 80018b0:	460b      	mov	r3, r1
 80018b2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	@ (80018e8 <BSP_LCD_DrawPixel+0x44>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0c      	ldr	r2, [pc, #48]	@ (80018ec <BSP_LCD_DrawPixel+0x48>)
 80018ba:	2134      	movs	r1, #52	@ 0x34
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	335c      	adds	r3, #92	@ 0x5c
 80018c4:	681c      	ldr	r4, [r3, #0]
 80018c6:	88bd      	ldrh	r5, [r7, #4]
 80018c8:	f7ff fc18 	bl	80010fc <BSP_LCD_GetXSize>
 80018cc:	4603      	mov	r3, r0
 80018ce:	fb03 f205 	mul.w	r2, r3, r5
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	4413      	add	r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	4423      	add	r3, r4
 80018da:	461a      	mov	r2, r3
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bdb0      	pop	{r4, r5, r7, pc}
 80018e8:	2000036c 	.word	0x2000036c
 80018ec:	20000254 	.word	0x20000254

080018f0 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b088      	sub	sp, #32
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	603a      	str	r2, [r7, #0]
 80018fa:	80fb      	strh	r3, [r7, #6]
 80018fc:	460b      	mov	r3, r1
 80018fe:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	2300      	movs	r3, #0
 8001906:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800190c:	4b53      	ldr	r3, [pc, #332]	@ (8001a5c <DrawChar+0x16c>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4953      	ldr	r1, [pc, #332]	@ (8001a60 <DrawChar+0x170>)
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3308      	adds	r3, #8
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	88db      	ldrh	r3, [r3, #6]
 8001922:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8001924:	4b4d      	ldr	r3, [pc, #308]	@ (8001a5c <DrawChar+0x16c>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	494d      	ldr	r1, [pc, #308]	@ (8001a60 <DrawChar+0x170>)
 800192a:	4613      	mov	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	3308      	adds	r3, #8
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	889b      	ldrh	r3, [r3, #4]
 800193a:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 800193c:	8a3b      	ldrh	r3, [r7, #16]
 800193e:	3307      	adds	r3, #7
 8001940:	2b00      	cmp	r3, #0
 8001942:	da00      	bge.n	8001946 <DrawChar+0x56>
 8001944:	3307      	adds	r3, #7
 8001946:	10db      	asrs	r3, r3, #3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	b2da      	uxtb	r2, r3
 800194e:	8a3b      	ldrh	r3, [r7, #16]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	e076      	b.n	8001a4a <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 800195c:	8a3b      	ldrh	r3, [r7, #16]
 800195e:	3307      	adds	r3, #7
 8001960:	2b00      	cmp	r3, #0
 8001962:	da00      	bge.n	8001966 <DrawChar+0x76>
 8001964:	3307      	adds	r3, #7
 8001966:	10db      	asrs	r3, r3, #3
 8001968:	461a      	mov	r2, r3
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	4413      	add	r3, r2
 8001974:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 8001976:	8a3b      	ldrh	r3, [r7, #16]
 8001978:	3307      	adds	r3, #7
 800197a:	2b00      	cmp	r3, #0
 800197c:	da00      	bge.n	8001980 <DrawChar+0x90>
 800197e:	3307      	adds	r3, #7
 8001980:	10db      	asrs	r3, r3, #3
 8001982:	2b01      	cmp	r3, #1
 8001984:	d002      	beq.n	800198c <DrawChar+0x9c>
 8001986:	2b02      	cmp	r3, #2
 8001988:	d004      	beq.n	8001994 <DrawChar+0xa4>
 800198a:	e00c      	b.n	80019a6 <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	617b      	str	r3, [r7, #20]
        break;
 8001992:	e016      	b.n	80019c2 <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	3201      	adds	r2, #1
 800199e:	7812      	ldrb	r2, [r2, #0]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
        break;
 80019a4:	e00d      	b.n	80019c2 <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	041a      	lsls	r2, r3, #16
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	3301      	adds	r3, #1
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	4313      	orrs	r3, r2
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	3202      	adds	r2, #2
 80019ba:	7812      	ldrb	r2, [r2, #0]
 80019bc:	4313      	orrs	r3, r2
 80019be:	617b      	str	r3, [r7, #20]
        break;
 80019c0:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	e036      	b.n	8001a36 <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 80019c8:	8a3a      	ldrh	r2, [r7, #16]
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad2      	subs	r2, r2, r3
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	4413      	add	r3, r2
 80019d2:	3b01      	subs	r3, #1
 80019d4:	2201      	movs	r2, #1
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d012      	beq.n	8001a0a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	4413      	add	r3, r2
 80019ec:	b298      	uxth	r0, r3
 80019ee:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <DrawChar+0x16c>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	491b      	ldr	r1, [pc, #108]	@ (8001a60 <DrawChar+0x170>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	88bb      	ldrh	r3, [r7, #4]
 8001a02:	4619      	mov	r1, r3
 8001a04:	f7ff ff4e 	bl	80018a4 <BSP_LCD_DrawPixel>
 8001a08:	e012      	b.n	8001a30 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	4413      	add	r3, r2
 8001a12:	b298      	uxth	r0, r3
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <DrawChar+0x16c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4911      	ldr	r1, [pc, #68]	@ (8001a60 <DrawChar+0x170>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	440b      	add	r3, r1
 8001a24:	3304      	adds	r3, #4
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	88bb      	ldrh	r3, [r7, #4]
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff ff3a 	bl	80018a4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	3301      	adds	r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	8a3b      	ldrh	r3, [r7, #16]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d3c4      	bcc.n	80019c8 <DrawChar+0xd8>
      }
    }
    Ypos++;
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	3301      	adds	r3, #1
 8001a42:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	8a7b      	ldrh	r3, [r7, #18]
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d384      	bcc.n	800195c <DrawChar+0x6c>
  }
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	2000036c 	.word	0x2000036c
 8001a60:	20000370 	.word	0x20000370

08001a64 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001a72:	4b16      	ldr	r3, [pc, #88]	@ (8001acc <FillBuffer+0x68>)
 8001a74:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a78:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001a7a:	4b14      	ldr	r3, [pc, #80]	@ (8001acc <FillBuffer+0x68>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 8001a80:	4a12      	ldr	r2, [pc, #72]	@ (8001acc <FillBuffer+0x68>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 8001a86:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <FillBuffer+0x68>)
 8001a88:	4a11      	ldr	r2, [pc, #68]	@ (8001ad0 <FillBuffer+0x6c>)
 8001a8a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 8001a8c:	480f      	ldr	r0, [pc, #60]	@ (8001acc <FillBuffer+0x68>)
 8001a8e:	f000 fd51 	bl	8002534 <HAL_DMA2D_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d115      	bne.n	8001ac4 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 8001a98:	68f9      	ldr	r1, [r7, #12]
 8001a9a:	480c      	ldr	r0, [pc, #48]	@ (8001acc <FillBuffer+0x68>)
 8001a9c:	f000 feb2 	bl	8002804 <HAL_DMA2D_ConfigLayer>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10e      	bne.n	8001ac4 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69f9      	ldr	r1, [r7, #28]
 8001ab0:	4806      	ldr	r0, [pc, #24]	@ (8001acc <FillBuffer+0x68>)
 8001ab2:	f000 fd92 	bl	80025da <HAL_DMA2D_Start>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d103      	bne.n	8001ac4 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001abc:	210a      	movs	r1, #10
 8001abe:	4803      	ldr	r0, [pc, #12]	@ (8001acc <FillBuffer+0x68>)
 8001ac0:	f000 fdb6 	bl	8002630 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	200002fc 	.word	0x200002fc
 8001ad0:	4002b000 	.word	0x4002b000

08001ad4 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001ad8:	4b29      	ldr	r3, [pc, #164]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001ada:	4a2a      	ldr	r2, [pc, #168]	@ (8001b84 <BSP_SDRAM_Init+0xb0>)
 8001adc:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8001ade:	4b2a      	ldr	r3, [pc, #168]	@ (8001b88 <BSP_SDRAM_Init+0xb4>)
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8001ae4:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <BSP_SDRAM_Init+0xb4>)
 8001ae6:	2207      	movs	r2, #7
 8001ae8:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8001aea:	4b27      	ldr	r3, [pc, #156]	@ (8001b88 <BSP_SDRAM_Init+0xb4>)
 8001aec:	2204      	movs	r2, #4
 8001aee:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8001af0:	4b25      	ldr	r3, [pc, #148]	@ (8001b88 <BSP_SDRAM_Init+0xb4>)
 8001af2:	2207      	movs	r2, #7
 8001af4:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8001af6:	4b24      	ldr	r3, [pc, #144]	@ (8001b88 <BSP_SDRAM_Init+0xb4>)
 8001af8:	2202      	movs	r2, #2
 8001afa:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8001afc:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <BSP_SDRAM_Init+0xb4>)
 8001afe:	2202      	movs	r2, #2
 8001b00:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8001b02:	4b21      	ldr	r3, [pc, #132]	@ (8001b88 <BSP_SDRAM_Init+0xb4>)
 8001b04:	2202      	movs	r2, #2
 8001b06:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8001b08:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001b14:	4b1a      	ldr	r3, [pc, #104]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001b16:	2204      	movs	r2, #4
 8001b18:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8001b1a:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b20:	4b17      	ldr	r3, [pc, #92]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001b22:	2240      	movs	r2, #64	@ 0x40
 8001b24:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001b26:	4b16      	ldr	r3, [pc, #88]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001b28:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001b2c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001b2e:	4b14      	ldr	r3, [pc, #80]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001b34:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001b36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b3a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001b42:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001b44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001b4e:	f000 f87f 	bl	8001c50 <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001b52:	490d      	ldr	r1, [pc, #52]	@ (8001b88 <BSP_SDRAM_Init+0xb4>)
 8001b54:	480a      	ldr	r0, [pc, #40]	@ (8001b80 <BSP_SDRAM_Init+0xac>)
 8001b56:	f003 fca5 	bl	80054a4 <HAL_SDRAM_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001b60:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <BSP_SDRAM_Init+0xb8>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
 8001b66:	e002      	b.n	8001b6e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001b68:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <BSP_SDRAM_Init+0xb8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001b6e:	f240 506a 	movw	r0, #1386	@ 0x56a
 8001b72:	f000 f80d 	bl	8001b90 <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <BSP_SDRAM_Init+0xb8>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000038c 	.word	0x2000038c
 8001b84:	a0000140 	.word	0xa0000140
 8001b88:	200003c0 	.word	0x200003c0
 8001b8c:	200000a0 	.word	0x200000a0

08001b90 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001ba2:	4b29      	ldr	r3, [pc, #164]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001ba8:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001bae:	4b26      	ldr	r3, [pc, #152]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001bb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bb8:	4923      	ldr	r1, [pc, #140]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bba:	4824      	ldr	r0, [pc, #144]	@ (8001c4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001bbc:	f003 fcb0 	bl	8005520 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	f000 f9c3 	bl	8001f4c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001bc6:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bc8:	2202      	movs	r2, #2
 8001bca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bce:	2208      	movs	r2, #8
 8001bd0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001bde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001be2:	4919      	ldr	r1, [pc, #100]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001be4:	4819      	ldr	r0, [pc, #100]	@ (8001c4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001be6:	f003 fc9b 	bl	8005520 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001bea:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bec:	2203      	movs	r2, #3
 8001bee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001c02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c06:	4910      	ldr	r1, [pc, #64]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c08:	4810      	ldr	r0, [pc, #64]	@ (8001c4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001c0a:	f003 fc89 	bl	8005520 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001c0e:	f44f 730c 	mov.w	r3, #560	@ 0x230
 8001c12:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c16:	2204      	movs	r2, #4
 8001c18:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c1c:	2208      	movs	r2, #8
 8001c1e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4a07      	ldr	r2, [pc, #28]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c2a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001c2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c30:	4905      	ldr	r1, [pc, #20]	@ (8001c48 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001c32:	4806      	ldr	r0, [pc, #24]	@ (8001c4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001c34:	f003 fc74 	bl	8005520 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	4804      	ldr	r0, [pc, #16]	@ (8001c4c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001c3c:	f003 fca5 	bl	800558a <HAL_SDRAM_ProgramRefreshRate>
}
 8001c40:	bf00      	nop
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	200003dc 	.word	0x200003dc
 8001c4c:	2000038c 	.word	0x2000038c

08001c50 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b090      	sub	sp, #64	@ 0x40
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80ec 	beq.w	8001e3a <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c66:	4b77      	ldr	r3, [pc, #476]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6a:	4a76      	ldr	r2, [pc, #472]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6393      	str	r3, [r2, #56]	@ 0x38
 8001c72:	4b74      	ldr	r3, [pc, #464]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c82:	4b70      	ldr	r3, [pc, #448]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a6f      	ldr	r2, [pc, #444]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001c88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
 8001c9e:	4b69      	ldr	r3, [pc, #420]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a68      	ldr	r2, [pc, #416]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b66      	ldr	r3, [pc, #408]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	623b      	str	r3, [r7, #32]
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	4b62      	ldr	r3, [pc, #392]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	4a61      	ldr	r2, [pc, #388]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc6:	4b5f      	ldr	r3, [pc, #380]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	4a5a      	ldr	r2, [pc, #360]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001cdc:	f043 0308 	orr.w	r3, r3, #8
 8001ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce2:	4b58      	ldr	r3, [pc, #352]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	4b54      	ldr	r3, [pc, #336]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4a53      	ldr	r2, [pc, #332]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001cf8:	f043 0310 	orr.w	r3, r3, #16
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4b51      	ldr	r3, [pc, #324]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4b4d      	ldr	r3, [pc, #308]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	4a4c      	ldr	r2, [pc, #304]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001d14:	f043 0320 	orr.w	r3, r3, #32
 8001d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	f003 0320 	and.w	r3, r3, #32
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b46      	ldr	r3, [pc, #280]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a45      	ldr	r2, [pc, #276]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001d30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b43      	ldr	r3, [pc, #268]	@ (8001e44 <BSP_SDRAM_MspInit+0x1f4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001d46:	2302      	movs	r3, #2
 8001d48:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001d4e:	230c      	movs	r3, #12
 8001d50:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001d52:	2360      	movs	r3, #96	@ 0x60
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001d56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	483a      	ldr	r0, [pc, #232]	@ (8001e48 <BSP_SDRAM_MspInit+0x1f8>)
 8001d5e:	f000 fe7f 	bl	8002a60 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 8001d62:	2301      	movs	r3, #1
 8001d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001d66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4837      	ldr	r0, [pc, #220]	@ (8001e4c <BSP_SDRAM_MspInit+0x1fc>)
 8001d6e:	f000 fe77 	bl	8002a60 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001d72:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4834      	ldr	r0, [pc, #208]	@ (8001e50 <BSP_SDRAM_MspInit+0x200>)
 8001d80:	f000 fe6e 	bl	8002a60 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001d84:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4830      	ldr	r0, [pc, #192]	@ (8001e54 <BSP_SDRAM_MspInit+0x204>)
 8001d92:	f000 fe65 	bl	8002a60 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 8001d96:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001d9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001da0:	4619      	mov	r1, r3
 8001da2:	482d      	ldr	r0, [pc, #180]	@ (8001e58 <BSP_SDRAM_MspInit+0x208>)
 8001da4:	f000 fe5c 	bl	8002a60 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001da8:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001dae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001db2:	4619      	mov	r1, r3
 8001db4:	4829      	ldr	r0, [pc, #164]	@ (8001e5c <BSP_SDRAM_MspInit+0x20c>)
 8001db6:	f000 fe53 	bl	8002a60 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001dba:	4b29      	ldr	r3, [pc, #164]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001dc0:	4b27      	ldr	r3, [pc, #156]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001dc2:	2280      	movs	r2, #128	@ 0x80
 8001dc4:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001dc6:	4b26      	ldr	r3, [pc, #152]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dcc:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8001dce:	4b24      	ldr	r3, [pc, #144]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001dd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dd4:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dd6:	4b22      	ldr	r3, [pc, #136]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001dd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ddc:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001dde:	4b20      	ldr	r3, [pc, #128]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001de0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001de4:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001dec:	4b1c      	ldr	r3, [pc, #112]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001dee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001df2:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001df4:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001e00:	4b17      	ldr	r3, [pc, #92]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8001e06:	4b16      	ldr	r3, [pc, #88]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001e0c:	4b14      	ldr	r3, [pc, #80]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001e0e:	4a15      	ldr	r2, [pc, #84]	@ (8001e64 <BSP_SDRAM_MspInit+0x214>)
 8001e10:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a12      	ldr	r2, [pc, #72]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e18:	4a11      	ldr	r2, [pc, #68]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8001e1e:	4810      	ldr	r0, [pc, #64]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001e20:	f000 fa78 	bl	8002314 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8001e24:	480e      	ldr	r0, [pc, #56]	@ (8001e60 <BSP_SDRAM_MspInit+0x210>)
 8001e26:	f000 f9c7 	bl	80021b8 <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	210f      	movs	r1, #15
 8001e2e:	2038      	movs	r0, #56	@ 0x38
 8001e30:	f000 f98b 	bl	800214a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001e34:	2038      	movs	r0, #56	@ 0x38
 8001e36:	f000 f9a4 	bl	8002182 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001e3a:	bf00      	nop
 8001e3c:	3740      	adds	r7, #64	@ 0x40
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40021400 	.word	0x40021400
 8001e5c:	40021800 	.word	0x40021800
 8001e60:	200003ec 	.word	0x200003ec
 8001e64:	40026410 	.word	0x40026410

08001e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea8 <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <HAL_Init+0x40>)
 8001e72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea8 <HAL_Init+0x40>)
 8001e7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <HAL_Init+0x40>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e90:	2003      	movs	r0, #3
 8001e92:	f000 f94f 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e96:	200f      	movs	r0, #15
 8001e98:	f000 f808 	bl	8001eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9c:	f7fe fccc 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023c00 	.word	0x40023c00

08001eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb4:	4b12      	ldr	r3, [pc, #72]	@ (8001f00 <HAL_InitTick+0x54>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <HAL_InitTick+0x58>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f967 	bl	800219e <HAL_SYSTICK_Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e00e      	b.n	8001ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b0f      	cmp	r3, #15
 8001ede:	d80a      	bhi.n	8001ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee8:	f000 f92f 	bl	800214a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eec:	4a06      	ldr	r2, [pc, #24]	@ (8001f08 <HAL_InitTick+0x5c>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e000      	b.n	8001ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000058 	.word	0x20000058
 8001f04:	200000a8 	.word	0x200000a8
 8001f08:	200000a4 	.word	0x200000a4

08001f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_IncTick+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_IncTick+0x24>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <HAL_IncTick+0x24>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	200000a8 	.word	0x200000a8
 8001f30:	2000044c 	.word	0x2000044c

08001f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b03      	ldr	r3, [pc, #12]	@ (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	2000044c 	.word	0x2000044c

08001f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff ffee 	bl	8001f34 <HAL_GetTick>
 8001f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d005      	beq.n	8001f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <HAL_Delay+0x44>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f72:	bf00      	nop
 8001f74:	f7ff ffde 	bl	8001f34 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d8f7      	bhi.n	8001f74 <HAL_Delay+0x28>
  {
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200000a8 	.word	0x200000a8

08001f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0b      	blt.n	8002022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4907      	ldr	r1, [pc, #28]	@ (8002030 <__NVIC_EnableIRQ+0x38>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	@ (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	@ (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	@ 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002100:	d301      	bcc.n	8002106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002102:	2301      	movs	r3, #1
 8002104:	e00f      	b.n	8002126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <SysTick_Config+0x40>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210e:	210f      	movs	r1, #15
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f7ff ff8e 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <SysTick_Config+0x40>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <SysTick_Config+0x40>)
 8002120:	2207      	movs	r2, #7
 8002122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000e010 	.word	0xe000e010

08002134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff29 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff3e 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff8e 	bl	8002088 <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5d 	bl	8002034 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff31 	bl	8001ff8 <__NVIC_EnableIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ffa2 	bl	80020f0 <SysTick_Config>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021c4:	f7ff feb6 	bl	8001f34 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e099      	b.n	8002308 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0201 	bic.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f4:	e00f      	b.n	8002216 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f6:	f7ff fe9d 	bl	8001f34 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b05      	cmp	r3, #5
 8002202:	d908      	bls.n	8002216 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2220      	movs	r2, #32
 8002208:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2203      	movs	r2, #3
 800220e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e078      	b.n	8002308 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1e8      	bne.n	80021f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	4b38      	ldr	r3, [pc, #224]	@ (8002310 <HAL_DMA_Init+0x158>)
 8002230:	4013      	ands	r3, r2
 8002232:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002242:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226c:	2b04      	cmp	r3, #4
 800226e:	d107      	bne.n	8002280 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	4313      	orrs	r3, r2
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f023 0307 	bic.w	r3, r3, #7
 8002296:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	4313      	orrs	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d117      	bne.n	80022da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00e      	beq.n	80022da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f8bd 	bl	800243c <DMA_CheckFifoParam>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2240      	movs	r2, #64	@ 0x40
 80022cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80022d6:	2301      	movs	r3, #1
 80022d8:	e016      	b.n	8002308 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f874 	bl	80023d0 <DMA_CalcBaseAndBitshift>
 80022e8:	4603      	mov	r3, r0
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f0:	223f      	movs	r2, #63	@ 0x3f
 80022f2:	409a      	lsls	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	f010803f 	.word	0xf010803f

08002314 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e050      	b.n	80023c8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d101      	bne.n	8002336 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
 8002334:	e048      	b.n	80023c8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0201 	bic.w	r2, r2, #1
 8002344:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2200      	movs	r2, #0
 8002354:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2221      	movs	r2, #33	@ 0x21
 8002374:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f82a 	bl	80023d0 <DMA_CalcBaseAndBitshift>
 800237c:	4603      	mov	r3, r0
 800237e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	223f      	movs	r2, #63	@ 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	3b10      	subs	r3, #16
 80023e0:	4a14      	ldr	r2, [pc, #80]	@ (8002434 <DMA_CalcBaseAndBitshift+0x64>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	091b      	lsrs	r3, r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ea:	4a13      	ldr	r2, [pc, #76]	@ (8002438 <DMA_CalcBaseAndBitshift+0x68>)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d909      	bls.n	8002412 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002406:	f023 0303 	bic.w	r3, r3, #3
 800240a:	1d1a      	adds	r2, r3, #4
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002410:	e007      	b.n	8002422 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	aaaaaaab 	.word	0xaaaaaaab
 8002438:	0800c0b4 	.word	0x0800c0b4

0800243c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d11f      	bne.n	8002496 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b03      	cmp	r3, #3
 800245a:	d856      	bhi.n	800250a <DMA_CheckFifoParam+0xce>
 800245c:	a201      	add	r2, pc, #4	@ (adr r2, 8002464 <DMA_CheckFifoParam+0x28>)
 800245e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002462:	bf00      	nop
 8002464:	08002475 	.word	0x08002475
 8002468:	08002487 	.word	0x08002487
 800246c:	08002475 	.word	0x08002475
 8002470:	0800250b 	.word	0x0800250b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002478:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d046      	beq.n	800250e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002484:	e043      	b.n	800250e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800248a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800248e:	d140      	bne.n	8002512 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002494:	e03d      	b.n	8002512 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800249e:	d121      	bne.n	80024e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d837      	bhi.n	8002516 <DMA_CheckFifoParam+0xda>
 80024a6:	a201      	add	r2, pc, #4	@ (adr r2, 80024ac <DMA_CheckFifoParam+0x70>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	080024c3 	.word	0x080024c3
 80024b4:	080024bd 	.word	0x080024bd
 80024b8:	080024d5 	.word	0x080024d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	73fb      	strb	r3, [r7, #15]
      break;
 80024c0:	e030      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d025      	beq.n	800251a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d2:	e022      	b.n	800251a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80024dc:	d11f      	bne.n	800251e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024e2:	e01c      	b.n	800251e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d903      	bls.n	80024f2 <DMA_CheckFifoParam+0xb6>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d003      	beq.n	80024f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024f0:	e018      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	73fb      	strb	r3, [r7, #15]
      break;
 80024f6:	e015      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00e      	beq.n	8002522 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      break;
 8002508:	e00b      	b.n	8002522 <DMA_CheckFifoParam+0xe6>
      break;
 800250a:	bf00      	nop
 800250c:	e00a      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 800250e:	bf00      	nop
 8002510:	e008      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 8002512:	bf00      	nop
 8002514:	e006      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 8002516:	bf00      	nop
 8002518:	e004      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 800251a:	bf00      	nop
 800251c:	e002      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;   
 800251e:	bf00      	nop
 8002520:	e000      	b.n	8002524 <DMA_CheckFifoParam+0xe8>
      break;
 8002522:	bf00      	nop
    }
  } 
  
  return status; 
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop

08002534 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e03b      	b.n	80025be <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d106      	bne.n	8002560 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f833 	bl	80025c6 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002584:	f023 0107 	bic.w	r1, r3, #7
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800259e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68d1      	ldr	r1, [r2, #12]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	430b      	orrs	r3, r1
 80025ac:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af02      	add	r7, sp, #8
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_DMA2D_Start+0x1c>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e018      	b.n	8002628 <HAL_DMA2D_Start+0x4e>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2202      	movs	r2, #2
 8002602:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f989 	bl	8002928 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0201 	orr.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d056      	beq.n	80026fa <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800264c:	f7ff fc72 	bl	8001f34 <HAL_GetTick>
 8002650:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002652:	e04b      	b.n	80026ec <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002662:	2b00      	cmp	r3, #0
 8002664:	d023      	beq.n	80026ae <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002674:	f043 0202 	orr.w	r2, r3, #2
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2221      	movs	r2, #33	@ 0x21
 8002698:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2204      	movs	r2, #4
 800269e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e0a5      	b.n	80027fa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b4:	d01a      	beq.n	80026ec <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026b6:	f7ff fc3d 	bl	8001f34 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d302      	bcc.n	80026cc <HAL_DMA2D_PollForTransfer+0x9c>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10f      	bne.n	80026ec <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d0:	f043 0220 	orr.w	r2, r3, #32
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2203      	movs	r2, #3
 80026dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e086      	b.n	80027fa <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ac      	beq.n	8002654 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270c:	f003 0320 	and.w	r3, r3, #32
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d061      	beq.n	80027e0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800271c:	f7ff fc0a 	bl	8001f34 <HAL_GetTick>
 8002720:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002722:	e056      	b.n	80027d2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8002732:	2b00      	cmp	r3, #0
 8002734:	d02e      	beq.n	8002794 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b00      	cmp	r3, #0
 800273e:	d005      	beq.n	800274c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002744:	f043 0204 	orr.w	r2, r3, #4
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800275a:	f043 0202 	orr.w	r2, r3, #2
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2229      	movs	r2, #41	@ 0x29
 800277e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2204      	movs	r2, #4
 8002784:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e032      	b.n	80027fa <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d01a      	beq.n	80027d2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800279c:	f7ff fbca 	bl	8001f34 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d302      	bcc.n	80027b2 <HAL_DMA2D_PollForTransfer+0x182>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b6:	f043 0220 	orr.w	r2, r3, #32
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e013      	b.n	80027fa <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0310 	and.w	r3, r3, #16
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0a1      	beq.n	8002724 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2212      	movs	r2, #18
 80027e6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_DMA2D_ConfigLayer+0x20>
 8002820:	2302      	movs	r3, #2
 8002822:	e079      	b.n	8002918 <HAL_DMA2D_ConfigLayer+0x114>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	3318      	adds	r3, #24
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	041b      	lsls	r3, r3, #16
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800284e:	4b35      	ldr	r3, [pc, #212]	@ (8002924 <HAL_DMA2D_ConfigLayer+0x120>)
 8002850:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b0a      	cmp	r3, #10
 8002858:	d003      	beq.n	8002862 <HAL_DMA2D_ConfigLayer+0x5e>
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b09      	cmp	r3, #9
 8002860:	d107      	bne.n	8002872 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e005      	b.n	800287e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	061b      	lsls	r3, r3, #24
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d120      	bne.n	80028c6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	43db      	mvns	r3, r3
 800288e:	ea02 0103 	and.w	r1, r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	430a      	orrs	r2, r1
 800289a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b0a      	cmp	r3, #10
 80028ac:	d003      	beq.n	80028b6 <HAL_DMA2D_ConfigLayer+0xb2>
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b09      	cmp	r3, #9
 80028b4:	d127      	bne.n	8002906 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80028c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80028c4:	e01f      	b.n	8002906 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69da      	ldr	r2, [r3, #28]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	43db      	mvns	r3, r3
 80028d0:	ea02 0103 	and.w	r1, r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	430a      	orrs	r2, r1
 80028dc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b0a      	cmp	r3, #10
 80028ee:	d003      	beq.n	80028f8 <HAL_DMA2D_ConfigLayer+0xf4>
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b09      	cmp	r3, #9
 80028f6:	d106      	bne.n	8002906 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	68da      	ldr	r2, [r3, #12]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002904:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	ff03000f 	.word	0xff03000f

08002928 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002928:	b480      	push	{r7}
 800292a:	b08b      	sub	sp, #44	@ 0x2c
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	041a      	lsls	r2, r3, #16
 8002944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002946:	431a      	orrs	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002960:	d174      	bne.n	8002a4c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8002968:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002970:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002978:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d108      	bne.n	800299a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	431a      	orrs	r2, r3
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	4313      	orrs	r3, r2
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	627b      	str	r3, [r7, #36]	@ 0x24
 8002998:	e053      	b.n	8002a42 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d106      	bne.n	80029b0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ae:	e048      	b.n	8002a42 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d111      	bne.n	80029dc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	0cdb      	lsrs	r3, r3, #19
 80029bc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	0a9b      	lsrs	r3, r3, #10
 80029c2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	08db      	lsrs	r3, r3, #3
 80029c8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	02db      	lsls	r3, r3, #11
 80029d2:	4313      	orrs	r3, r2
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029da:	e032      	b.n	8002a42 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d117      	bne.n	8002a14 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	0fdb      	lsrs	r3, r3, #31
 80029e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	0cdb      	lsrs	r3, r3, #19
 80029ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	0adb      	lsrs	r3, r3, #11
 80029f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	029b      	lsls	r3, r3, #10
 8002a04:	431a      	orrs	r2, r3
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	03db      	lsls	r3, r3, #15
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a12:	e016      	b.n	8002a42 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	0f1b      	lsrs	r3, r3, #28
 8002a18:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	0d1b      	lsrs	r3, r3, #20
 8002a1e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	0b1b      	lsrs	r3, r3, #12
 8002a24:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	011a      	lsls	r2, r3, #4
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	431a      	orrs	r2, r3
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	031b      	lsls	r3, r3, #12
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a48:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002a4a:	e003      	b.n	8002a54 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	60da      	str	r2, [r3, #12]
}
 8002a54:	bf00      	nop
 8002a56:	372c      	adds	r7, #44	@ 0x2c
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	@ 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	e177      	b.n	8002d6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	f040 8166 	bne.w	8002d66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d005      	beq.n	8002ab2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d130      	bne.n	8002b14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 0201 	and.w	r2, r3, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d017      	beq.n	8002b50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d123      	bne.n	8002ba4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	08da      	lsrs	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3208      	adds	r2, #8
 8002b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	220f      	movs	r2, #15
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	08da      	lsrs	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3208      	adds	r2, #8
 8002b9e:	69b9      	ldr	r1, [r7, #24]
 8002ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0203 	and.w	r2, r3, #3
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80c0 	beq.w	8002d66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	4b66      	ldr	r3, [pc, #408]	@ (8002d84 <HAL_GPIO_Init+0x324>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	4a65      	ldr	r2, [pc, #404]	@ (8002d84 <HAL_GPIO_Init+0x324>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf6:	4b63      	ldr	r3, [pc, #396]	@ (8002d84 <HAL_GPIO_Init+0x324>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c02:	4a61      	ldr	r2, [pc, #388]	@ (8002d88 <HAL_GPIO_Init+0x328>)
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	3302      	adds	r3, #2
 8002c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	220f      	movs	r2, #15
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a58      	ldr	r2, [pc, #352]	@ (8002d8c <HAL_GPIO_Init+0x32c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d037      	beq.n	8002c9e <HAL_GPIO_Init+0x23e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a57      	ldr	r2, [pc, #348]	@ (8002d90 <HAL_GPIO_Init+0x330>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d031      	beq.n	8002c9a <HAL_GPIO_Init+0x23a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a56      	ldr	r2, [pc, #344]	@ (8002d94 <HAL_GPIO_Init+0x334>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d02b      	beq.n	8002c96 <HAL_GPIO_Init+0x236>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a55      	ldr	r2, [pc, #340]	@ (8002d98 <HAL_GPIO_Init+0x338>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d025      	beq.n	8002c92 <HAL_GPIO_Init+0x232>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a54      	ldr	r2, [pc, #336]	@ (8002d9c <HAL_GPIO_Init+0x33c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01f      	beq.n	8002c8e <HAL_GPIO_Init+0x22e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a53      	ldr	r2, [pc, #332]	@ (8002da0 <HAL_GPIO_Init+0x340>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d019      	beq.n	8002c8a <HAL_GPIO_Init+0x22a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a52      	ldr	r2, [pc, #328]	@ (8002da4 <HAL_GPIO_Init+0x344>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d013      	beq.n	8002c86 <HAL_GPIO_Init+0x226>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a51      	ldr	r2, [pc, #324]	@ (8002da8 <HAL_GPIO_Init+0x348>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d00d      	beq.n	8002c82 <HAL_GPIO_Init+0x222>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a50      	ldr	r2, [pc, #320]	@ (8002dac <HAL_GPIO_Init+0x34c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d007      	beq.n	8002c7e <HAL_GPIO_Init+0x21e>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4f      	ldr	r2, [pc, #316]	@ (8002db0 <HAL_GPIO_Init+0x350>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d101      	bne.n	8002c7a <HAL_GPIO_Init+0x21a>
 8002c76:	2309      	movs	r3, #9
 8002c78:	e012      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c7a:	230a      	movs	r3, #10
 8002c7c:	e010      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c7e:	2308      	movs	r3, #8
 8002c80:	e00e      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c82:	2307      	movs	r3, #7
 8002c84:	e00c      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c86:	2306      	movs	r3, #6
 8002c88:	e00a      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c8a:	2305      	movs	r3, #5
 8002c8c:	e008      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c8e:	2304      	movs	r3, #4
 8002c90:	e006      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c92:	2303      	movs	r3, #3
 8002c94:	e004      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e002      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_GPIO_Init+0x240>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	f002 0203 	and.w	r2, r2, #3
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	4093      	lsls	r3, r2
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cb0:	4935      	ldr	r1, [pc, #212]	@ (8002d88 <HAL_GPIO_Init+0x328>)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8002db4 <HAL_GPIO_Init+0x354>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ce2:	4a34      	ldr	r2, [pc, #208]	@ (8002db4 <HAL_GPIO_Init+0x354>)
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ce8:	4b32      	ldr	r3, [pc, #200]	@ (8002db4 <HAL_GPIO_Init+0x354>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d0c:	4a29      	ldr	r2, [pc, #164]	@ (8002db4 <HAL_GPIO_Init+0x354>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d12:	4b28      	ldr	r3, [pc, #160]	@ (8002db4 <HAL_GPIO_Init+0x354>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d36:	4a1f      	ldr	r2, [pc, #124]	@ (8002db4 <HAL_GPIO_Init+0x354>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002db4 <HAL_GPIO_Init+0x354>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d60:	4a14      	ldr	r2, [pc, #80]	@ (8002db4 <HAL_GPIO_Init+0x354>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	2b0f      	cmp	r3, #15
 8002d70:	f67f ae84 	bls.w	8002a7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3724      	adds	r7, #36	@ 0x24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40013800 	.word	0x40013800
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	40020400 	.word	0x40020400
 8002d94:	40020800 	.word	0x40020800
 8002d98:	40020c00 	.word	0x40020c00
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40021400 	.word	0x40021400
 8002da4:	40021800 	.word	0x40021800
 8002da8:	40021c00 	.word	0x40021c00
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40022400 	.word	0x40022400
 8002db4:	40013c00 	.word	0x40013c00

08002db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	807b      	strh	r3, [r7, #2]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc8:	787b      	ldrb	r3, [r7, #1]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dd4:	e003      	b.n	8002dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	041a      	lsls	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	619a      	str	r2, [r3, #24]
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0bf      	b.n	8002f7e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8ba 	bl	8002f8c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002e2e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6999      	ldr	r1, [r3, #24]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e44:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	430a      	orrs	r2, r1
 8002e52:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6899      	ldr	r1, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f88 <HAL_LTDC_Init+0x19c>)
 8002e60:	400b      	ands	r3, r1
 8002e62:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	041b      	lsls	r3, r3, #16
 8002e6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6899      	ldr	r1, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68d9      	ldr	r1, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f88 <HAL_LTDC_Init+0x19c>)
 8002e8e:	400b      	ands	r3, r1
 8002e90:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	69db      	ldr	r3, [r3, #28]
 8002e96:	041b      	lsls	r3, r3, #16
 8002e98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68d9      	ldr	r1, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6919      	ldr	r1, [r3, #16]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4b33      	ldr	r3, [pc, #204]	@ (8002f88 <HAL_LTDC_Init+0x19c>)
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	041b      	lsls	r3, r3, #16
 8002ec6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6919      	ldr	r1, [r3, #16]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6959      	ldr	r1, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b27      	ldr	r3, [pc, #156]	@ (8002f88 <HAL_LTDC_Init+0x19c>)
 8002eea:	400b      	ands	r3, r1
 8002eec:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef2:	041b      	lsls	r3, r3, #16
 8002ef4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6959      	ldr	r1, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002f1c:	041b      	lsls	r3, r3, #16
 8002f1e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0206 	orr.w	r2, r2, #6
 8002f5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699a      	ldr	r2, [r3, #24]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0201 	orr.w	r2, r2, #1
 8002f6a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	f000f800 	.word	0xf000f800

08002f8c <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002fa0:	b5b0      	push	{r4, r5, r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_LTDC_ConfigLayer+0x1a>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e02c      	b.n	8003014 <HAL_LTDC_ConfigLayer+0x74>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2134      	movs	r1, #52	@ 0x34
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	4614      	mov	r4, r2
 8002fde:	461d      	mov	r5, r3
 8002fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fec:	682b      	ldr	r3, [r5, #0]
 8002fee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f83b 	bl	8003070 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2201      	movs	r2, #1
 8003000:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bdb0      	pop	{r4, r5, r7, pc}

0800301c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_LTDC_EnableDither+0x16>
 800302e:	2302      	movs	r3, #2
 8003030:	e016      	b.n	8003060 <HAL_LTDC_EnableDither+0x44>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003042:	4b0a      	ldr	r3, [pc, #40]	@ (800306c <HAL_LTDC_EnableDither+0x50>)
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	4a09      	ldr	r2, [pc, #36]	@ (800306c <HAL_LTDC_EnableDither+0x50>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800304c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	40016800 	.word	0x40016800

08003070 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	@ 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	0c1b      	lsrs	r3, r3, #16
 8003088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308c:	4413      	add	r3, r2
 800308e:	041b      	lsls	r3, r3, #16
 8003090:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	01db      	lsls	r3, r3, #7
 800309c:	4413      	add	r3, r2
 800309e:	3384      	adds	r3, #132	@ 0x84
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	4611      	mov	r1, r2
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	01d2      	lsls	r2, r2, #7
 80030ac:	440a      	add	r2, r1
 80030ae:	3284      	adds	r2, #132	@ 0x84
 80030b0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80030b4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80030c6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80030c8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4619      	mov	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	01db      	lsls	r3, r3, #7
 80030d4:	440b      	add	r3, r1
 80030d6:	3384      	adds	r3, #132	@ 0x84
 80030d8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80030de:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ee:	4413      	add	r3, r2
 80030f0:	041b      	lsls	r3, r3, #16
 80030f2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	01db      	lsls	r3, r3, #7
 80030fe:	4413      	add	r3, r2
 8003100:	3384      	adds	r3, #132	@ 0x84
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	6812      	ldr	r2, [r2, #0]
 8003108:	4611      	mov	r1, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	01d2      	lsls	r2, r2, #7
 800310e:	440a      	add	r2, r1
 8003110:	3284      	adds	r2, #132	@ 0x84
 8003112:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003116:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003126:	4413      	add	r3, r2
 8003128:	1c5a      	adds	r2, r3, #1
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4619      	mov	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	01db      	lsls	r3, r3, #7
 8003134:	440b      	add	r3, r1
 8003136:	3384      	adds	r3, #132	@ 0x84
 8003138:	4619      	mov	r1, r3
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	4313      	orrs	r3, r2
 800313e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	01db      	lsls	r3, r3, #7
 800314a:	4413      	add	r3, r2
 800314c:	3384      	adds	r3, #132	@ 0x84
 800314e:	691b      	ldr	r3, [r3, #16]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	4611      	mov	r1, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	01d2      	lsls	r2, r2, #7
 800315a:	440a      	add	r2, r1
 800315c:	3284      	adds	r2, #132	@ 0x84
 800315e:	f023 0307 	bic.w	r3, r3, #7
 8003162:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	01db      	lsls	r3, r3, #7
 800316e:	4413      	add	r3, r2
 8003170:	3384      	adds	r3, #132	@ 0x84
 8003172:	461a      	mov	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	061b      	lsls	r3, r3, #24
 8003194:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	01db      	lsls	r3, r3, #7
 80031a0:	4413      	add	r3, r2
 80031a2:	3384      	adds	r3, #132	@ 0x84
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	01db      	lsls	r3, r3, #7
 80031b0:	4413      	add	r3, r2
 80031b2:	3384      	adds	r3, #132	@ 0x84
 80031b4:	461a      	mov	r2, r3
 80031b6:	2300      	movs	r3, #0
 80031b8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80031c0:	461a      	mov	r2, r3
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	431a      	orrs	r2, r3
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4619      	mov	r1, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	01db      	lsls	r3, r3, #7
 80031d4:	440b      	add	r3, r1
 80031d6:	3384      	adds	r3, #132	@ 0x84
 80031d8:	4619      	mov	r1, r3
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	01db      	lsls	r3, r3, #7
 80031ea:	4413      	add	r3, r2
 80031ec:	3384      	adds	r3, #132	@ 0x84
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	6812      	ldr	r2, [r2, #0]
 80031f4:	4611      	mov	r1, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	01d2      	lsls	r2, r2, #7
 80031fa:	440a      	add	r2, r1
 80031fc:	3284      	adds	r2, #132	@ 0x84
 80031fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003202:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	01db      	lsls	r3, r3, #7
 800320e:	4413      	add	r3, r2
 8003210:	3384      	adds	r3, #132	@ 0x84
 8003212:	461a      	mov	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	01db      	lsls	r3, r3, #7
 8003224:	4413      	add	r3, r2
 8003226:	3384      	adds	r3, #132	@ 0x84
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	4611      	mov	r1, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	01d2      	lsls	r2, r2, #7
 8003234:	440a      	add	r2, r1
 8003236:	3284      	adds	r2, #132	@ 0x84
 8003238:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800323c:	f023 0307 	bic.w	r3, r3, #7
 8003240:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	69da      	ldr	r2, [r3, #28]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	68f9      	ldr	r1, [r7, #12]
 800324c:	6809      	ldr	r1, [r1, #0]
 800324e:	4608      	mov	r0, r1
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	01c9      	lsls	r1, r1, #7
 8003254:	4401      	add	r1, r0
 8003256:	3184      	adds	r1, #132	@ 0x84
 8003258:	4313      	orrs	r3, r2
 800325a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	01db      	lsls	r3, r3, #7
 8003266:	4413      	add	r3, r2
 8003268:	3384      	adds	r3, #132	@ 0x84
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	01db      	lsls	r3, r3, #7
 8003276:	4413      	add	r3, r2
 8003278:	3384      	adds	r3, #132	@ 0x84
 800327a:	461a      	mov	r2, r3
 800327c:	2300      	movs	r3, #0
 800327e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	01db      	lsls	r3, r3, #7
 800328a:	4413      	add	r3, r2
 800328c:	3384      	adds	r3, #132	@ 0x84
 800328e:	461a      	mov	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800329e:	2304      	movs	r3, #4
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	e01b      	b.n	80032dc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d102      	bne.n	80032b2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80032ac:	2303      	movs	r3, #3
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	e014      	b.n	80032dc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d00b      	beq.n	80032d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d007      	beq.n	80032d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d003      	beq.n	80032d2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80032ce:	2b07      	cmp	r3, #7
 80032d0:	d102      	bne.n	80032d8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80032d2:	2302      	movs	r3, #2
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	e001      	b.n	80032dc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80032d8:	2301      	movs	r3, #1
 80032da:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	01db      	lsls	r3, r3, #7
 80032e6:	4413      	add	r3, r2
 80032e8:	3384      	adds	r3, #132	@ 0x84
 80032ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	4611      	mov	r1, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	01d2      	lsls	r2, r2, #7
 80032f6:	440a      	add	r2, r1
 80032f8:	3284      	adds	r2, #132	@ 0x84
 80032fa:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80032fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	1acb      	subs	r3, r1, r3
 8003316:	69f9      	ldr	r1, [r7, #28]
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800331e:	68f9      	ldr	r1, [r7, #12]
 8003320:	6809      	ldr	r1, [r1, #0]
 8003322:	4608      	mov	r0, r1
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	01c9      	lsls	r1, r1, #7
 8003328:	4401      	add	r1, r0
 800332a:	3184      	adds	r1, #132	@ 0x84
 800332c:	4313      	orrs	r3, r2
 800332e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	01db      	lsls	r3, r3, #7
 800333a:	4413      	add	r3, r2
 800333c:	3384      	adds	r3, #132	@ 0x84
 800333e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	6812      	ldr	r2, [r2, #0]
 8003344:	4611      	mov	r1, r2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	01d2      	lsls	r2, r2, #7
 800334a:	440a      	add	r2, r1
 800334c:	3284      	adds	r2, #132	@ 0x84
 800334e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003352:	f023 0307 	bic.w	r3, r3, #7
 8003356:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	01db      	lsls	r3, r3, #7
 8003362:	4413      	add	r3, r2
 8003364:	3384      	adds	r3, #132	@ 0x84
 8003366:	461a      	mov	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800336c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	01db      	lsls	r3, r3, #7
 8003378:	4413      	add	r3, r2
 800337a:	3384      	adds	r3, #132	@ 0x84
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	6812      	ldr	r2, [r2, #0]
 8003382:	4611      	mov	r1, r2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	01d2      	lsls	r2, r2, #7
 8003388:	440a      	add	r2, r1
 800338a:	3284      	adds	r2, #132	@ 0x84
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6013      	str	r3, [r2, #0]
}
 8003392:	bf00      	nop
 8003394:	3724      	adds	r7, #36	@ 0x24
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af02      	add	r7, sp, #8
 80033a4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e101      	b.n	80035b4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f006 fd6a 	bl	8009ea4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2203      	movs	r2, #3
 80033d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033de:	d102      	bne.n	80033e6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f003 f941 	bl	8006672 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	7c1a      	ldrb	r2, [r3, #16]
 80033f8:	f88d 2000 	strb.w	r2, [sp]
 80033fc:	3304      	adds	r3, #4
 80033fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003400:	f003 f820 	bl	8006444 <USB_CoreInit>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2202      	movs	r2, #2
 800340e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0ce      	b.n	80035b4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f003 f939 	bl	8006694 <USB_SetCurrentMode>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d005      	beq.n	8003434 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0bf      	b.n	80035b4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e04a      	b.n	80034d0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3315      	adds	r3, #21
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3314      	adds	r3, #20
 800345e:	7bfa      	ldrb	r2, [r7, #15]
 8003460:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	7bfb      	ldrb	r3, [r7, #15]
 8003466:	b298      	uxth	r0, r3
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	332e      	adds	r3, #46	@ 0x2e
 8003476:	4602      	mov	r2, r0
 8003478:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800347a:	7bfa      	ldrb	r2, [r7, #15]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	3318      	adds	r3, #24
 800348a:	2200      	movs	r2, #0
 800348c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800348e:	7bfa      	ldrb	r2, [r7, #15]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	331c      	adds	r3, #28
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034a2:	7bfa      	ldrb	r2, [r7, #15]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3320      	adds	r3, #32
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	3324      	adds	r3, #36	@ 0x24
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	3301      	adds	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	791b      	ldrb	r3, [r3, #4]
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d3af      	bcc.n	800343a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
 80034de:	e044      	b.n	800356a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034e0:	7bfa      	ldrb	r2, [r7, #15]
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034f6:	7bfa      	ldrb	r2, [r7, #15]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003522:	7bfa      	ldrb	r2, [r7, #15]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800354e:	7bfa      	ldrb	r2, [r7, #15]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003564:	7bfb      	ldrb	r3, [r7, #15]
 8003566:	3301      	adds	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	791b      	ldrb	r3, [r3, #4]
 800356e:	7bfa      	ldrb	r2, [r7, #15]
 8003570:	429a      	cmp	r2, r3
 8003572:	d3b5      	bcc.n	80034e0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7c1a      	ldrb	r2, [r3, #16]
 800357c:	f88d 2000 	strb.w	r2, [sp]
 8003580:	3304      	adds	r3, #4
 8003582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003584:	f003 f8d2 	bl	800672c <USB_DevInit>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e00c      	b.n	80035b4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f004 f91c 	bl	80077ea <USB_DevDisconnect>

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d101      	bne.n	80035d8 <HAL_PCD_Start+0x1c>
 80035d4:	2302      	movs	r3, #2
 80035d6:	e022      	b.n	800361e <HAL_PCD_Start+0x62>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d009      	beq.n	8003600 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d105      	bne.n	8003600 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f003 f823 	bl	8006650 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f004 f8ca 	bl	80077a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003626:	b590      	push	{r4, r7, lr}
 8003628:	b08d      	sub	sp, #52	@ 0x34
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f004 f988 	bl	8007952 <USB_GetMode>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	f040 848c 	bne.w	8003f62 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f004 f8ec 	bl	800782c <USB_ReadInterrupts>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 8482 	beq.w	8003f60 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f004 f8d9 	bl	800782c <USB_ReadInterrupts>
 800367a:	4603      	mov	r3, r0
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b02      	cmp	r3, #2
 8003682:	d107      	bne.n	8003694 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f002 0202 	and.w	r2, r2, #2
 8003692:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f004 f8c7 	bl	800782c <USB_ReadInterrupts>
 800369e:	4603      	mov	r3, r0
 80036a0:	f003 0310 	and.w	r3, r3, #16
 80036a4:	2b10      	cmp	r3, #16
 80036a6:	d161      	bne.n	800376c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 0210 	bic.w	r2, r2, #16
 80036b6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f003 020f 	and.w	r2, r3, #15
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	4413      	add	r3, r2
 80036d4:	3304      	adds	r3, #4
 80036d6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	0c5b      	lsrs	r3, r3, #17
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d124      	bne.n	800372e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d035      	beq.n	800375c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036fe:	b29b      	uxth	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	6a38      	ldr	r0, [r7, #32]
 8003704:	f003 fefe 	bl	8007504 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003714:	441a      	add	r2, r3
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003726:	441a      	add	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	615a      	str	r2, [r3, #20]
 800372c:	e016      	b.n	800375c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	0c5b      	lsrs	r3, r3, #17
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	2b06      	cmp	r3, #6
 8003738:	d110      	bne.n	800375c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003740:	2208      	movs	r2, #8
 8003742:	4619      	mov	r1, r3
 8003744:	6a38      	ldr	r0, [r7, #32]
 8003746:	f003 fedd 	bl	8007504 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	091b      	lsrs	r3, r3, #4
 8003752:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003756:	441a      	add	r2, r3
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0210 	orr.w	r2, r2, #16
 800376a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f004 f85b 	bl	800782c <USB_ReadInterrupts>
 8003776:	4603      	mov	r3, r0
 8003778:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800377c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003780:	f040 80a7 	bne.w	80038d2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f004 f860 	bl	8007852 <USB_ReadDevAllOutEpInterrupt>
 8003792:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003794:	e099      	b.n	80038ca <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 808e 	beq.w	80038be <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f004 f884 	bl	80078ba <USB_ReadDevOutEPInterrupt>
 80037b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00c      	beq.n	80037d8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ca:	461a      	mov	r2, r3
 80037cc:	2301      	movs	r3, #1
 80037ce:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fea4 	bl	8004520 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00c      	beq.n	80037fc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037ee:	461a      	mov	r2, r3
 80037f0:	2308      	movs	r3, #8
 80037f2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80037f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 ff7a 	bl	80046f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d008      	beq.n	8003818 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003812:	461a      	mov	r2, r3
 8003814:	2310      	movs	r3, #16
 8003816:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d030      	beq.n	8003884 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382a:	2b80      	cmp	r3, #128	@ 0x80
 800382c:	d109      	bne.n	8003842 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800383c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003840:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003844:	4613      	mov	r3, r2
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4413      	add	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4413      	add	r3, r2
 8003854:	3304      	adds	r3, #4
 8003856:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	78db      	ldrb	r3, [r3, #3]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d108      	bne.n	8003872 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	2200      	movs	r2, #0
 8003864:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	b2db      	uxtb	r3, r3
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f006 fc1b 	bl	800a0a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800387e:	461a      	mov	r2, r3
 8003880:	2302      	movs	r3, #2
 8003882:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d008      	beq.n	80038a0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	4413      	add	r3, r2
 8003896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800389a:	461a      	mov	r2, r3
 800389c:	2320      	movs	r3, #32
 800389e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b6:	461a      	mov	r2, r3
 80038b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038bc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	3301      	adds	r3, #1
 80038c2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80038c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c6:	085b      	lsrs	r3, r3, #1
 80038c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80038ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f47f af62 	bne.w	8003796 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f003 ffa8 	bl	800782c <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038e6:	f040 80db 	bne.w	8003aa0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f003 ffc9 	bl	8007886 <USB_ReadDevAllInEpInterrupt>
 80038f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80038fa:	e0cd      	b.n	8003a98 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 80c2 	beq.w	8003a8c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	4611      	mov	r1, r2
 8003912:	4618      	mov	r0, r3
 8003914:	f003 ffef 	bl	80078f6 <USB_ReadDevInEPInterrupt>
 8003918:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0301 	and.w	r3, r3, #1
 8003920:	2b00      	cmp	r3, #0
 8003922:	d057      	beq.n	80039d4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	2201      	movs	r2, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	43db      	mvns	r3, r3
 800393e:	69f9      	ldr	r1, [r7, #28]
 8003940:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003944:	4013      	ands	r3, r2
 8003946:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	4413      	add	r3, r2
 8003950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003954:	461a      	mov	r2, r3
 8003956:	2301      	movs	r3, #1
 8003958:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	799b      	ldrb	r3, [r3, #6]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d132      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	3320      	adds	r3, #32
 8003972:	6819      	ldr	r1, [r3, #0]
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4403      	add	r3, r0
 8003982:	331c      	adds	r3, #28
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4419      	add	r1, r3
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4403      	add	r3, r0
 8003996:	3320      	adds	r3, #32
 8003998:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	2b00      	cmp	r3, #0
 800399e:	d113      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x3a2>
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	3324      	adds	r3, #36	@ 0x24
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d108      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039c0:	461a      	mov	r2, r3
 80039c2:	2101      	movs	r1, #1
 80039c4:	f003 fff6 	bl	80079b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	4619      	mov	r1, r3
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f006 fae5 	bl	8009f9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ea:	461a      	mov	r2, r3
 80039ec:	2308      	movs	r3, #8
 80039ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d008      	beq.n	8003a0c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a06:	461a      	mov	r2, r3
 8003a08:	2310      	movs	r3, #16
 8003a0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a22:	461a      	mov	r2, r3
 8003a24:	2340      	movs	r3, #64	@ 0x40
 8003a26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d023      	beq.n	8003a7a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a34:	6a38      	ldr	r0, [r7, #32]
 8003a36:	f002 ffdd 	bl	80069f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	3310      	adds	r3, #16
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	78db      	ldrb	r3, [r3, #3]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d108      	bne.n	8003a68 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f006 fb32 	bl	800a0cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a74:	461a      	mov	r2, r3
 8003a76:	2302      	movs	r3, #2
 8003a78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fcbd 	bl	8004406 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	3301      	adds	r3, #1
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a94:	085b      	lsrs	r3, r3, #1
 8003a96:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f47f af2e 	bne.w	80038fc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f003 fec1 	bl	800782c <USB_ReadInterrupts>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ab4:	d122      	bne.n	8003afc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d108      	bne.n	8003ae6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003adc:	2100      	movs	r1, #0
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fea4 	bl	800482c <HAL_PCDEx_LPM_Callback>
 8003ae4:	e002      	b.n	8003aec <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f006 fad0 	bl	800a08c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003afa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f003 fe93 	bl	800782c <USB_ReadInterrupts>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b10:	d112      	bne.n	8003b38 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d102      	bne.n	8003b28 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f006 fa8c 	bl	800a040 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003b36:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f003 fe75 	bl	800782c <USB_ReadInterrupts>
 8003b42:	4603      	mov	r3, r0
 8003b44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4c:	f040 80b7 	bne.w	8003cbe <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2110      	movs	r1, #16
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f002 ff42 	bl	80069f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b70:	2300      	movs	r3, #0
 8003b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b74:	e046      	b.n	8003c04 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b82:	461a      	mov	r2, r3
 8003b84:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b88:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b9a:	0151      	lsls	r1, r2, #5
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	440a      	add	r2, r1
 8003ba0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ba4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ba8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bbc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc0:	015a      	lsls	r2, r3, #5
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bce:	0151      	lsls	r1, r2, #5
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	440a      	add	r2, r1
 8003bd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bd8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bdc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bee:	0151      	lsls	r1, r2, #5
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bf8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003bfc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c00:	3301      	adds	r3, #1
 8003c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	791b      	ldrb	r3, [r3, #4]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d3b2      	bcc.n	8003b76 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c1e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003c22:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	7bdb      	ldrb	r3, [r3, #15]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d016      	beq.n	8003c5a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c3c:	f043 030b 	orr.w	r3, r3, #11
 8003c40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c52:	f043 030b 	orr.w	r3, r3, #11
 8003c56:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c58:	e015      	b.n	8003c86 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c6c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003c70:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c80:	f043 030b 	orr.w	r3, r3, #11
 8003c84:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c94:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003c98:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6818      	ldr	r0, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f003 fe83 	bl	80079b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f003 fdb2 	bl	800782c <USB_ReadInterrupts>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cd2:	d123      	bne.n	8003d1c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f003 fe48 	bl	800796e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f002 feff 	bl	8006ae6 <USB_GetDevSpeed>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681c      	ldr	r4, [r3, #0]
 8003cf4:	f001 fa0a 	bl	800510c <HAL_RCC_GetHCLKFreq>
 8003cf8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4620      	mov	r0, r4
 8003d02:	f002 fc03 	bl	800650c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f006 f971 	bl	8009fee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f003 fd83 	bl	800782c <USB_ReadInterrupts>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d10a      	bne.n	8003d46 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f006 f94e 	bl	8009fd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695a      	ldr	r2, [r3, #20]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f002 0208 	and.w	r2, r2, #8
 8003d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f003 fd6e 	bl	800782c <USB_ReadInterrupts>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d56:	2b80      	cmp	r3, #128	@ 0x80
 8003d58:	d123      	bne.n	8003da2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d66:	2301      	movs	r3, #1
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d6a:	e014      	b.n	8003d96 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d105      	bne.n	8003d90 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	4619      	mov	r1, r3
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fb0a 	bl	80043a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	3301      	adds	r3, #1
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	791b      	ldrb	r3, [r3, #4]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d3e4      	bcc.n	8003d6c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f003 fd40 	bl	800782c <USB_ReadInterrupts>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003db6:	d13c      	bne.n	8003e32 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003db8:	2301      	movs	r3, #1
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dbc:	e02b      	b.n	8003e16 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	00db      	lsls	r3, r3, #3
 8003dd6:	4413      	add	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	3318      	adds	r3, #24
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d115      	bne.n	8003e10 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003de4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	da12      	bge.n	8003e10 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	3317      	adds	r3, #23
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	4619      	mov	r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 faca 	bl	80043a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e12:	3301      	adds	r3, #1
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	791b      	ldrb	r3, [r3, #4]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d3cd      	bcc.n	8003dbe <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003e30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f003 fcf8 	bl	800782c <USB_ReadInterrupts>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e46:	d156      	bne.n	8003ef6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e48:	2301      	movs	r3, #1
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4c:	e045      	b.n	8003eda <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d12e      	bne.n	8003ed4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	da2b      	bge.n	8003ed4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003e88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d121      	bne.n	8003ed4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ea6:	6a3b      	ldr	r3, [r7, #32]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10a      	bne.n	8003ed4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ecc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ed0:	6053      	str	r3, [r2, #4]
            break;
 8003ed2:	e008      	b.n	8003ee6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	791b      	ldrb	r3, [r3, #4]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d3b3      	bcc.n	8003e4e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f003 fc96 	bl	800782c <USB_ReadInterrupts>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0a:	d10a      	bne.n	8003f22 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f006 f8ef 	bl	800a0f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f003 fc80 	bl	800782c <USB_ReadInterrupts>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d115      	bne.n	8003f62 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f006 f8df 	bl	800a10c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	e000      	b.n	8003f62 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003f60:	bf00      	nop
    }
  }
}
 8003f62:	3734      	adds	r7, #52	@ 0x34
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd90      	pop	{r4, r7, pc}

08003f68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_PCD_SetAddress+0x1a>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e012      	b.n	8003fa8 <HAL_PCD_SetAddress+0x40>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f003 fbdf 	bl	800775c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	4608      	mov	r0, r1
 8003fba:	4611      	mov	r1, r2
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	70fb      	strb	r3, [r7, #3]
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	803b      	strh	r3, [r7, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	da0f      	bge.n	8003ff6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	f003 020f 	and.w	r2, r3, #15
 8003fdc:	4613      	mov	r3, r2
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	3310      	adds	r3, #16
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4413      	add	r3, r2
 8003fea:	3304      	adds	r3, #4
 8003fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	705a      	strb	r2, [r3, #1]
 8003ff4:	e00f      	b.n	8004016 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	f003 020f 	and.w	r2, r3, #15
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	4413      	add	r3, r2
 800400c:	3304      	adds	r3, #4
 800400e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	b2da      	uxtb	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004022:	883b      	ldrh	r3, [r7, #0]
 8004024:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	78ba      	ldrb	r2, [r7, #2]
 8004030:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	785b      	ldrb	r3, [r3, #1]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d004      	beq.n	8004044 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004044:	78bb      	ldrb	r3, [r7, #2]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d102      	bne.n	8004050 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_PCD_EP_Open+0xae>
 800405a:	2302      	movs	r3, #2
 800405c:	e00e      	b.n	800407c <HAL_PCD_EP_Open+0xcc>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68f9      	ldr	r1, [r7, #12]
 800406c:	4618      	mov	r0, r3
 800406e:	f002 fd5f 	bl	8006b30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800407a:	7afb      	ldrb	r3, [r7, #11]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004090:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004094:	2b00      	cmp	r3, #0
 8004096:	da0f      	bge.n	80040b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	f003 020f 	and.w	r2, r3, #15
 800409e:	4613      	mov	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	4413      	add	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	3310      	adds	r3, #16
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	3304      	adds	r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2201      	movs	r2, #1
 80040b4:	705a      	strb	r2, [r3, #1]
 80040b6:	e00f      	b.n	80040d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 020f 	and.w	r2, r3, #15
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	3304      	adds	r3, #4
 80040d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_PCD_EP_Close+0x6e>
 80040ee:	2302      	movs	r3, #2
 80040f0:	e00e      	b.n	8004110 <HAL_PCD_EP_Close+0x8c>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	4618      	mov	r0, r3
 8004102:	f002 fd9d 	bl	8006c40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	460b      	mov	r3, r1
 8004126:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004128:	7afb      	ldrb	r3, [r7, #11]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4413      	add	r3, r2
 800413e:	3304      	adds	r3, #4
 8004140:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2200      	movs	r2, #0
 8004152:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2200      	movs	r2, #0
 8004158:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800415a:	7afb      	ldrb	r3, [r7, #11]
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	b2da      	uxtb	r2, r3
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	799b      	ldrb	r3, [r3, #6]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d102      	bne.n	8004174 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	799b      	ldrb	r3, [r3, #6]
 800417c:	461a      	mov	r2, r3
 800417e:	6979      	ldr	r1, [r7, #20]
 8004180:	f002 fe3a 	bl	8006df8 <USB_EPStartXfer>

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800419a:	78fb      	ldrb	r3, [r7, #3]
 800419c:	f003 020f 	and.w	r2, r3, #15
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80041b0:	681b      	ldr	r3, [r3, #0]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
 80041ca:	460b      	mov	r3, r1
 80041cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ce:	7afb      	ldrb	r3, [r7, #11]
 80041d0:	f003 020f 	and.w	r2, r3, #15
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	3310      	adds	r3, #16
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	3304      	adds	r3, #4
 80041e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2201      	movs	r2, #1
 80041fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041fe:	7afb      	ldrb	r3, [r7, #11]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	b2da      	uxtb	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	799b      	ldrb	r3, [r3, #6]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d102      	bne.n	8004218 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	799b      	ldrb	r3, [r3, #6]
 8004220:	461a      	mov	r2, r3
 8004222:	6979      	ldr	r1, [r7, #20]
 8004224:	f002 fde8 	bl	8006df8 <USB_EPStartXfer>

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	460b      	mov	r3, r1
 800423c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800423e:	78fb      	ldrb	r3, [r7, #3]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	7912      	ldrb	r2, [r2, #4]
 8004248:	4293      	cmp	r3, r2
 800424a:	d901      	bls.n	8004250 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e04f      	b.n	80042f0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004250:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004254:	2b00      	cmp	r3, #0
 8004256:	da0f      	bge.n	8004278 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004258:	78fb      	ldrb	r3, [r7, #3]
 800425a:	f003 020f 	and.w	r2, r3, #15
 800425e:	4613      	mov	r3, r2
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	3310      	adds	r3, #16
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	4413      	add	r3, r2
 800426c:	3304      	adds	r3, #4
 800426e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2201      	movs	r2, #1
 8004274:	705a      	strb	r2, [r3, #1]
 8004276:	e00d      	b.n	8004294 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	4613      	mov	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4413      	add	r3, r2
 800428a:	3304      	adds	r3, #4
 800428c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_PCD_EP_SetStall+0x82>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e01d      	b.n	80042f0 <HAL_PCD_EP_SetStall+0xbe>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68f9      	ldr	r1, [r7, #12]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f003 f976 	bl	80075b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	7999      	ldrb	r1, [r3, #6]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042e0:	461a      	mov	r2, r3
 80042e2:	f003 fb67 	bl	80079b4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	7912      	ldrb	r2, [r2, #4]
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e042      	b.n	800439c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800431a:	2b00      	cmp	r3, #0
 800431c:	da0f      	bge.n	800433e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	f003 020f 	and.w	r2, r3, #15
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	3310      	adds	r3, #16
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	3304      	adds	r3, #4
 8004334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	705a      	strb	r2, [r3, #1]
 800433c:	e00f      	b.n	800435e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	f003 020f 	and.w	r2, r3, #15
 8004344:	4613      	mov	r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	4413      	add	r3, r2
 8004354:	3304      	adds	r3, #4
 8004356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	b2da      	uxtb	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_PCD_EP_ClrStall+0x86>
 800437a:	2302      	movs	r3, #2
 800437c:	e00e      	b.n	800439c <HAL_PCD_EP_ClrStall+0xa4>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68f9      	ldr	r1, [r7, #12]
 800438c:	4618      	mov	r0, r3
 800438e:	f003 f97f 	bl	8007690 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80043b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	da0c      	bge.n	80043d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	f003 020f 	and.w	r2, r3, #15
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	3310      	adds	r3, #16
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	3304      	adds	r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e00c      	b.n	80043ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	f003 020f 	and.w	r2, r3, #15
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	4413      	add	r3, r2
 80043e8:	3304      	adds	r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68f9      	ldr	r1, [r7, #12]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f002 ff9e 	bl	8007334 <USB_EPStopXfer>
 80043f8:	4603      	mov	r3, r0
 80043fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80043fc:	7afb      	ldrb	r3, [r7, #11]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b08a      	sub	sp, #40	@ 0x28
 800440a:	af02      	add	r7, sp, #8
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	3310      	adds	r3, #16
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	4413      	add	r3, r2
 800442a:	3304      	adds	r3, #4
 800442c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	429a      	cmp	r2, r3
 8004438:	d901      	bls.n	800443e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e06b      	b.n	8004516 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	69fa      	ldr	r2, [r7, #28]
 8004450:	429a      	cmp	r2, r3
 8004452:	d902      	bls.n	800445a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	3303      	adds	r3, #3
 800445e:	089b      	lsrs	r3, r3, #2
 8004460:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004462:	e02a      	b.n	80044ba <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	691a      	ldr	r2, [r3, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	69fa      	ldr	r2, [r7, #28]
 8004476:	429a      	cmp	r2, r3
 8004478:	d902      	bls.n	8004480 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	3303      	adds	r3, #3
 8004484:	089b      	lsrs	r3, r3, #2
 8004486:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68d9      	ldr	r1, [r3, #12]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	4603      	mov	r3, r0
 800449c:	6978      	ldr	r0, [r7, #20]
 800449e:	f002 fff3 	bl	8007488 <USB_WritePacket>

    ep->xfer_buff  += len;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68da      	ldr	r2, [r3, #12]
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	441a      	add	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	441a      	add	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d809      	bhi.n	80044e4 <PCD_WriteEmptyTxFifo+0xde>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	695a      	ldr	r2, [r3, #20]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044d8:	429a      	cmp	r2, r3
 80044da:	d203      	bcs.n	80044e4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1bf      	bne.n	8004464 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d811      	bhi.n	8004514 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	2201      	movs	r2, #1
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	43db      	mvns	r3, r3
 800450a:	6939      	ldr	r1, [r7, #16]
 800450c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004510:	4013      	ands	r3, r2
 8004512:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	333c      	adds	r3, #60	@ 0x3c
 8004538:	3304      	adds	r3, #4
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	799b      	ldrb	r3, [r3, #6]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d17b      	bne.n	800464e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d015      	beq.n	800458c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	4a61      	ldr	r2, [pc, #388]	@ (80046e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	f240 80b9 	bls.w	80046dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80b3 	beq.w	80046dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004582:	461a      	mov	r2, r3
 8004584:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004588:	6093      	str	r3, [r2, #8]
 800458a:	e0a7      	b.n	80046dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	015a      	lsls	r2, r3, #5
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	4413      	add	r3, r2
 800459e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a2:	461a      	mov	r2, r3
 80045a4:	2320      	movs	r3, #32
 80045a6:	6093      	str	r3, [r2, #8]
 80045a8:	e098      	b.n	80046dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f040 8093 	bne.w	80046dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	4a4b      	ldr	r2, [pc, #300]	@ (80046e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d90f      	bls.n	80045de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d4:	461a      	mov	r2, r3
 80045d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045da:	6093      	str	r3, [r2, #8]
 80045dc:	e07e      	b.n	80046dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4413      	add	r3, r2
 80045f0:	3304      	adds	r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a1a      	ldr	r2, [r3, #32]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	0159      	lsls	r1, r3, #5
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	440b      	add	r3, r1
 8004600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800460a:	1ad2      	subs	r2, r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d114      	bne.n	8004640 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004628:	461a      	mov	r2, r3
 800462a:	2101      	movs	r1, #1
 800462c:	f003 f9c2 	bl	80079b4 <USB_EP0_OutStart>
 8004630:	e006      	b.n	8004640 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	441a      	add	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	b2db      	uxtb	r3, r3
 8004644:	4619      	mov	r1, r3
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f005 fc8e 	bl	8009f68 <HAL_PCD_DataOutStageCallback>
 800464c:	e046      	b.n	80046dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	4a26      	ldr	r2, [pc, #152]	@ (80046ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d124      	bne.n	80046a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800466c:	461a      	mov	r2, r3
 800466e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004672:	6093      	str	r3, [r2, #8]
 8004674:	e032      	b.n	80046dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800468c:	461a      	mov	r2, r3
 800468e:	2320      	movs	r3, #32
 8004690:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	4619      	mov	r1, r3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f005 fc65 	bl	8009f68 <HAL_PCD_DataOutStageCallback>
 800469e:	e01d      	b.n	80046dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d114      	bne.n	80046d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	4613      	mov	r3, r2
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4413      	add	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d108      	bne.n	80046d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046c8:	461a      	mov	r2, r3
 80046ca:	2100      	movs	r1, #0
 80046cc:	f003 f972 	bl	80079b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	4619      	mov	r1, r3
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f005 fc46 	bl	8009f68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3720      	adds	r7, #32
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	4f54300a 	.word	0x4f54300a
 80046ec:	4f54310a 	.word	0x4f54310a

080046f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	333c      	adds	r3, #60	@ 0x3c
 8004708:	3304      	adds	r3, #4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a15      	ldr	r2, [pc, #84]	@ (8004778 <PCD_EP_OutSetupPacket_int+0x88>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d90e      	bls.n	8004744 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800472c:	2b00      	cmp	r3, #0
 800472e:	d009      	beq.n	8004744 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800473c:	461a      	mov	r2, r3
 800473e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004742:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f005 fbfd 	bl	8009f44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a0a      	ldr	r2, [pc, #40]	@ (8004778 <PCD_EP_OutSetupPacket_int+0x88>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d90c      	bls.n	800476c <PCD_EP_OutSetupPacket_int+0x7c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	799b      	ldrb	r3, [r3, #6]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d108      	bne.n	800476c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004764:	461a      	mov	r2, r3
 8004766:	2101      	movs	r1, #1
 8004768:	f003 f924 	bl	80079b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	4f54300a 	.word	0x4f54300a

0800477c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	460b      	mov	r3, r1
 8004786:	70fb      	strb	r3, [r7, #3]
 8004788:	4613      	mov	r3, r2
 800478a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004792:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004794:	78fb      	ldrb	r3, [r7, #3]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d107      	bne.n	80047aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800479a:	883b      	ldrh	r3, [r7, #0]
 800479c:	0419      	lsls	r1, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80047a8:	e028      	b.n	80047fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	4413      	add	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047b8:	2300      	movs	r3, #0
 80047ba:	73fb      	strb	r3, [r7, #15]
 80047bc:	e00d      	b.n	80047da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	3340      	adds	r3, #64	@ 0x40
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	0c1b      	lsrs	r3, r3, #16
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	4413      	add	r3, r2
 80047d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	3301      	adds	r3, #1
 80047d8:	73fb      	strb	r3, [r7, #15]
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	3b01      	subs	r3, #1
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d3ec      	bcc.n	80047be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047e4:	883b      	ldrh	r3, [r7, #0]
 80047e6:	0418      	lsls	r0, r3, #16
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6819      	ldr	r1, [r3, #0]
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	4302      	orrs	r2, r0
 80047f4:	3340      	adds	r3, #64	@ 0x40
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	887a      	ldrh	r2, [r7, #2]
 800481c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	460b      	mov	r3, r1
 8004836:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e267      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d075      	beq.n	800494e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004862:	4b88      	ldr	r3, [pc, #544]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b04      	cmp	r3, #4
 800486c:	d00c      	beq.n	8004888 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800486e:	4b85      	ldr	r3, [pc, #532]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004876:	2b08      	cmp	r3, #8
 8004878:	d112      	bne.n	80048a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800487a:	4b82      	ldr	r3, [pc, #520]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004882:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004886:	d10b      	bne.n	80048a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004888:	4b7e      	ldr	r3, [pc, #504]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d05b      	beq.n	800494c <HAL_RCC_OscConfig+0x108>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d157      	bne.n	800494c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e242      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a8:	d106      	bne.n	80048b8 <HAL_RCC_OscConfig+0x74>
 80048aa:	4b76      	ldr	r3, [pc, #472]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a75      	ldr	r2, [pc, #468]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80048b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	e01d      	b.n	80048f4 <HAL_RCC_OscConfig+0xb0>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048c0:	d10c      	bne.n	80048dc <HAL_RCC_OscConfig+0x98>
 80048c2:	4b70      	ldr	r3, [pc, #448]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a6f      	ldr	r2, [pc, #444]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80048c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a6c      	ldr	r2, [pc, #432]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80048d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e00b      	b.n	80048f4 <HAL_RCC_OscConfig+0xb0>
 80048dc:	4b69      	ldr	r3, [pc, #420]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a68      	ldr	r2, [pc, #416]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80048e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	4b66      	ldr	r3, [pc, #408]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a65      	ldr	r2, [pc, #404]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80048ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d013      	beq.n	8004924 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fd fb1a 	bl	8001f34 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004904:	f7fd fb16 	bl	8001f34 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b64      	cmp	r3, #100	@ 0x64
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e207      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004916:	4b5b      	ldr	r3, [pc, #364]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0xc0>
 8004922:	e014      	b.n	800494e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fd fb06 	bl	8001f34 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800492c:	f7fd fb02 	bl	8001f34 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b64      	cmp	r3, #100	@ 0x64
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e1f3      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800493e:	4b51      	ldr	r3, [pc, #324]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f0      	bne.n	800492c <HAL_RCC_OscConfig+0xe8>
 800494a:	e000      	b.n	800494e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d063      	beq.n	8004a22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800495a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00b      	beq.n	800497e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004966:	4b47      	ldr	r3, [pc, #284]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800496e:	2b08      	cmp	r3, #8
 8004970:	d11c      	bne.n	80049ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004972:	4b44      	ldr	r3, [pc, #272]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d116      	bne.n	80049ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800497e:	4b41      	ldr	r3, [pc, #260]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_RCC_OscConfig+0x152>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d001      	beq.n	8004996 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e1c7      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004996:	4b3b      	ldr	r3, [pc, #236]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	4937      	ldr	r1, [pc, #220]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049aa:	e03a      	b.n	8004a22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d020      	beq.n	80049f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049b4:	4b34      	ldr	r3, [pc, #208]	@ (8004a88 <HAL_RCC_OscConfig+0x244>)
 80049b6:	2201      	movs	r2, #1
 80049b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fd fabb 	bl	8001f34 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c2:	f7fd fab7 	bl	8001f34 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e1a8      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0f0      	beq.n	80049c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e0:	4b28      	ldr	r3, [pc, #160]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4925      	ldr	r1, [pc, #148]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	600b      	str	r3, [r1, #0]
 80049f4:	e015      	b.n	8004a22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049f6:	4b24      	ldr	r3, [pc, #144]	@ (8004a88 <HAL_RCC_OscConfig+0x244>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049fc:	f7fd fa9a 	bl	8001f34 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a04:	f7fd fa96 	bl	8001f34 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e187      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a16:	4b1b      	ldr	r3, [pc, #108]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1f0      	bne.n	8004a04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d036      	beq.n	8004a9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d016      	beq.n	8004a64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a36:	4b15      	ldr	r3, [pc, #84]	@ (8004a8c <HAL_RCC_OscConfig+0x248>)
 8004a38:	2201      	movs	r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3c:	f7fd fa7a 	bl	8001f34 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a44:	f7fd fa76 	bl	8001f34 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e167      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a56:	4b0b      	ldr	r3, [pc, #44]	@ (8004a84 <HAL_RCC_OscConfig+0x240>)
 8004a58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x200>
 8004a62:	e01b      	b.n	8004a9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a64:	4b09      	ldr	r3, [pc, #36]	@ (8004a8c <HAL_RCC_OscConfig+0x248>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a6a:	f7fd fa63 	bl	8001f34 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a70:	e00e      	b.n	8004a90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a72:	f7fd fa5f 	bl	8001f34 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d907      	bls.n	8004a90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e150      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
 8004a84:	40023800 	.word	0x40023800
 8004a88:	42470000 	.word	0x42470000
 8004a8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a90:	4b88      	ldr	r3, [pc, #544]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1ea      	bne.n	8004a72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8097 	beq.w	8004bd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aae:	4b81      	ldr	r3, [pc, #516]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10f      	bne.n	8004ada <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	60bb      	str	r3, [r7, #8]
 8004abe:	4b7d      	ldr	r3, [pc, #500]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	4a7c      	ldr	r2, [pc, #496]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aca:	4b7a      	ldr	r3, [pc, #488]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ada:	4b77      	ldr	r3, [pc, #476]	@ (8004cb8 <HAL_RCC_OscConfig+0x474>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d118      	bne.n	8004b18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ae6:	4b74      	ldr	r3, [pc, #464]	@ (8004cb8 <HAL_RCC_OscConfig+0x474>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a73      	ldr	r2, [pc, #460]	@ (8004cb8 <HAL_RCC_OscConfig+0x474>)
 8004aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004af2:	f7fd fa1f 	bl	8001f34 <HAL_GetTick>
 8004af6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af8:	e008      	b.n	8004b0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004afa:	f7fd fa1b 	bl	8001f34 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d901      	bls.n	8004b0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e10c      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb8 <HAL_RCC_OscConfig+0x474>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0f0      	beq.n	8004afa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCC_OscConfig+0x2ea>
 8004b20:	4b64      	ldr	r3, [pc, #400]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b24:	4a63      	ldr	r2, [pc, #396]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b2c:	e01c      	b.n	8004b68 <HAL_RCC_OscConfig+0x324>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b05      	cmp	r3, #5
 8004b34:	d10c      	bne.n	8004b50 <HAL_RCC_OscConfig+0x30c>
 8004b36:	4b5f      	ldr	r3, [pc, #380]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3a:	4a5e      	ldr	r2, [pc, #376]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	f043 0304 	orr.w	r3, r3, #4
 8004b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b42:	4b5c      	ldr	r3, [pc, #368]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b46:	4a5b      	ldr	r2, [pc, #364]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b4e:	e00b      	b.n	8004b68 <HAL_RCC_OscConfig+0x324>
 8004b50:	4b58      	ldr	r3, [pc, #352]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b54:	4a57      	ldr	r2, [pc, #348]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b5c:	4b55      	ldr	r3, [pc, #340]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b60:	4a54      	ldr	r2, [pc, #336]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004b62:	f023 0304 	bic.w	r3, r3, #4
 8004b66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d015      	beq.n	8004b9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b70:	f7fd f9e0 	bl	8001f34 <HAL_GetTick>
 8004b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b76:	e00a      	b.n	8004b8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b78:	f7fd f9dc 	bl	8001f34 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e0cb      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8e:	4b49      	ldr	r3, [pc, #292]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0ee      	beq.n	8004b78 <HAL_RCC_OscConfig+0x334>
 8004b9a:	e014      	b.n	8004bc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b9c:	f7fd f9ca 	bl	8001f34 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba2:	e00a      	b.n	8004bba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba4:	f7fd f9c6 	bl	8001f34 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e0b5      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bba:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1ee      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bc6:	7dfb      	ldrb	r3, [r7, #23]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bcc:	4b39      	ldr	r3, [pc, #228]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd0:	4a38      	ldr	r2, [pc, #224]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	699b      	ldr	r3, [r3, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 80a1 	beq.w	8004d24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004be2:	4b34      	ldr	r3, [pc, #208]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 030c 	and.w	r3, r3, #12
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d05c      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d141      	bne.n	8004c7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bf6:	4b31      	ldr	r3, [pc, #196]	@ (8004cbc <HAL_RCC_OscConfig+0x478>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fd f99a 	bl	8001f34 <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fd f996 	bl	8001f34 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e087      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c16:	4b27      	ldr	r3, [pc, #156]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69da      	ldr	r2, [r3, #28]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a1b      	ldr	r3, [r3, #32]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	019b      	lsls	r3, r3, #6
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c38:	085b      	lsrs	r3, r3, #1
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	041b      	lsls	r3, r3, #16
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	061b      	lsls	r3, r3, #24
 8004c46:	491b      	ldr	r1, [pc, #108]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cbc <HAL_RCC_OscConfig+0x478>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c52:	f7fd f96f 	bl	8001f34 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5a:	f7fd f96b 	bl	8001f34 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e05c      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c6c:	4b11      	ldr	r3, [pc, #68]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0f0      	beq.n	8004c5a <HAL_RCC_OscConfig+0x416>
 8004c78:	e054      	b.n	8004d24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7a:	4b10      	ldr	r3, [pc, #64]	@ (8004cbc <HAL_RCC_OscConfig+0x478>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fd f958 	bl	8001f34 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c88:	f7fd f954 	bl	8001f34 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e045      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x444>
 8004ca6:	e03d      	b.n	8004d24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	699b      	ldr	r3, [r3, #24]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d107      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e038      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	40007000 	.word	0x40007000
 8004cbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d30 <HAL_RCC_OscConfig+0x4ec>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d028      	beq.n	8004d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d121      	bne.n	8004d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d11a      	bne.n	8004d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d111      	bne.n	8004d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d06:	085b      	lsrs	r3, r3, #1
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d107      	bne.n	8004d20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d001      	beq.n	8004d24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e000      	b.n	8004d26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3718      	adds	r7, #24
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800

08004d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0cc      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d48:	4b68      	ldr	r3, [pc, #416]	@ (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d90c      	bls.n	8004d70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d56:	4b65      	ldr	r3, [pc, #404]	@ (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5e:	4b63      	ldr	r3, [pc, #396]	@ (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d001      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0b8      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d020      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d88:	4b59      	ldr	r3, [pc, #356]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	4a58      	ldr	r2, [pc, #352]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004da0:	4b53      	ldr	r3, [pc, #332]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4a52      	ldr	r2, [pc, #328]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004daa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dac:	4b50      	ldr	r3, [pc, #320]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	494d      	ldr	r1, [pc, #308]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d044      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d107      	bne.n	8004de2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd2:	4b47      	ldr	r3, [pc, #284]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d119      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e07f      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d003      	beq.n	8004df2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df2:	4b3f      	ldr	r3, [pc, #252]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e06f      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e02:	4b3b      	ldr	r3, [pc, #236]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e067      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e12:	4b37      	ldr	r3, [pc, #220]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f023 0203 	bic.w	r2, r3, #3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4934      	ldr	r1, [pc, #208]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e24:	f7fd f886 	bl	8001f34 <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2c:	f7fd f882 	bl	8001f34 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e04f      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e42:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 020c 	and.w	r2, r3, #12
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d1eb      	bne.n	8004e2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e54:	4b25      	ldr	r3, [pc, #148]	@ (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d20c      	bcs.n	8004e7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e62:	4b22      	ldr	r3, [pc, #136]	@ (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e6a:	4b20      	ldr	r3, [pc, #128]	@ (8004eec <HAL_RCC_ClockConfig+0x1b8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 030f 	and.w	r3, r3, #15
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d001      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e032      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d008      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e88:	4b19      	ldr	r3, [pc, #100]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	4916      	ldr	r1, [pc, #88]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ea6:	4b12      	ldr	r3, [pc, #72]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	490e      	ldr	r1, [pc, #56]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004eba:	f000 f821 	bl	8004f00 <HAL_RCC_GetSysClockFreq>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	091b      	lsrs	r3, r3, #4
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	490a      	ldr	r1, [pc, #40]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c0>)
 8004ecc:	5ccb      	ldrb	r3, [r1, r3]
 8004ece:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed2:	4a09      	ldr	r2, [pc, #36]	@ (8004ef8 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ed6:	4b09      	ldr	r3, [pc, #36]	@ (8004efc <HAL_RCC_ClockConfig+0x1c8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fc ffe6 	bl	8001eac <HAL_InitTick>

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40023c00 	.word	0x40023c00
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	0800a5ec 	.word	0x0800a5ec
 8004ef8:	20000058 	.word	0x20000058
 8004efc:	200000a4 	.word	0x200000a4

08004f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f04:	b094      	sub	sp, #80	@ 0x50
 8004f06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f18:	4b79      	ldr	r3, [pc, #484]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 030c 	and.w	r3, r3, #12
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d00d      	beq.n	8004f40 <HAL_RCC_GetSysClockFreq+0x40>
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	f200 80e1 	bhi.w	80050ec <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_RCC_GetSysClockFreq+0x34>
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d003      	beq.n	8004f3a <HAL_RCC_GetSysClockFreq+0x3a>
 8004f32:	e0db      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f34:	4b73      	ldr	r3, [pc, #460]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f38:	e0db      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f3a:	4b73      	ldr	r3, [pc, #460]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f3e:	e0d8      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f40:	4b6f      	ldr	r3, [pc, #444]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f48:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f4a:	4b6d      	ldr	r3, [pc, #436]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d063      	beq.n	800501e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f56:	4b6a      	ldr	r3, [pc, #424]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	099b      	lsrs	r3, r3, #6
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f60:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f68:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f72:	4622      	mov	r2, r4
 8004f74:	462b      	mov	r3, r5
 8004f76:	f04f 0000 	mov.w	r0, #0
 8004f7a:	f04f 0100 	mov.w	r1, #0
 8004f7e:	0159      	lsls	r1, r3, #5
 8004f80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f84:	0150      	lsls	r0, r2, #5
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4621      	mov	r1, r4
 8004f8c:	1a51      	subs	r1, r2, r1
 8004f8e:	6139      	str	r1, [r7, #16]
 8004f90:	4629      	mov	r1, r5
 8004f92:	eb63 0301 	sbc.w	r3, r3, r1
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	f04f 0200 	mov.w	r2, #0
 8004f9c:	f04f 0300 	mov.w	r3, #0
 8004fa0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	018b      	lsls	r3, r1, #6
 8004fa8:	4651      	mov	r1, sl
 8004faa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fae:	4651      	mov	r1, sl
 8004fb0:	018a      	lsls	r2, r1, #6
 8004fb2:	4651      	mov	r1, sl
 8004fb4:	ebb2 0801 	subs.w	r8, r2, r1
 8004fb8:	4659      	mov	r1, fp
 8004fba:	eb63 0901 	sbc.w	r9, r3, r1
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	f04f 0300 	mov.w	r3, #0
 8004fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fd2:	4690      	mov	r8, r2
 8004fd4:	4699      	mov	r9, r3
 8004fd6:	4623      	mov	r3, r4
 8004fd8:	eb18 0303 	adds.w	r3, r8, r3
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	462b      	mov	r3, r5
 8004fe0:	eb49 0303 	adc.w	r3, r9, r3
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	024b      	lsls	r3, r1, #9
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	024a      	lsls	r2, r1, #9
 8005000:	4610      	mov	r0, r2
 8005002:	4619      	mov	r1, r3
 8005004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005006:	2200      	movs	r2, #0
 8005008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800500a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800500c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005010:	f7fb f8f6 	bl	8000200 <__aeabi_uldivmod>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4613      	mov	r3, r2
 800501a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800501c:	e058      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800501e:	4b38      	ldr	r3, [pc, #224]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x200>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	099b      	lsrs	r3, r3, #6
 8005024:	2200      	movs	r2, #0
 8005026:	4618      	mov	r0, r3
 8005028:	4611      	mov	r1, r2
 800502a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800502e:	623b      	str	r3, [r7, #32]
 8005030:	2300      	movs	r3, #0
 8005032:	627b      	str	r3, [r7, #36]	@ 0x24
 8005034:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005038:	4642      	mov	r2, r8
 800503a:	464b      	mov	r3, r9
 800503c:	f04f 0000 	mov.w	r0, #0
 8005040:	f04f 0100 	mov.w	r1, #0
 8005044:	0159      	lsls	r1, r3, #5
 8005046:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800504a:	0150      	lsls	r0, r2, #5
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	4641      	mov	r1, r8
 8005052:	ebb2 0a01 	subs.w	sl, r2, r1
 8005056:	4649      	mov	r1, r9
 8005058:	eb63 0b01 	sbc.w	fp, r3, r1
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005068:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800506c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005070:	ebb2 040a 	subs.w	r4, r2, sl
 8005074:	eb63 050b 	sbc.w	r5, r3, fp
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	00eb      	lsls	r3, r5, #3
 8005082:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005086:	00e2      	lsls	r2, r4, #3
 8005088:	4614      	mov	r4, r2
 800508a:	461d      	mov	r5, r3
 800508c:	4643      	mov	r3, r8
 800508e:	18e3      	adds	r3, r4, r3
 8005090:	603b      	str	r3, [r7, #0]
 8005092:	464b      	mov	r3, r9
 8005094:	eb45 0303 	adc.w	r3, r5, r3
 8005098:	607b      	str	r3, [r7, #4]
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050a6:	4629      	mov	r1, r5
 80050a8:	028b      	lsls	r3, r1, #10
 80050aa:	4621      	mov	r1, r4
 80050ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050b0:	4621      	mov	r1, r4
 80050b2:	028a      	lsls	r2, r1, #10
 80050b4:	4610      	mov	r0, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ba:	2200      	movs	r2, #0
 80050bc:	61bb      	str	r3, [r7, #24]
 80050be:	61fa      	str	r2, [r7, #28]
 80050c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050c4:	f7fb f89c 	bl	8000200 <__aeabi_uldivmod>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4613      	mov	r3, r2
 80050ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x200>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	0c1b      	lsrs	r3, r3, #16
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	3301      	adds	r3, #1
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80050e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050ea:	e002      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050ec:	4b05      	ldr	r3, [pc, #20]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x204>)
 80050ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3750      	adds	r7, #80	@ 0x50
 80050f8:	46bd      	mov	sp, r7
 80050fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050fe:	bf00      	nop
 8005100:	40023800 	.word	0x40023800
 8005104:	00f42400 	.word	0x00f42400
 8005108:	007a1200 	.word	0x007a1200

0800510c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005110:	4b03      	ldr	r3, [pc, #12]	@ (8005120 <HAL_RCC_GetHCLKFreq+0x14>)
 8005112:	681b      	ldr	r3, [r3, #0]
}
 8005114:	4618      	mov	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	20000058 	.word	0x20000058

08005124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10b      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005148:	2b00      	cmp	r3, #0
 800514a:	d105      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005154:	2b00      	cmp	r3, #0
 8005156:	d075      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005158:	4b91      	ldr	r3, [pc, #580]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800515e:	f7fc fee9 	bl	8001f34 <HAL_GetTick>
 8005162:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005164:	e008      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005166:	f7fc fee5 	bl	8001f34 <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e189      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005178:	4b8a      	ldr	r3, [pc, #552]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f0      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d009      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	019a      	lsls	r2, r3, #6
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	071b      	lsls	r3, r3, #28
 800519c:	4981      	ldr	r1, [pc, #516]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01f      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051b0:	4b7c      	ldr	r3, [pc, #496]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051b6:	0f1b      	lsrs	r3, r3, #28
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	019a      	lsls	r2, r3, #6
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	061b      	lsls	r3, r3, #24
 80051ca:	431a      	orrs	r2, r3
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	071b      	lsls	r3, r3, #28
 80051d0:	4974      	ldr	r1, [pc, #464]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051d8:	4b72      	ldr	r3, [pc, #456]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80051de:	f023 021f 	bic.w	r2, r3, #31
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	496e      	ldr	r1, [pc, #440]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00d      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	019a      	lsls	r2, r3, #6
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	061b      	lsls	r3, r3, #24
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	071b      	lsls	r3, r3, #28
 8005210:	4964      	ldr	r1, [pc, #400]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005218:	4b61      	ldr	r3, [pc, #388]	@ (80053a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800521a:	2201      	movs	r2, #1
 800521c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800521e:	f7fc fe89 	bl	8001f34 <HAL_GetTick>
 8005222:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005224:	e008      	b.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005226:	f7fc fe85 	bl	8001f34 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e129      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005238:	4b5a      	ldr	r3, [pc, #360]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d0f0      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d105      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005258:	2b00      	cmp	r3, #0
 800525a:	d079      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800525c:	4b52      	ldr	r3, [pc, #328]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005262:	f7fc fe67 	bl	8001f34 <HAL_GetTick>
 8005266:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005268:	e008      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800526a:	f7fc fe63 	bl	8001f34 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e107      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800527c:	4b49      	ldr	r3, [pc, #292]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005288:	d0ef      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d020      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005296:	4b43      	ldr	r3, [pc, #268]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800529c:	0f1b      	lsrs	r3, r3, #28
 800529e:	f003 0307 	and.w	r3, r3, #7
 80052a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	019a      	lsls	r2, r3, #6
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	061b      	lsls	r3, r3, #24
 80052b0:	431a      	orrs	r2, r3
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	071b      	lsls	r3, r3, #28
 80052b6:	493b      	ldr	r1, [pc, #236]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052be:	4b39      	ldr	r3, [pc, #228]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052c4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	4934      	ldr	r1, [pc, #208]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01e      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052e4:	4b2f      	ldr	r3, [pc, #188]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ea:	0e1b      	lsrs	r3, r3, #24
 80052ec:	f003 030f 	and.w	r3, r3, #15
 80052f0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	019a      	lsls	r2, r3, #6
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	061b      	lsls	r3, r3, #24
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	071b      	lsls	r3, r3, #28
 8005304:	4927      	ldr	r1, [pc, #156]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005306:	4313      	orrs	r3, r2
 8005308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800530c:	4b25      	ldr	r3, [pc, #148]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800530e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005312:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	4922      	ldr	r1, [pc, #136]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800531c:	4313      	orrs	r3, r2
 800531e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005322:	4b21      	ldr	r3, [pc, #132]	@ (80053a8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005324:	2201      	movs	r2, #1
 8005326:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005328:	f7fc fe04 	bl	8001f34 <HAL_GetTick>
 800532c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800532e:	e008      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005330:	f7fc fe00 	bl	8001f34 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e0a4      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005342:	4b18      	ldr	r3, [pc, #96]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800534a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800534e:	d1ef      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 808b 	beq.w	8005474 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	4b10      	ldr	r3, [pc, #64]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	4a0f      	ldr	r2, [pc, #60]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005368:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800536c:	6413      	str	r3, [r2, #64]	@ 0x40
 800536e:	4b0d      	ldr	r3, [pc, #52]	@ (80053a4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800537a:	4b0c      	ldr	r3, [pc, #48]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a0b      	ldr	r2, [pc, #44]	@ (80053ac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005380:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005384:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005386:	f7fc fdd5 	bl	8001f34 <HAL_GetTick>
 800538a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800538c:	e010      	b.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800538e:	f7fc fdd1 	bl	8001f34 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d909      	bls.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e075      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80053a0:	42470068 	.word	0x42470068
 80053a4:	40023800 	.word	0x40023800
 80053a8:	42470070 	.word	0x42470070
 80053ac:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80053b0:	4b38      	ldr	r3, [pc, #224]	@ (8005494 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0e8      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053bc:	4b36      	ldr	r3, [pc, #216]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053c4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d02f      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d028      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053da:	4b2f      	ldr	r3, [pc, #188]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053e4:	4b2d      	ldr	r3, [pc, #180]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80053e6:	2201      	movs	r2, #1
 80053e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053ea:	4b2c      	ldr	r3, [pc, #176]	@ (800549c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053f0:	4a29      	ldr	r2, [pc, #164]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053f6:	4b28      	ldr	r3, [pc, #160]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80053f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d114      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005402:	f7fc fd97 	bl	8001f34 <HAL_GetTick>
 8005406:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005408:	e00a      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7fc fd93 	bl	8001f34 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e035      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005420:	4b1d      	ldr	r3, [pc, #116]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0ee      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005438:	d10d      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800543a:	4b17      	ldr	r3, [pc, #92]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005446:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800544a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800544e:	4912      	ldr	r1, [pc, #72]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005450:	4313      	orrs	r3, r2
 8005452:	608b      	str	r3, [r1, #8]
 8005454:	e005      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005456:	4b10      	ldr	r3, [pc, #64]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	4a0f      	ldr	r2, [pc, #60]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800545c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005460:	6093      	str	r3, [r2, #8]
 8005462:	4b0d      	ldr	r3, [pc, #52]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005464:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800546e:	490a      	ldr	r1, [pc, #40]	@ (8005498 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005470:	4313      	orrs	r3, r2
 8005472:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	d004      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005486:	4b06      	ldr	r3, [pc, #24]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005488:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	40007000 	.word	0x40007000
 8005498:	40023800 	.word	0x40023800
 800549c:	42470e40 	.word	0x42470e40
 80054a0:	424711e0 	.word	0x424711e0

080054a4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e025      	b.n	8005504 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f81d 	bl	800550c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2202      	movs	r2, #2
 80054d6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	3304      	adds	r3, #4
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f000 fe93 	bl	8006210 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	461a      	mov	r2, r3
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	f000 fee8 	bl	80062ca <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005532:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005534:	7dfb      	ldrb	r3, [r7, #23]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d101      	bne.n	800553e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800553a:	2302      	movs	r3, #2
 800553c:	e021      	b.n	8005582 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800553e:	7dfb      	ldrb	r3, [r7, #23]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d002      	beq.n	800554a <HAL_SDRAM_SendCommand+0x2a>
 8005544:	7dfb      	ldrb	r3, [r7, #23]
 8005546:	2b05      	cmp	r3, #5
 8005548:	d118      	bne.n	800557c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 ff1e 	bl	800639c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d104      	bne.n	8005572 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2205      	movs	r2, #5
 800556c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005570:	e006      	b.n	8005580 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800557a:	e001      	b.n	8005580 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e000      	b.n	8005582 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3718      	adds	r7, #24
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b02      	cmp	r3, #2
 800559e:	d101      	bne.n	80055a4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80055a0:	2302      	movs	r3, #2
 80055a2:	e016      	b.n	80055d2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d10f      	bne.n	80055d0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 ff29 	bl	8006416 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3708      	adds	r7, #8
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e07b      	b.n	80056e4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d108      	bne.n	8005606 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055fc:	d009      	beq.n	8005612 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	61da      	str	r2, [r3, #28]
 8005604:	e005      	b.n	8005612 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b00      	cmp	r3, #0
 8005622:	d106      	bne.n	8005632 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f885 	bl	800573c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2202      	movs	r2, #2
 8005636:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005648:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005664:	431a      	orrs	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69db      	ldr	r3, [r3, #28]
 8005688:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005696:	ea42 0103 	orr.w	r1, r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	0c1b      	lsrs	r3, r3, #16
 80056b0:	f003 0104 	and.w	r1, r3, #4
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b8:	f003 0210 	and.w	r2, r3, #16
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	430a      	orrs	r2, r1
 80056c2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	69da      	ldr	r2, [r3, #28]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056d2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e01a      	b.n	8005734 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005714:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f81a 	bl	8005750 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b088      	sub	sp, #32
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	4613      	mov	r3, r2
 8005772:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005774:	f7fc fbde 	bl	8001f34 <HAL_GetTick>
 8005778:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800577a:	88fb      	ldrh	r3, [r7, #6]
 800577c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b01      	cmp	r3, #1
 8005788:	d001      	beq.n	800578e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800578a:	2302      	movs	r3, #2
 800578c:	e12a      	b.n	80059e4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <HAL_SPI_Transmit+0x36>
 8005794:	88fb      	ldrh	r3, [r7, #6]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e122      	b.n	80059e4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_SPI_Transmit+0x48>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e11b      	b.n	80059e4 <HAL_SPI_Transmit+0x280>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2203      	movs	r2, #3
 80057b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	88fa      	ldrh	r2, [r7, #6]
 80057cc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	88fa      	ldrh	r2, [r7, #6]
 80057d2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057fa:	d10f      	bne.n	800581c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800580a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800581a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005826:	2b40      	cmp	r3, #64	@ 0x40
 8005828:	d007      	beq.n	800583a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005838:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005842:	d152      	bne.n	80058ea <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <HAL_SPI_Transmit+0xee>
 800584c:	8b7b      	ldrh	r3, [r7, #26]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d145      	bne.n	80058de <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005856:	881a      	ldrh	r2, [r3, #0]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005862:	1c9a      	adds	r2, r3, #2
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800586c:	b29b      	uxth	r3, r3
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005876:	e032      	b.n	80058de <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b02      	cmp	r3, #2
 8005884:	d112      	bne.n	80058ac <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588a:	881a      	ldrh	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005896:	1c9a      	adds	r2, r3, #2
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80058aa:	e018      	b.n	80058de <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058ac:	f7fc fb42 	bl	8001f34 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d803      	bhi.n	80058c4 <HAL_SPI_Transmit+0x160>
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c2:	d102      	bne.n	80058ca <HAL_SPI_Transmit+0x166>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e082      	b.n	80059e4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1c7      	bne.n	8005878 <HAL_SPI_Transmit+0x114>
 80058e8:	e053      	b.n	8005992 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <HAL_SPI_Transmit+0x194>
 80058f2:	8b7b      	ldrh	r3, [r7, #26]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d147      	bne.n	8005988 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	7812      	ldrb	r2, [r2, #0]
 8005904:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800591e:	e033      	b.n	8005988 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b02      	cmp	r3, #2
 800592c:	d113      	bne.n	8005956 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	330c      	adds	r3, #12
 8005938:	7812      	ldrb	r2, [r2, #0]
 800593a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005954:	e018      	b.n	8005988 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005956:	f7fc faed 	bl	8001f34 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d803      	bhi.n	800596e <HAL_SPI_Transmit+0x20a>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800596c:	d102      	bne.n	8005974 <HAL_SPI_Transmit+0x210>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d109      	bne.n	8005988 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e02d      	b.n	80059e4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1c6      	bne.n	8005920 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	6839      	ldr	r1, [r7, #0]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 fbe6 	bl	8006168 <SPI_EndRxTxTransaction>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	617b      	str	r3, [r7, #20]
 80059c4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e000      	b.n	80059e4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80059e2:	2300      	movs	r3, #0
  }
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b088      	sub	sp, #32
 80059f0:	af02      	add	r7, sp, #8
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	603b      	str	r3, [r7, #0]
 80059f8:	4613      	mov	r3, r2
 80059fa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d001      	beq.n	8005a0c <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e104      	b.n	8005c16 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a14:	d112      	bne.n	8005a3c <HAL_SPI_Receive+0x50>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10e      	bne.n	8005a3c <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2204      	movs	r2, #4
 8005a22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005a26:	88fa      	ldrh	r2, [r7, #6]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 f8f3 	bl	8005c1e <HAL_SPI_TransmitReceive>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	e0ec      	b.n	8005c16 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a3c:	f7fc fa7a 	bl	8001f34 <HAL_GetTick>
 8005a40:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <HAL_SPI_Receive+0x62>
 8005a48:	88fb      	ldrh	r3, [r7, #6]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e0e1      	b.n	8005c16 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_SPI_Receive+0x74>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e0da      	b.n	8005c16 <HAL_SPI_Receive+0x22a>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	88fa      	ldrh	r2, [r7, #6]
 8005a86:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aae:	d10f      	bne.n	8005ad0 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005abe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ace:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ada:	2b40      	cmp	r3, #64	@ 0x40
 8005adc:	d007      	beq.n	8005aee <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d170      	bne.n	8005bd8 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005af6:	e035      	b.n	8005b64 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d115      	bne.n	8005b32 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f103 020c 	add.w	r2, r3, #12
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b12:	7812      	ldrb	r2, [r2, #0]
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1c:	1c5a      	adds	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b30:	e018      	b.n	8005b64 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b32:	f7fc f9ff 	bl	8001f34 <HAL_GetTick>
 8005b36:	4602      	mov	r2, r0
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d803      	bhi.n	8005b4a <HAL_SPI_Receive+0x15e>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d102      	bne.n	8005b50 <HAL_SPI_Receive+0x164>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d109      	bne.n	8005b64 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e058      	b.n	8005c16 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1c4      	bne.n	8005af8 <HAL_SPI_Receive+0x10c>
 8005b6e:	e038      	b.n	8005be2 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d113      	bne.n	8005ba6 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	b292      	uxth	r2, r2
 8005b8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b90:	1c9a      	adds	r2, r3, #2
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ba4:	e018      	b.n	8005bd8 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ba6:	f7fc f9c5 	bl	8001f34 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d803      	bhi.n	8005bbe <HAL_SPI_Receive+0x1d2>
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d102      	bne.n	8005bc4 <HAL_SPI_Receive+0x1d8>
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e01e      	b.n	8005c16 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1c6      	bne.n	8005b70 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fa58 	bl	800609c <SPI_EndRxTransaction>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d002      	beq.n	8005bf8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e000      	b.n	8005c16 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005c14:	2300      	movs	r3, #0
  }
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b08a      	sub	sp, #40	@ 0x28
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	60f8      	str	r0, [r7, #12]
 8005c26:	60b9      	str	r1, [r7, #8]
 8005c28:	607a      	str	r2, [r7, #4]
 8005c2a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c30:	f7fc f980 	bl	8001f34 <HAL_GetTick>
 8005c34:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c3c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005c44:	887b      	ldrh	r3, [r7, #2]
 8005c46:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c48:	7ffb      	ldrb	r3, [r7, #31]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d00c      	beq.n	8005c68 <HAL_SPI_TransmitReceive+0x4a>
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c54:	d106      	bne.n	8005c64 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <HAL_SPI_TransmitReceive+0x46>
 8005c5e:	7ffb      	ldrb	r3, [r7, #31]
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d001      	beq.n	8005c68 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005c64:	2302      	movs	r3, #2
 8005c66:	e17f      	b.n	8005f68 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0x5c>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d002      	beq.n	8005c7a <HAL_SPI_TransmitReceive+0x5c>
 8005c74:	887b      	ldrh	r3, [r7, #2]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e174      	b.n	8005f68 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_SPI_TransmitReceive+0x6e>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e16d      	b.n	8005f68 <HAL_SPI_TransmitReceive+0x34a>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d003      	beq.n	8005ca8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2205      	movs	r2, #5
 8005ca4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	887a      	ldrh	r2, [r7, #2]
 8005cb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	887a      	ldrh	r2, [r7, #2]
 8005cbe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	887a      	ldrh	r2, [r7, #2]
 8005cca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	887a      	ldrh	r2, [r7, #2]
 8005cd0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce8:	2b40      	cmp	r3, #64	@ 0x40
 8005cea:	d007      	beq.n	8005cfc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cfa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d04:	d17e      	bne.n	8005e04 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <HAL_SPI_TransmitReceive+0xf6>
 8005d0e:	8afb      	ldrh	r3, [r7, #22]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d16c      	bne.n	8005dee <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d18:	881a      	ldrh	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d24:	1c9a      	adds	r2, r3, #2
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d38:	e059      	b.n	8005dee <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d11b      	bne.n	8005d80 <HAL_SPI_TransmitReceive+0x162>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d016      	beq.n	8005d80 <HAL_SPI_TransmitReceive+0x162>
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d113      	bne.n	8005d80 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d5c:	881a      	ldrh	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d68:	1c9a      	adds	r2, r3, #2
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d119      	bne.n	8005dc2 <HAL_SPI_TransmitReceive+0x1a4>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d014      	beq.n	8005dc2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68da      	ldr	r2, [r3, #12]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da2:	b292      	uxth	r2, r2
 8005da4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005daa:	1c9a      	adds	r2, r3, #2
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	3b01      	subs	r3, #1
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005dc2:	f7fc f8b7 	bl	8001f34 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d80d      	bhi.n	8005dee <HAL_SPI_TransmitReceive+0x1d0>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d009      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e0bc      	b.n	8005f68 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1a0      	bne.n	8005d3a <HAL_SPI_TransmitReceive+0x11c>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d19b      	bne.n	8005d3a <HAL_SPI_TransmitReceive+0x11c>
 8005e02:	e082      	b.n	8005f0a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <HAL_SPI_TransmitReceive+0x1f4>
 8005e0c:	8afb      	ldrh	r3, [r7, #22]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d171      	bne.n	8005ef6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	330c      	adds	r3, #12
 8005e1c:	7812      	ldrb	r2, [r2, #0]
 8005e1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e38:	e05d      	b.n	8005ef6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d11c      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0x264>
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d017      	beq.n	8005e82 <HAL_SPI_TransmitReceive+0x264>
 8005e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d114      	bne.n	8005e82 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	330c      	adds	r3, #12
 8005e62:	7812      	ldrb	r2, [r2, #0]
 8005e64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d119      	bne.n	8005ec4 <HAL_SPI_TransmitReceive+0x2a6>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d014      	beq.n	8005ec4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ec4:	f7fc f836 	bl	8001f34 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d803      	bhi.n	8005edc <HAL_SPI_TransmitReceive+0x2be>
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d102      	bne.n	8005ee2 <HAL_SPI_TransmitReceive+0x2c4>
 8005edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e038      	b.n	8005f68 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d19c      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x21c>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d197      	bne.n	8005e3a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f0a:	6a3a      	ldr	r2, [r7, #32]
 8005f0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 f92a 	bl	8006168 <SPI_EndRxTxTransaction>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d008      	beq.n	8005f2c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e01d      	b.n	8005f68 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10a      	bne.n	8005f4a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f34:	2300      	movs	r3, #0
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	613b      	str	r3, [r7, #16]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	613b      	str	r3, [r7, #16]
 8005f48:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e000      	b.n	8005f68 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005f66:	2300      	movs	r3, #0
  }
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3728      	adds	r7, #40	@ 0x28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f7e:	b2db      	uxtb	r3, r3
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	370c      	adds	r7, #12
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr

08005f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b088      	sub	sp, #32
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	603b      	str	r3, [r7, #0]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f9c:	f7fb ffca 	bl	8001f34 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa4:	1a9b      	subs	r3, r3, r2
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	4413      	add	r3, r2
 8005faa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fac:	f7fb ffc2 	bl	8001f34 <HAL_GetTick>
 8005fb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fb2:	4b39      	ldr	r3, [pc, #228]	@ (8006098 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	015b      	lsls	r3, r3, #5
 8005fb8:	0d1b      	lsrs	r3, r3, #20
 8005fba:	69fa      	ldr	r2, [r7, #28]
 8005fbc:	fb02 f303 	mul.w	r3, r2, r3
 8005fc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fc2:	e054      	b.n	800606e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	d050      	beq.n	800606e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fcc:	f7fb ffb2 	bl	8001f34 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	69fa      	ldr	r2, [r7, #28]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d902      	bls.n	8005fe2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d13d      	bne.n	800605e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ffa:	d111      	bne.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006004:	d004      	beq.n	8006010 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800600e:	d107      	bne.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800601e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006028:	d10f      	bne.n	800604a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006048:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e017      	b.n	800608e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	3b01      	subs	r3, #1
 800606c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4013      	ands	r3, r2
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	429a      	cmp	r2, r3
 800607c:	bf0c      	ite	eq
 800607e:	2301      	moveq	r3, #1
 8006080:	2300      	movne	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	429a      	cmp	r2, r3
 800608a:	d19b      	bne.n	8005fc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3720      	adds	r7, #32
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000058 	.word	0x20000058

0800609c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060b0:	d111      	bne.n	80060d6 <SPI_EndRxTransaction+0x3a>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ba:	d004      	beq.n	80060c6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060c4:	d107      	bne.n	80060d6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060d4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060de:	d12a      	bne.n	8006136 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060e8:	d012      	beq.n	8006110 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2200      	movs	r2, #0
 80060f2:	2180      	movs	r1, #128	@ 0x80
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7ff ff49 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d02d      	beq.n	800615c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006104:	f043 0220 	orr.w	r2, r3, #32
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e026      	b.n	800615e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2200      	movs	r2, #0
 8006118:	2101      	movs	r1, #1
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff ff36 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d01a      	beq.n	800615c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612a:	f043 0220 	orr.w	r2, r3, #32
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e013      	b.n	800615e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2200      	movs	r2, #0
 800613e:	2101      	movs	r1, #1
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f7ff ff23 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006150:	f043 0220 	orr.w	r2, r3, #32
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e000      	b.n	800615e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
	...

08006168 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b088      	sub	sp, #32
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2201      	movs	r2, #1
 800617c:	2102      	movs	r1, #2
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f7ff ff04 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d007      	beq.n	800619a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800618e:	f043 0220 	orr.w	r2, r3, #32
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e032      	b.n	8006200 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800619a:	4b1b      	ldr	r3, [pc, #108]	@ (8006208 <SPI_EndRxTxTransaction+0xa0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a1b      	ldr	r2, [pc, #108]	@ (800620c <SPI_EndRxTxTransaction+0xa4>)
 80061a0:	fba2 2303 	umull	r2, r3, r2, r3
 80061a4:	0d5b      	lsrs	r3, r3, #21
 80061a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80061aa:	fb02 f303 	mul.w	r3, r2, r3
 80061ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061b8:	d112      	bne.n	80061e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	9300      	str	r3, [sp, #0]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2200      	movs	r2, #0
 80061c2:	2180      	movs	r1, #128	@ 0x80
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff fee1 	bl	8005f8c <SPI_WaitFlagStateUntilTimeout>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d016      	beq.n	80061fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d4:	f043 0220 	orr.w	r2, r3, #32
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e00f      	b.n	8006200 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	3b01      	subs	r3, #1
 80061ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f6:	2b80      	cmp	r3, #128	@ 0x80
 80061f8:	d0f2      	beq.n	80061e0 <SPI_EndRxTxTransaction+0x78>
 80061fa:	e000      	b.n	80061fe <SPI_EndRxTxTransaction+0x96>
        break;
 80061fc:	bf00      	nop
  }

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000058 	.word	0x20000058
 800620c:	165e9f81 	.word	0x165e9f81

08006210 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d123      	bne.n	800626a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800622a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	6851      	ldr	r1, [r2, #4]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	6892      	ldr	r2, [r2, #8]
 8006236:	4311      	orrs	r1, r2
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	68d2      	ldr	r2, [r2, #12]
 800623c:	4311      	orrs	r1, r2
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	6912      	ldr	r2, [r2, #16]
 8006242:	4311      	orrs	r1, r2
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	6952      	ldr	r2, [r2, #20]
 8006248:	4311      	orrs	r1, r2
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	6992      	ldr	r2, [r2, #24]
 800624e:	4311      	orrs	r1, r2
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	69d2      	ldr	r2, [r2, #28]
 8006254:	4311      	orrs	r1, r2
 8006256:	683a      	ldr	r2, [r7, #0]
 8006258:	6a12      	ldr	r2, [r2, #32]
 800625a:	4311      	orrs	r1, r2
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006260:	430a      	orrs	r2, r1
 8006262:	431a      	orrs	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	e028      	b.n	80062bc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	69d9      	ldr	r1, [r3, #28]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	4319      	orrs	r1, r3
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006280:	430b      	orrs	r3, r1
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006290:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	6851      	ldr	r1, [r2, #4]
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	6892      	ldr	r2, [r2, #8]
 800629c:	4311      	orrs	r1, r2
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	68d2      	ldr	r2, [r2, #12]
 80062a2:	4311      	orrs	r1, r2
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	6912      	ldr	r2, [r2, #16]
 80062a8:	4311      	orrs	r1, r2
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	6952      	ldr	r2, [r2, #20]
 80062ae:	4311      	orrs	r1, r2
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	6992      	ldr	r2, [r2, #24]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d128      	bne.n	800632e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	1e59      	subs	r1, r3, #1
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	3b01      	subs	r3, #1
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	4319      	orrs	r1, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	4319      	orrs	r1, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	3b01      	subs	r3, #1
 8006304:	031b      	lsls	r3, r3, #12
 8006306:	4319      	orrs	r1, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	3b01      	subs	r3, #1
 800630e:	041b      	lsls	r3, r3, #16
 8006310:	4319      	orrs	r1, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	3b01      	subs	r3, #1
 8006318:	051b      	lsls	r3, r3, #20
 800631a:	4319      	orrs	r1, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	3b01      	subs	r3, #1
 8006322:	061b      	lsls	r3, r3, #24
 8006324:	430b      	orrs	r3, r1
 8006326:	431a      	orrs	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	609a      	str	r2, [r3, #8]
 800632c:	e02f      	b.n	800638e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006336:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	68d2      	ldr	r2, [r2, #12]
 800633e:	3a01      	subs	r2, #1
 8006340:	0311      	lsls	r1, r2, #12
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	6952      	ldr	r2, [r2, #20]
 8006346:	3a01      	subs	r2, #1
 8006348:	0512      	lsls	r2, r2, #20
 800634a:	430a      	orrs	r2, r1
 800634c:	431a      	orrs	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	1e59      	subs	r1, r3, #1
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	3b01      	subs	r3, #1
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	4319      	orrs	r1, r3
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	3b01      	subs	r3, #1
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	4319      	orrs	r1, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	3b01      	subs	r3, #1
 800637a:	041b      	lsls	r3, r3, #16
 800637c:	4319      	orrs	r1, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	699b      	ldr	r3, [r3, #24]
 8006382:	3b01      	subs	r3, #1
 8006384:	061b      	lsls	r3, r3, #24
 8006386:	430b      	orrs	r3, r1
 8006388:	431a      	orrs	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b086      	sub	sp, #24
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	0d9b      	lsrs	r3, r3, #22
 80063b2:	059b      	lsls	r3, r3, #22
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	6811      	ldr	r1, [r2, #0]
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	6852      	ldr	r2, [r2, #4]
 80063bc:	4311      	orrs	r1, r2
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	6892      	ldr	r2, [r2, #8]
 80063c2:	3a01      	subs	r2, #1
 80063c4:	0152      	lsls	r2, r2, #5
 80063c6:	4311      	orrs	r1, r2
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	68d2      	ldr	r2, [r2, #12]
 80063cc:	0252      	lsls	r2, r2, #9
 80063ce:	430a      	orrs	r2, r1
 80063d0:	431a      	orrs	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80063d6:	f7fb fdad 	bl	8001f34 <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80063dc:	e010      	b.n	8006400 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e4:	d00c      	beq.n	8006400 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <FMC_SDRAM_SendCommand+0x60>
 80063ec:	f7fb fda2 	bl	8001f34 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d201      	bcs.n	8006400 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	e006      	b.n	800640e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f003 0320 	and.w	r3, r3, #32
 8006408:	2b20      	cmp	r3, #32
 800640a:	d0e8      	beq.n	80063de <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3718      	adds	r7, #24
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	695b      	ldr	r3, [r3, #20]
 8006424:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006428:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	0052      	lsls	r2, r2, #1
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006444:	b084      	sub	sp, #16
 8006446:	b580      	push	{r7, lr}
 8006448:	b084      	sub	sp, #16
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
 800644e:	f107 001c 	add.w	r0, r7, #28
 8006452:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006456:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800645a:	2b01      	cmp	r3, #1
 800645c:	d123      	bne.n	80064a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006462:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006472:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006486:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800648a:	2b01      	cmp	r3, #1
 800648c:	d105      	bne.n	800649a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f001 fae8 	bl	8007a70 <USB_CoreReset>
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
 80064a4:	e01b      	b.n	80064de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f001 fadc 	bl	8007a70 <USB_CoreReset>
 80064b8:	4603      	mov	r3, r0
 80064ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d106      	bne.n	80064d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80064d0:	e005      	b.n	80064de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80064de:	7fbb      	ldrb	r3, [r7, #30]
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d10b      	bne.n	80064fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f043 0206 	orr.w	r2, r3, #6
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f043 0220 	orr.w	r2, r3, #32
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006508:	b004      	add	sp, #16
 800650a:	4770      	bx	lr

0800650c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	4613      	mov	r3, r2
 8006518:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d165      	bne.n	80065ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	4a41      	ldr	r2, [pc, #260]	@ (8006628 <USB_SetTurnaroundTime+0x11c>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d906      	bls.n	8006536 <USB_SetTurnaroundTime+0x2a>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4a40      	ldr	r2, [pc, #256]	@ (800662c <USB_SetTurnaroundTime+0x120>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d202      	bcs.n	8006536 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006530:	230f      	movs	r3, #15
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	e062      	b.n	80065fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4a3c      	ldr	r2, [pc, #240]	@ (800662c <USB_SetTurnaroundTime+0x120>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d306      	bcc.n	800654c <USB_SetTurnaroundTime+0x40>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	4a3b      	ldr	r2, [pc, #236]	@ (8006630 <USB_SetTurnaroundTime+0x124>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d202      	bcs.n	800654c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006546:	230e      	movs	r3, #14
 8006548:	617b      	str	r3, [r7, #20]
 800654a:	e057      	b.n	80065fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	4a38      	ldr	r2, [pc, #224]	@ (8006630 <USB_SetTurnaroundTime+0x124>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d306      	bcc.n	8006562 <USB_SetTurnaroundTime+0x56>
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4a37      	ldr	r2, [pc, #220]	@ (8006634 <USB_SetTurnaroundTime+0x128>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d202      	bcs.n	8006562 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800655c:	230d      	movs	r3, #13
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e04c      	b.n	80065fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	4a33      	ldr	r2, [pc, #204]	@ (8006634 <USB_SetTurnaroundTime+0x128>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d306      	bcc.n	8006578 <USB_SetTurnaroundTime+0x6c>
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4a32      	ldr	r2, [pc, #200]	@ (8006638 <USB_SetTurnaroundTime+0x12c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d802      	bhi.n	8006578 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006572:	230c      	movs	r3, #12
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	e041      	b.n	80065fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	4a2f      	ldr	r2, [pc, #188]	@ (8006638 <USB_SetTurnaroundTime+0x12c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d906      	bls.n	800658e <USB_SetTurnaroundTime+0x82>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4a2e      	ldr	r2, [pc, #184]	@ (800663c <USB_SetTurnaroundTime+0x130>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d802      	bhi.n	800658e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006588:	230b      	movs	r3, #11
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e036      	b.n	80065fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	4a2a      	ldr	r2, [pc, #168]	@ (800663c <USB_SetTurnaroundTime+0x130>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d906      	bls.n	80065a4 <USB_SetTurnaroundTime+0x98>
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	4a29      	ldr	r2, [pc, #164]	@ (8006640 <USB_SetTurnaroundTime+0x134>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d802      	bhi.n	80065a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800659e:	230a      	movs	r3, #10
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e02b      	b.n	80065fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4a26      	ldr	r2, [pc, #152]	@ (8006640 <USB_SetTurnaroundTime+0x134>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d906      	bls.n	80065ba <USB_SetTurnaroundTime+0xae>
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	4a25      	ldr	r2, [pc, #148]	@ (8006644 <USB_SetTurnaroundTime+0x138>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d202      	bcs.n	80065ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80065b4:	2309      	movs	r3, #9
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	e020      	b.n	80065fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	4a21      	ldr	r2, [pc, #132]	@ (8006644 <USB_SetTurnaroundTime+0x138>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d306      	bcc.n	80065d0 <USB_SetTurnaroundTime+0xc4>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	4a20      	ldr	r2, [pc, #128]	@ (8006648 <USB_SetTurnaroundTime+0x13c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d802      	bhi.n	80065d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80065ca:	2308      	movs	r3, #8
 80065cc:	617b      	str	r3, [r7, #20]
 80065ce:	e015      	b.n	80065fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	4a1d      	ldr	r2, [pc, #116]	@ (8006648 <USB_SetTurnaroundTime+0x13c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d906      	bls.n	80065e6 <USB_SetTurnaroundTime+0xda>
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	4a1c      	ldr	r2, [pc, #112]	@ (800664c <USB_SetTurnaroundTime+0x140>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d202      	bcs.n	80065e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80065e0:	2307      	movs	r3, #7
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	e00a      	b.n	80065fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80065e6:	2306      	movs	r3, #6
 80065e8:	617b      	str	r3, [r7, #20]
 80065ea:	e007      	b.n	80065fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065ec:	79fb      	ldrb	r3, [r7, #7]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d102      	bne.n	80065f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065f2:	2309      	movs	r3, #9
 80065f4:	617b      	str	r3, [r7, #20]
 80065f6:	e001      	b.n	80065fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065f8:	2309      	movs	r3, #9
 80065fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	029b      	lsls	r3, r3, #10
 8006610:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006614:	431a      	orrs	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	371c      	adds	r7, #28
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	00d8acbf 	.word	0x00d8acbf
 800662c:	00e4e1c0 	.word	0x00e4e1c0
 8006630:	00f42400 	.word	0x00f42400
 8006634:	01067380 	.word	0x01067380
 8006638:	011a499f 	.word	0x011a499f
 800663c:	01312cff 	.word	0x01312cff
 8006640:	014ca43f 	.word	0x014ca43f
 8006644:	016e3600 	.word	0x016e3600
 8006648:	01a6ab1f 	.word	0x01a6ab1f
 800664c:	01e84800 	.word	0x01e84800

08006650 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f043 0201 	orr.w	r2, r3, #1
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f023 0201 	bic.w	r2, r3, #1
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d115      	bne.n	80066e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066c2:	200a      	movs	r0, #10
 80066c4:	f7fb fc42 	bl	8001f4c <HAL_Delay>
      ms += 10U;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	330a      	adds	r3, #10
 80066cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f001 f93f 	bl	8007952 <USB_GetMode>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d01e      	beq.n	8006718 <USB_SetCurrentMode+0x84>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80066de:	d9f0      	bls.n	80066c2 <USB_SetCurrentMode+0x2e>
 80066e0:	e01a      	b.n	8006718 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066e2:	78fb      	ldrb	r3, [r7, #3]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d115      	bne.n	8006714 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066f4:	200a      	movs	r0, #10
 80066f6:	f7fb fc29 	bl	8001f4c <HAL_Delay>
      ms += 10U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	330a      	adds	r3, #10
 80066fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 f926 	bl	8007952 <USB_GetMode>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <USB_SetCurrentMode+0x84>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006710:	d9f0      	bls.n	80066f4 <USB_SetCurrentMode+0x60>
 8006712:	e001      	b.n	8006718 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e005      	b.n	8006724 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2bc8      	cmp	r3, #200	@ 0xc8
 800671c:	d101      	bne.n	8006722 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e000      	b.n	8006724 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800672c:	b084      	sub	sp, #16
 800672e:	b580      	push	{r7, lr}
 8006730:	b086      	sub	sp, #24
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800673a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800673e:	2300      	movs	r3, #0
 8006740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006746:	2300      	movs	r3, #0
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	e009      	b.n	8006760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	3340      	adds	r3, #64	@ 0x40
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	2200      	movs	r2, #0
 8006758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	3301      	adds	r3, #1
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	2b0e      	cmp	r3, #14
 8006764:	d9f2      	bls.n	800674c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006766:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800676a:	2b00      	cmp	r3, #0
 800676c:	d11c      	bne.n	80067a8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800677c:	f043 0302 	orr.w	r3, r3, #2
 8006780:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006786:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006792:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800679e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80067a6:	e00b      	b.n	80067c0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067c6:	461a      	mov	r2, r3
 80067c8:	2300      	movs	r3, #0
 80067ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d10d      	bne.n	80067f0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067dc:	2100      	movs	r1, #0
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f968 	bl	8006ab4 <USB_SetDevSpeed>
 80067e4:	e008      	b.n	80067f8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067e6:	2101      	movs	r1, #1
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 f963 	bl	8006ab4 <USB_SetDevSpeed>
 80067ee:	e003      	b.n	80067f8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067f0:	2103      	movs	r1, #3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f95e 	bl	8006ab4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067f8:	2110      	movs	r1, #16
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f8fa 	bl	80069f4 <USB_FlushTxFifo>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f924 	bl	8006a58 <USB_FlushRxFifo>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006820:	461a      	mov	r2, r3
 8006822:	2300      	movs	r3, #0
 8006824:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800682c:	461a      	mov	r2, r3
 800682e:	2300      	movs	r3, #0
 8006830:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006838:	461a      	mov	r2, r3
 800683a:	2300      	movs	r3, #0
 800683c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800683e:	2300      	movs	r3, #0
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	e043      	b.n	80068cc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006856:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800685a:	d118      	bne.n	800688e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d10a      	bne.n	8006878 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800686e:	461a      	mov	r2, r3
 8006870:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e013      	b.n	80068a0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006884:	461a      	mov	r2, r3
 8006886:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	e008      	b.n	80068a0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689a:	461a      	mov	r2, r3
 800689c:	2300      	movs	r3, #0
 800689e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ac:	461a      	mov	r2, r3
 80068ae:	2300      	movs	r3, #0
 80068b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068be:	461a      	mov	r2, r3
 80068c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	3301      	adds	r3, #1
 80068ca:	613b      	str	r3, [r7, #16]
 80068cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80068d0:	461a      	mov	r2, r3
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d3b5      	bcc.n	8006844 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068d8:	2300      	movs	r3, #0
 80068da:	613b      	str	r3, [r7, #16]
 80068dc:	e043      	b.n	8006966 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	015a      	lsls	r2, r3, #5
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4413      	add	r3, r2
 80068e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068f4:	d118      	bne.n	8006928 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006908:	461a      	mov	r2, r3
 800690a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800690e:	6013      	str	r3, [r2, #0]
 8006910:	e013      	b.n	800693a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691e:	461a      	mov	r2, r3
 8006920:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e008      	b.n	800693a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006934:	461a      	mov	r2, r3
 8006936:	2300      	movs	r3, #0
 8006938:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006946:	461a      	mov	r2, r3
 8006948:	2300      	movs	r3, #0
 800694a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006958:	461a      	mov	r2, r3
 800695a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800695e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	3301      	adds	r3, #1
 8006964:	613b      	str	r3, [r7, #16]
 8006966:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800696a:	461a      	mov	r2, r3
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4293      	cmp	r3, r2
 8006970:	d3b5      	bcc.n	80068de <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006984:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006992:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006994:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006998:	2b00      	cmp	r3, #0
 800699a:	d105      	bne.n	80069a8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	f043 0210 	orr.w	r2, r3, #16
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699a      	ldr	r2, [r3, #24]
 80069ac:	4b10      	ldr	r3, [pc, #64]	@ (80069f0 <USB_DevInit+0x2c4>)
 80069ae:	4313      	orrs	r3, r2
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d005      	beq.n	80069c8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	f043 0208 	orr.w	r2, r3, #8
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d107      	bne.n	80069e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069d8:	f043 0304 	orr.w	r3, r3, #4
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069ec:	b004      	add	sp, #16
 80069ee:	4770      	bx	lr
 80069f0:	803c3800 	.word	0x803c3800

080069f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3301      	adds	r3, #1
 8006a06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a0e:	d901      	bls.n	8006a14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e01b      	b.n	8006a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	daf2      	bge.n	8006a02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	019b      	lsls	r3, r3, #6
 8006a24:	f043 0220 	orr.w	r2, r3, #32
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a38:	d901      	bls.n	8006a3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e006      	b.n	8006a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d0f0      	beq.n	8006a2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	3301      	adds	r3, #1
 8006a68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a70:	d901      	bls.n	8006a76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e018      	b.n	8006aa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	daf2      	bge.n	8006a64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2210      	movs	r2, #16
 8006a86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a94:	d901      	bls.n	8006a9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e006      	b.n	8006aa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0310 	and.w	r3, r3, #16
 8006aa2:	2b10      	cmp	r3, #16
 8006aa4:	d0f0      	beq.n	8006a88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	78fb      	ldrb	r3, [r7, #3]
 8006ace:	68f9      	ldr	r1, [r7, #12]
 8006ad0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b087      	sub	sp, #28
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	f003 0306 	and.w	r3, r3, #6
 8006afe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d102      	bne.n	8006b0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006b06:	2300      	movs	r3, #0
 8006b08:	75fb      	strb	r3, [r7, #23]
 8006b0a:	e00a      	b.n	8006b22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d002      	beq.n	8006b18 <USB_GetDevSpeed+0x32>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b06      	cmp	r3, #6
 8006b16:	d102      	bne.n	8006b1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006b18:	2302      	movs	r3, #2
 8006b1a:	75fb      	strb	r3, [r7, #23]
 8006b1c:	e001      	b.n	8006b22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006b1e:	230f      	movs	r3, #15
 8006b20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	371c      	adds	r7, #28
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d13a      	bne.n	8006bc2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b52:	69da      	ldr	r2, [r3, #28]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	68f9      	ldr	r1, [r7, #12]
 8006b66:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d155      	bne.n	8006c30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	791b      	ldrb	r3, [r3, #4]
 8006b9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ba0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	059b      	lsls	r3, r3, #22
 8006ba6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	e036      	b.n	8006c30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc8:	69da      	ldr	r2, [r3, #28]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006bd8:	041b      	lsls	r3, r3, #16
 8006bda:	68f9      	ldr	r1, [r7, #12]
 8006bdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006be0:	4313      	orrs	r3, r2
 8006be2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d11a      	bne.n	8006c30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	015a      	lsls	r2, r3, #5
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4413      	add	r3, r2
 8006c02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	791b      	ldrb	r3, [r3, #4]
 8006c14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006c16:	430b      	orrs	r3, r1
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	0151      	lsls	r1, r2, #5
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	440a      	add	r2, r1
 8006c22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3714      	adds	r7, #20
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
	...

08006c40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d161      	bne.n	8006d20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c72:	d11f      	bne.n	8006cb4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	0151      	lsls	r1, r2, #5
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	440a      	add	r2, r1
 8006c8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	68fa      	ldr	r2, [r7, #12]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	f003 030f 	and.w	r3, r3, #15
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cde:	69da      	ldr	r2, [r3, #28]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	f003 030f 	and.w	r3, r3, #15
 8006ce8:	2101      	movs	r1, #1
 8006cea:	fa01 f303 	lsl.w	r3, r1, r3
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	43db      	mvns	r3, r3
 8006cf2:	68f9      	ldr	r1, [r7, #12]
 8006cf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	0159      	lsls	r1, r3, #5
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	440b      	add	r3, r1
 8006d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d16:	4619      	mov	r1, r3
 8006d18:	4b35      	ldr	r3, [pc, #212]	@ (8006df0 <USB_DeactivateEndpoint+0x1b0>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	600b      	str	r3, [r1, #0]
 8006d1e:	e060      	b.n	8006de2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d32:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d36:	d11f      	bne.n	8006d78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	015a      	lsls	r2, r3, #5
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4413      	add	r3, r2
 8006d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	0151      	lsls	r1, r2, #5
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	440a      	add	r2, r1
 8006d4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68ba      	ldr	r2, [r7, #8]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d72:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	2101      	movs	r1, #1
 8006d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8e:	041b      	lsls	r3, r3, #16
 8006d90:	43db      	mvns	r3, r3
 8006d92:	68f9      	ldr	r1, [r7, #12]
 8006d94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d98:	4013      	ands	r3, r2
 8006d9a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	f003 030f 	and.w	r3, r3, #15
 8006dac:	2101      	movs	r1, #1
 8006dae:	fa01 f303 	lsl.w	r3, r1, r3
 8006db2:	041b      	lsls	r3, r3, #16
 8006db4:	43db      	mvns	r3, r3
 8006db6:	68f9      	ldr	r1, [r7, #12]
 8006db8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	015a      	lsls	r2, r3, #5
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	0159      	lsls	r1, r3, #5
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	440b      	add	r3, r1
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4b05      	ldr	r3, [pc, #20]	@ (8006df4 <USB_DeactivateEndpoint+0x1b4>)
 8006dde:	4013      	ands	r3, r2
 8006de0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	ec337800 	.word	0xec337800
 8006df4:	eff37800 	.word	0xeff37800

08006df8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08a      	sub	sp, #40	@ 0x28
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	4613      	mov	r3, r2
 8006e04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	f040 817f 	bne.w	8007118 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d132      	bne.n	8006e88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e3c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e40:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	0151      	lsls	r1, r2, #5
 8006e58:	69fa      	ldr	r2, [r7, #28]
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	69fa      	ldr	r2, [r7, #28]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e80:	0cdb      	lsrs	r3, r3, #19
 8006e82:	04db      	lsls	r3, r3, #19
 8006e84:	6113      	str	r3, [r2, #16]
 8006e86:	e097      	b.n	8006fb8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	0151      	lsls	r1, r2, #5
 8006e9a:	69fa      	ldr	r2, [r7, #28]
 8006e9c:	440a      	add	r2, r1
 8006e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ea2:	0cdb      	lsrs	r3, r3, #19
 8006ea4:	04db      	lsls	r3, r3, #19
 8006ea6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	0151      	lsls	r1, r2, #5
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	440a      	add	r2, r1
 8006ebe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ec2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ec6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006eca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d11a      	bne.n	8006f08 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	691a      	ldr	r2, [r3, #16]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d903      	bls.n	8006ee6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	69ba      	ldr	r2, [r7, #24]
 8006ef6:	0151      	lsls	r1, r2, #5
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	440a      	add	r2, r1
 8006efc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f04:	6113      	str	r3, [r2, #16]
 8006f06:	e044      	b.n	8006f92 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	691a      	ldr	r2, [r3, #16]
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	4413      	add	r3, r2
 8006f12:	1e5a      	subs	r2, r3, #1
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f2a:	691a      	ldr	r2, [r3, #16]
 8006f2c:	8afb      	ldrh	r3, [r7, #22]
 8006f2e:	04d9      	lsls	r1, r3, #19
 8006f30:	4ba4      	ldr	r3, [pc, #656]	@ (80071c4 <USB_EPStartXfer+0x3cc>)
 8006f32:	400b      	ands	r3, r1
 8006f34:	69b9      	ldr	r1, [r7, #24]
 8006f36:	0148      	lsls	r0, r1, #5
 8006f38:	69f9      	ldr	r1, [r7, #28]
 8006f3a:	4401      	add	r1, r0
 8006f3c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f40:	4313      	orrs	r3, r2
 8006f42:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	791b      	ldrb	r3, [r3, #4]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d122      	bne.n	8006f92 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f66:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006f6a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f78:	691a      	ldr	r2, [r3, #16]
 8006f7a:	8afb      	ldrh	r3, [r7, #22]
 8006f7c:	075b      	lsls	r3, r3, #29
 8006f7e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006f82:	69b9      	ldr	r1, [r7, #24]
 8006f84:	0148      	lsls	r0, r1, #5
 8006f86:	69f9      	ldr	r1, [r7, #28]
 8006f88:	4401      	add	r1, r0
 8006f8a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	015a      	lsls	r2, r3, #5
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	4413      	add	r3, r2
 8006f9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f9e:	691a      	ldr	r2, [r3, #16]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa8:	69b9      	ldr	r1, [r7, #24]
 8006faa:	0148      	lsls	r0, r1, #5
 8006fac:	69f9      	ldr	r1, [r7, #28]
 8006fae:	4401      	add	r1, r0
 8006fb0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006fb8:	79fb      	ldrb	r3, [r7, #7]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d14b      	bne.n	8007056 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	791b      	ldrb	r3, [r3, #4]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d128      	bne.n	8007034 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d110      	bne.n	8007014 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800700c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	e00f      	b.n	8007034 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	440a      	add	r2, r1
 800702a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800702e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007032:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800704e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007052:	6013      	str	r3, [r2, #0]
 8007054:	e166      	b.n	8007324 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	015a      	lsls	r2, r3, #5
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	4413      	add	r3, r2
 800705e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69ba      	ldr	r2, [r7, #24]
 8007066:	0151      	lsls	r1, r2, #5
 8007068:	69fa      	ldr	r2, [r7, #28]
 800706a:	440a      	add	r2, r1
 800706c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007070:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007074:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	791b      	ldrb	r3, [r3, #4]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d015      	beq.n	80070aa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 814e 	beq.w	8007324 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800708e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	f003 030f 	and.w	r3, r3, #15
 8007098:	2101      	movs	r1, #1
 800709a:	fa01 f303 	lsl.w	r3, r1, r3
 800709e:	69f9      	ldr	r1, [r7, #28]
 80070a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070a4:	4313      	orrs	r3, r2
 80070a6:	634b      	str	r3, [r1, #52]	@ 0x34
 80070a8:	e13c      	b.n	8007324 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d110      	bne.n	80070dc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	0151      	lsls	r1, r2, #5
 80070cc:	69fa      	ldr	r2, [r7, #28]
 80070ce:	440a      	add	r2, r1
 80070d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	e00f      	b.n	80070fc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	0151      	lsls	r1, r2, #5
 80070ee:	69fa      	ldr	r2, [r7, #28]
 80070f0:	440a      	add	r2, r1
 80070f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070fa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	68d9      	ldr	r1, [r3, #12]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	781a      	ldrb	r2, [r3, #0]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	b298      	uxth	r0, r3
 800710a:	79fb      	ldrb	r3, [r7, #7]
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	4603      	mov	r3, r0
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 f9b9 	bl	8007488 <USB_WritePacket>
 8007116:	e105      	b.n	8007324 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007132:	0cdb      	lsrs	r3, r3, #19
 8007134:	04db      	lsls	r3, r3, #19
 8007136:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007152:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007156:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800715a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d132      	bne.n	80071c8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d003      	beq.n	8007172 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007190:	69b9      	ldr	r1, [r7, #24]
 8007192:	0148      	lsls	r0, r1, #5
 8007194:	69f9      	ldr	r1, [r7, #28]
 8007196:	4401      	add	r1, r0
 8007198:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800719c:	4313      	orrs	r3, r2
 800719e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	0151      	lsls	r1, r2, #5
 80071b2:	69fa      	ldr	r2, [r7, #28]
 80071b4:	440a      	add	r2, r1
 80071b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071be:	6113      	str	r3, [r2, #16]
 80071c0:	e062      	b.n	8007288 <USB_EPStartXfer+0x490>
 80071c2:	bf00      	nop
 80071c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d123      	bne.n	8007218 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071dc:	691a      	ldr	r2, [r3, #16]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071e6:	69b9      	ldr	r1, [r7, #24]
 80071e8:	0148      	lsls	r0, r1, #5
 80071ea:	69f9      	ldr	r1, [r7, #28]
 80071ec:	4401      	add	r1, r0
 80071ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80071f2:	4313      	orrs	r3, r2
 80071f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	440a      	add	r2, r1
 800720c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007210:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007214:	6113      	str	r3, [r2, #16]
 8007216:	e037      	b.n	8007288 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	691a      	ldr	r2, [r3, #16]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	4413      	add	r3, r2
 8007222:	1e5a      	subs	r2, r3, #1
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	fbb2 f3f3 	udiv	r3, r2, r3
 800722c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	8afa      	ldrh	r2, [r7, #22]
 8007234:	fb03 f202 	mul.w	r2, r3, r2
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007248:	691a      	ldr	r2, [r3, #16]
 800724a:	8afb      	ldrh	r3, [r7, #22]
 800724c:	04d9      	lsls	r1, r3, #19
 800724e:	4b38      	ldr	r3, [pc, #224]	@ (8007330 <USB_EPStartXfer+0x538>)
 8007250:	400b      	ands	r3, r1
 8007252:	69b9      	ldr	r1, [r7, #24]
 8007254:	0148      	lsls	r0, r1, #5
 8007256:	69f9      	ldr	r1, [r7, #28]
 8007258:	4401      	add	r1, r0
 800725a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800725e:	4313      	orrs	r3, r2
 8007260:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800726e:	691a      	ldr	r2, [r3, #16]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007278:	69b9      	ldr	r1, [r7, #24]
 800727a:	0148      	lsls	r0, r1, #5
 800727c:	69f9      	ldr	r1, [r7, #28]
 800727e:	4401      	add	r1, r0
 8007280:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007284:	4313      	orrs	r3, r2
 8007286:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007288:	79fb      	ldrb	r3, [r7, #7]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d10d      	bne.n	80072aa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d009      	beq.n	80072aa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	68d9      	ldr	r1, [r3, #12]
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a6:	460a      	mov	r2, r1
 80072a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	791b      	ldrb	r3, [r3, #4]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d128      	bne.n	8007304 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d110      	bne.n	80072e4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	e00f      	b.n	8007304 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007302:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	440a      	add	r2, r1
 800731a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800731e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007322:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	1ff80000 	.word	0x1ff80000

08007334 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007334:	b480      	push	{r7}
 8007336:	b087      	sub	sp, #28
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	2b01      	cmp	r3, #1
 8007350:	d14a      	bne.n	80073e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007366:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800736a:	f040 8086 	bne.w	800747a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	7812      	ldrb	r2, [r2, #0]
 8007382:	0151      	lsls	r1, r2, #5
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	440a      	add	r2, r1
 8007388:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800738c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007390:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	7812      	ldrb	r2, [r2, #0]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d902      	bls.n	80073cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	75fb      	strb	r3, [r7, #23]
          break;
 80073ca:	e056      	b.n	800747a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073e4:	d0e7      	beq.n	80073b6 <USB_EPStopXfer+0x82>
 80073e6:	e048      	b.n	800747a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007400:	d13b      	bne.n	800747a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	7812      	ldrb	r2, [r2, #0]
 8007416:	0151      	lsls	r1, r2, #5
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	440a      	add	r2, r1
 800741c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007420:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007424:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	7812      	ldrb	r2, [r2, #0]
 800743a:	0151      	lsls	r1, r2, #5
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	440a      	add	r2, r1
 8007440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007444:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007448:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	3301      	adds	r3, #1
 800744e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007456:	4293      	cmp	r3, r2
 8007458:	d902      	bls.n	8007460 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	75fb      	strb	r3, [r7, #23]
          break;
 800745e:	e00c      	b.n	800747a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007474:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007478:	d0e7      	beq.n	800744a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800747a:	7dfb      	ldrb	r3, [r7, #23]
}
 800747c:	4618      	mov	r0, r3
 800747e:	371c      	adds	r7, #28
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007488:	b480      	push	{r7}
 800748a:	b089      	sub	sp, #36	@ 0x24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	4611      	mov	r1, r2
 8007494:	461a      	mov	r2, r3
 8007496:	460b      	mov	r3, r1
 8007498:	71fb      	strb	r3, [r7, #7]
 800749a:	4613      	mov	r3, r2
 800749c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80074a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d123      	bne.n	80074f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80074ae:	88bb      	ldrh	r3, [r7, #4]
 80074b0:	3303      	adds	r3, #3
 80074b2:	089b      	lsrs	r3, r3, #2
 80074b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80074b6:	2300      	movs	r3, #0
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e018      	b.n	80074ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80074bc:	79fb      	ldrb	r3, [r7, #7]
 80074be:	031a      	lsls	r2, r3, #12
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074c8:	461a      	mov	r2, r3
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	3301      	adds	r3, #1
 80074d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	3301      	adds	r3, #1
 80074da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	3301      	adds	r3, #1
 80074e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	3301      	adds	r3, #1
 80074e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	3301      	adds	r3, #1
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d3e2      	bcc.n	80074bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3724      	adds	r7, #36	@ 0x24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007504:	b480      	push	{r7}
 8007506:	b08b      	sub	sp, #44	@ 0x2c
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800751a:	88fb      	ldrh	r3, [r7, #6]
 800751c:	089b      	lsrs	r3, r3, #2
 800751e:	b29b      	uxth	r3, r3
 8007520:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	f003 0303 	and.w	r3, r3, #3
 8007528:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800752a:	2300      	movs	r3, #0
 800752c:	623b      	str	r3, [r7, #32]
 800752e:	e014      	b.n	800755a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	601a      	str	r2, [r3, #0]
    pDest++;
 800753c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753e:	3301      	adds	r3, #1
 8007540:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007544:	3301      	adds	r3, #1
 8007546:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754a:	3301      	adds	r3, #1
 800754c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	3301      	adds	r3, #1
 8007552:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	3301      	adds	r3, #1
 8007558:	623b      	str	r3, [r7, #32]
 800755a:	6a3a      	ldr	r2, [r7, #32]
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	429a      	cmp	r2, r3
 8007560:	d3e6      	bcc.n	8007530 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007562:	8bfb      	ldrh	r3, [r7, #30]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d01e      	beq.n	80075a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007572:	461a      	mov	r2, r3
 8007574:	f107 0310 	add.w	r3, r7, #16
 8007578:	6812      	ldr	r2, [r2, #0]
 800757a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	6a3b      	ldr	r3, [r7, #32]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	fa22 f303 	lsr.w	r3, r2, r3
 8007588:	b2da      	uxtb	r2, r3
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	701a      	strb	r2, [r3, #0]
      i++;
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	3301      	adds	r3, #1
 8007592:	623b      	str	r3, [r7, #32]
      pDest++;
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	3301      	adds	r3, #1
 8007598:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800759a:	8bfb      	ldrh	r3, [r7, #30]
 800759c:	3b01      	subs	r3, #1
 800759e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075a0:	8bfb      	ldrh	r3, [r7, #30]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1ea      	bne.n	800757c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	372c      	adds	r7, #44	@ 0x2c
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	785b      	ldrb	r3, [r3, #1]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d12c      	bne.n	800762a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	015a      	lsls	r2, r3, #5
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	db12      	blt.n	8007608 <USB_EPSetStall+0x54>
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00f      	beq.n	8007608 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007602:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007606:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	440a      	add	r2, r1
 800761e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007622:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	e02b      	b.n	8007682 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	db12      	blt.n	8007662 <USB_EPSetStall+0xae>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00f      	beq.n	8007662 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	0151      	lsls	r1, r2, #5
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	440a      	add	r2, r1
 8007658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800765c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007660:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	440a      	add	r2, r1
 8007678:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800767c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007680:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d128      	bne.n	80076fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	0151      	lsls	r1, r2, #5
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	440a      	add	r2, r1
 80076c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80076ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	791b      	ldrb	r3, [r3, #4]
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d003      	beq.n	80076dc <USB_EPClearStall+0x4c>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	791b      	ldrb	r3, [r3, #4]
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d138      	bne.n	800774e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	0151      	lsls	r1, r2, #5
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	440a      	add	r2, r1
 80076f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076fa:	6013      	str	r3, [r2, #0]
 80076fc:	e027      	b.n	800774e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	440a      	add	r2, r1
 8007714:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007718:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800771c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	791b      	ldrb	r3, [r3, #4]
 8007722:	2b03      	cmp	r3, #3
 8007724:	d003      	beq.n	800772e <USB_EPClearStall+0x9e>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	791b      	ldrb	r3, [r3, #4]
 800772a:	2b02      	cmp	r3, #2
 800772c:	d10f      	bne.n	800774e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	440a      	add	r2, r1
 8007744:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800774c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800777a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800777e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007790:	68f9      	ldr	r1, [r7, #12]
 8007792:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007796:	4313      	orrs	r3, r2
 8007798:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80077c2:	f023 0303 	bic.w	r3, r3, #3
 80077c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80077d6:	f023 0302 	bic.w	r3, r3, #2
 80077da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b085      	sub	sp, #20
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007804:	f023 0303 	bic.w	r3, r3, #3
 8007808:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007818:	f043 0302 	orr.w	r3, r3, #2
 800781c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	4013      	ands	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007844:	68fb      	ldr	r3, [r7, #12]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3714      	adds	r7, #20
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007852:	b480      	push	{r7}
 8007854:	b085      	sub	sp, #20
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	4013      	ands	r3, r2
 8007874:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	0c1b      	lsrs	r3, r3, #16
}
 800787a:	4618      	mov	r0, r3
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr

08007886 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007886:	b480      	push	{r7}
 8007888:	b085      	sub	sp, #20
 800788a:	af00      	add	r7, sp, #0
 800788c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078a2:	69db      	ldr	r3, [r3, #28]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	4013      	ands	r3, r2
 80078a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	b29b      	uxth	r3, r3
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	460b      	mov	r3, r1
 80078c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	015a      	lsls	r2, r3, #5
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	4413      	add	r3, r2
 80078d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	68ba      	ldr	r2, [r7, #8]
 80078e4:	4013      	ands	r3, r2
 80078e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80078e8:	68bb      	ldr	r3, [r7, #8]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3714      	adds	r7, #20
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b087      	sub	sp, #28
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
 80078fe:	460b      	mov	r3, r1
 8007900:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007918:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800791a:	78fb      	ldrb	r3, [r7, #3]
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	fa22 f303 	lsr.w	r3, r2, r3
 8007926:	01db      	lsls	r3, r3, #7
 8007928:	b2db      	uxtb	r3, r3
 800792a:	693a      	ldr	r2, [r7, #16]
 800792c:	4313      	orrs	r3, r2
 800792e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4013      	ands	r3, r2
 8007942:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007944:	68bb      	ldr	r3, [r7, #8]
}
 8007946:	4618      	mov	r0, r3
 8007948:	371c      	adds	r7, #28
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007952:	b480      	push	{r7}
 8007954:	b083      	sub	sp, #12
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	f003 0301 	and.w	r3, r3, #1
}
 8007962:	4618      	mov	r0, r3
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr

0800796e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800796e:	b480      	push	{r7}
 8007970:	b085      	sub	sp, #20
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007988:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800798c:	f023 0307 	bic.w	r3, r3, #7
 8007990:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	460b      	mov	r3, r1
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	333c      	adds	r3, #60	@ 0x3c
 80079ca:	3304      	adds	r3, #4
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	4a26      	ldr	r2, [pc, #152]	@ (8007a6c <USB_EP0_OutStart+0xb8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d90a      	bls.n	80079ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079e8:	d101      	bne.n	80079ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	e037      	b.n	8007a5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079f4:	461a      	mov	r2, r3
 80079f6:	2300      	movs	r3, #0
 80079f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007a0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a1c:	f043 0318 	orr.w	r3, r3, #24
 8007a20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a28:	691b      	ldr	r3, [r3, #16]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a30:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007a34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007a36:	7afb      	ldrb	r3, [r7, #11]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d10f      	bne.n	8007a5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a42:	461a      	mov	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a56:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007a5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	371c      	adds	r7, #28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	4f54300a 	.word	0x4f54300a

08007a70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a88:	d901      	bls.n	8007a8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e01b      	b.n	8007ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	daf2      	bge.n	8007a7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	f043 0201 	orr.w	r2, r3, #1
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ab2:	d901      	bls.n	8007ab8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e006      	b.n	8007ac6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	691b      	ldr	r3, [r3, #16]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d0f0      	beq.n	8007aa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
	...

08007ad4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	460b      	mov	r3, r1
 8007ade:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ae0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007ae4:	f002 fcb0 	bl	800a448 <USBD_static_malloc>
 8007ae8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d109      	bne.n	8007b04 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	32b0      	adds	r2, #176	@ 0xb0
 8007afa:	2100      	movs	r1, #0
 8007afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007b00:	2302      	movs	r3, #2
 8007b02:	e0d4      	b.n	8007cae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007b04:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007b08:	2100      	movs	r1, #0
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f002 fce0 	bl	800a4d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	32b0      	adds	r2, #176	@ 0xb0
 8007b1a:	68f9      	ldr	r1, [r7, #12]
 8007b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	32b0      	adds	r2, #176	@ 0xb0
 8007b2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	7c1b      	ldrb	r3, [r3, #16]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d138      	bne.n	8007bae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007b3c:	4b5e      	ldr	r3, [pc, #376]	@ (8007cb8 <USBD_CDC_Init+0x1e4>)
 8007b3e:	7819      	ldrb	r1, [r3, #0]
 8007b40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b44:	2202      	movs	r2, #2
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f002 fb5b 	bl	800a202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8007cb8 <USBD_CDC_Init+0x1e4>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	f003 020f 	and.w	r2, r3, #15
 8007b54:	6879      	ldr	r1, [r7, #4]
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	440b      	add	r3, r1
 8007b60:	3324      	adds	r3, #36	@ 0x24
 8007b62:	2201      	movs	r2, #1
 8007b64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007b66:	4b55      	ldr	r3, [pc, #340]	@ (8007cbc <USBD_CDC_Init+0x1e8>)
 8007b68:	7819      	ldrb	r1, [r3, #0]
 8007b6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b6e:	2202      	movs	r2, #2
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f002 fb46 	bl	800a202 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007b76:	4b51      	ldr	r3, [pc, #324]	@ (8007cbc <USBD_CDC_Init+0x1e8>)
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	f003 020f 	and.w	r2, r3, #15
 8007b7e:	6879      	ldr	r1, [r7, #4]
 8007b80:	4613      	mov	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	440b      	add	r3, r1
 8007b8a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b8e:	2201      	movs	r2, #1
 8007b90:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007b92:	4b4b      	ldr	r3, [pc, #300]	@ (8007cc0 <USBD_CDC_Init+0x1ec>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	f003 020f 	and.w	r2, r3, #15
 8007b9a:	6879      	ldr	r1, [r7, #4]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4413      	add	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	440b      	add	r3, r1
 8007ba6:	3326      	adds	r3, #38	@ 0x26
 8007ba8:	2210      	movs	r2, #16
 8007baa:	801a      	strh	r2, [r3, #0]
 8007bac:	e035      	b.n	8007c1a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007bae:	4b42      	ldr	r3, [pc, #264]	@ (8007cb8 <USBD_CDC_Init+0x1e4>)
 8007bb0:	7819      	ldrb	r1, [r3, #0]
 8007bb2:	2340      	movs	r3, #64	@ 0x40
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f002 fb23 	bl	800a202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb8 <USBD_CDC_Init+0x1e4>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	f003 020f 	and.w	r2, r3, #15
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	009b      	lsls	r3, r3, #2
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	440b      	add	r3, r1
 8007bd0:	3324      	adds	r3, #36	@ 0x24
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007bd6:	4b39      	ldr	r3, [pc, #228]	@ (8007cbc <USBD_CDC_Init+0x1e8>)
 8007bd8:	7819      	ldrb	r1, [r3, #0]
 8007bda:	2340      	movs	r3, #64	@ 0x40
 8007bdc:	2202      	movs	r2, #2
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f002 fb0f 	bl	800a202 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007be4:	4b35      	ldr	r3, [pc, #212]	@ (8007cbc <USBD_CDC_Init+0x1e8>)
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	f003 020f 	and.w	r2, r3, #15
 8007bec:	6879      	ldr	r1, [r7, #4]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	440b      	add	r3, r1
 8007bf8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007c00:	4b2f      	ldr	r3, [pc, #188]	@ (8007cc0 <USBD_CDC_Init+0x1ec>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	f003 020f 	and.w	r2, r3, #15
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	3326      	adds	r3, #38	@ 0x26
 8007c16:	2210      	movs	r2, #16
 8007c18:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007c1a:	4b29      	ldr	r3, [pc, #164]	@ (8007cc0 <USBD_CDC_Init+0x1ec>)
 8007c1c:	7819      	ldrb	r1, [r3, #0]
 8007c1e:	2308      	movs	r3, #8
 8007c20:	2203      	movs	r2, #3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f002 faed 	bl	800a202 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007c28:	4b25      	ldr	r3, [pc, #148]	@ (8007cc0 <USBD_CDC_Init+0x1ec>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	f003 020f 	and.w	r2, r3, #15
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	3324      	adds	r3, #36	@ 0x24
 8007c3e:	2201      	movs	r2, #1
 8007c40:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	33b0      	adds	r3, #176	@ 0xb0
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e018      	b.n	8007cae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	7c1b      	ldrb	r3, [r3, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c84:	4b0d      	ldr	r3, [pc, #52]	@ (8007cbc <USBD_CDC_Init+0x1e8>)
 8007c86:	7819      	ldrb	r1, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007c8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f002 fba4 	bl	800a3e0 <USBD_LL_PrepareReceive>
 8007c98:	e008      	b.n	8007cac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007c9a:	4b08      	ldr	r3, [pc, #32]	@ (8007cbc <USBD_CDC_Init+0x1e8>)
 8007c9c:	7819      	ldrb	r1, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ca4:	2340      	movs	r3, #64	@ 0x40
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f002 fb9a 	bl	800a3e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	20000133 	.word	0x20000133
 8007cbc:	20000134 	.word	0x20000134
 8007cc0:	20000135 	.word	0x20000135

08007cc4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8007dbc <USBD_CDC_DeInit+0xf8>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f002 fab9 	bl	800a24e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007cdc:	4b37      	ldr	r3, [pc, #220]	@ (8007dbc <USBD_CDC_DeInit+0xf8>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	f003 020f 	and.w	r2, r3, #15
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	440b      	add	r3, r1
 8007cf0:	3324      	adds	r3, #36	@ 0x24
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007cf6:	4b32      	ldr	r3, [pc, #200]	@ (8007dc0 <USBD_CDC_DeInit+0xfc>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f002 faa6 	bl	800a24e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007d02:	4b2f      	ldr	r3, [pc, #188]	@ (8007dc0 <USBD_CDC_DeInit+0xfc>)
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	f003 020f 	and.w	r2, r3, #15
 8007d0a:	6879      	ldr	r1, [r7, #4]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	440b      	add	r3, r1
 8007d16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007d1e:	4b29      	ldr	r3, [pc, #164]	@ (8007dc4 <USBD_CDC_DeInit+0x100>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f002 fa92 	bl	800a24e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007d2a:	4b26      	ldr	r3, [pc, #152]	@ (8007dc4 <USBD_CDC_DeInit+0x100>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	f003 020f 	and.w	r2, r3, #15
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	4613      	mov	r3, r2
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	440b      	add	r3, r1
 8007d3e:	3324      	adds	r3, #36	@ 0x24
 8007d40:	2200      	movs	r2, #0
 8007d42:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007d44:	4b1f      	ldr	r3, [pc, #124]	@ (8007dc4 <USBD_CDC_DeInit+0x100>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	f003 020f 	and.w	r2, r3, #15
 8007d4c:	6879      	ldr	r1, [r7, #4]
 8007d4e:	4613      	mov	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	440b      	add	r3, r1
 8007d58:	3326      	adds	r3, #38	@ 0x26
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	32b0      	adds	r2, #176	@ 0xb0
 8007d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01f      	beq.n	8007db0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	33b0      	adds	r3, #176	@ 0xb0
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	32b0      	adds	r2, #176	@ 0xb0
 8007d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f002 fb66 	bl	800a464 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	32b0      	adds	r2, #176	@ 0xb0
 8007da2:	2100      	movs	r1, #0
 8007da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	20000133 	.word	0x20000133
 8007dc0:	20000134 	.word	0x20000134
 8007dc4:	20000135 	.word	0x20000135

08007dc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	32b0      	adds	r2, #176	@ 0xb0
 8007ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e0bf      	b.n	8007f78 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d050      	beq.n	8007ea6 <USBD_CDC_Setup+0xde>
 8007e04:	2b20      	cmp	r3, #32
 8007e06:	f040 80af 	bne.w	8007f68 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	88db      	ldrh	r3, [r3, #6]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d03a      	beq.n	8007e88 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	b25b      	sxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	da1b      	bge.n	8007e54 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	33b0      	adds	r3, #176	@ 0xb0
 8007e26:	009b      	lsls	r3, r3, #2
 8007e28:	4413      	add	r3, r2
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	683a      	ldr	r2, [r7, #0]
 8007e30:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007e32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	88d2      	ldrh	r2, [r2, #6]
 8007e38:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	88db      	ldrh	r3, [r3, #6]
 8007e3e:	2b07      	cmp	r3, #7
 8007e40:	bf28      	it	cs
 8007e42:	2307      	movcs	r3, #7
 8007e44:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	89fa      	ldrh	r2, [r7, #14]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 fd93 	bl	8009978 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007e52:	e090      	b.n	8007f76 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	785a      	ldrb	r2, [r3, #1]
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	88db      	ldrh	r3, [r3, #6]
 8007e62:	2b3f      	cmp	r3, #63	@ 0x3f
 8007e64:	d803      	bhi.n	8007e6e <USBD_CDC_Setup+0xa6>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	88db      	ldrh	r3, [r3, #6]
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	e000      	b.n	8007e70 <USBD_CDC_Setup+0xa8>
 8007e6e:	2240      	movs	r2, #64	@ 0x40
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007e76:	6939      	ldr	r1, [r7, #16]
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007e7e:	461a      	mov	r2, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f001 fda5 	bl	80099d0 <USBD_CtlPrepareRx>
      break;
 8007e86:	e076      	b.n	8007f76 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	33b0      	adds	r3, #176	@ 0xb0
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	7850      	ldrb	r0, [r2, #1]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	4798      	blx	r3
      break;
 8007ea4:	e067      	b.n	8007f76 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	2b0b      	cmp	r3, #11
 8007eac:	d851      	bhi.n	8007f52 <USBD_CDC_Setup+0x18a>
 8007eae:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb4 <USBD_CDC_Setup+0xec>)
 8007eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb4:	08007ee5 	.word	0x08007ee5
 8007eb8:	08007f61 	.word	0x08007f61
 8007ebc:	08007f53 	.word	0x08007f53
 8007ec0:	08007f53 	.word	0x08007f53
 8007ec4:	08007f53 	.word	0x08007f53
 8007ec8:	08007f53 	.word	0x08007f53
 8007ecc:	08007f53 	.word	0x08007f53
 8007ed0:	08007f53 	.word	0x08007f53
 8007ed4:	08007f53 	.word	0x08007f53
 8007ed8:	08007f53 	.word	0x08007f53
 8007edc:	08007f0f 	.word	0x08007f0f
 8007ee0:	08007f39 	.word	0x08007f39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d107      	bne.n	8007f00 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ef0:	f107 030a 	add.w	r3, r7, #10
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 fd3d 	bl	8009978 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007efe:	e032      	b.n	8007f66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f001 fcbb 	bl	800987e <USBD_CtlError>
            ret = USBD_FAIL;
 8007f08:	2303      	movs	r3, #3
 8007f0a:	75fb      	strb	r3, [r7, #23]
          break;
 8007f0c:	e02b      	b.n	8007f66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d107      	bne.n	8007f2a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f1a:	f107 030d 	add.w	r3, r7, #13
 8007f1e:	2201      	movs	r2, #1
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f001 fd28 	bl	8009978 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007f28:	e01d      	b.n	8007f66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f001 fca6 	bl	800987e <USBD_CtlError>
            ret = USBD_FAIL;
 8007f32:	2303      	movs	r3, #3
 8007f34:	75fb      	strb	r3, [r7, #23]
          break;
 8007f36:	e016      	b.n	8007f66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b03      	cmp	r3, #3
 8007f42:	d00f      	beq.n	8007f64 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007f44:	6839      	ldr	r1, [r7, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 fc99 	bl	800987e <USBD_CtlError>
            ret = USBD_FAIL;
 8007f4c:	2303      	movs	r3, #3
 8007f4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007f50:	e008      	b.n	8007f64 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007f52:	6839      	ldr	r1, [r7, #0]
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f001 fc92 	bl	800987e <USBD_CtlError>
          ret = USBD_FAIL;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	75fb      	strb	r3, [r7, #23]
          break;
 8007f5e:	e002      	b.n	8007f66 <USBD_CDC_Setup+0x19e>
          break;
 8007f60:	bf00      	nop
 8007f62:	e008      	b.n	8007f76 <USBD_CDC_Setup+0x1ae>
          break;
 8007f64:	bf00      	nop
      }
      break;
 8007f66:	e006      	b.n	8007f76 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007f68:	6839      	ldr	r1, [r7, #0]
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f001 fc87 	bl	800987e <USBD_CtlError>
      ret = USBD_FAIL;
 8007f70:	2303      	movs	r3, #3
 8007f72:	75fb      	strb	r3, [r7, #23]
      break;
 8007f74:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3718      	adds	r7, #24
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	32b0      	adds	r2, #176	@ 0xb0
 8007f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e065      	b.n	8008076 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	32b0      	adds	r2, #176	@ 0xb0
 8007fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007fba:	78fb      	ldrb	r3, [r7, #3]
 8007fbc:	f003 020f 	and.w	r2, r3, #15
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	4613      	mov	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	4413      	add	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	440b      	add	r3, r1
 8007fcc:	3318      	adds	r3, #24
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d02f      	beq.n	8008034 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	f003 020f 	and.w	r2, r3, #15
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	3318      	adds	r3, #24
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	f003 010f 	and.w	r1, r3, #15
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	00db      	lsls	r3, r3, #3
 8007ff6:	440b      	add	r3, r1
 8007ff8:	009b      	lsls	r3, r3, #2
 8007ffa:	4403      	add	r3, r0
 8007ffc:	331c      	adds	r3, #28
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	fbb2 f1f3 	udiv	r1, r2, r3
 8008004:	fb01 f303 	mul.w	r3, r1, r3
 8008008:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800800a:	2b00      	cmp	r3, #0
 800800c:	d112      	bne.n	8008034 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	f003 020f 	and.w	r2, r3, #15
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	4613      	mov	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4413      	add	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	440b      	add	r3, r1
 8008020:	3318      	adds	r3, #24
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008026:	78f9      	ldrb	r1, [r7, #3]
 8008028:	2300      	movs	r3, #0
 800802a:	2200      	movs	r2, #0
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f002 f9b6 	bl	800a39e <USBD_LL_Transmit>
 8008032:	e01f      	b.n	8008074 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2200      	movs	r2, #0
 8008038:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	33b0      	adds	r3, #176	@ 0xb0
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d010      	beq.n	8008074 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	33b0      	adds	r3, #176	@ 0xb0
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008070:	78fa      	ldrb	r2, [r7, #3]
 8008072:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	460b      	mov	r3, r1
 8008088:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	32b0      	adds	r2, #176	@ 0xb0
 8008094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008098:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	32b0      	adds	r2, #176	@ 0xb0
 80080a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e01a      	b.n	80080e6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80080b0:	78fb      	ldrb	r3, [r7, #3]
 80080b2:	4619      	mov	r1, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f002 f9b4 	bl	800a422 <USBD_LL_GetRxDataSize>
 80080ba:	4602      	mov	r2, r0
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	33b0      	adds	r3, #176	@ 0xb0
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4413      	add	r3, r2
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80080e0:	4611      	mov	r1, r2
 80080e2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b084      	sub	sp, #16
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	32b0      	adds	r2, #176	@ 0xb0
 8008100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008104:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800810c:	2303      	movs	r3, #3
 800810e:	e024      	b.n	800815a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	33b0      	adds	r3, #176	@ 0xb0
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	4413      	add	r3, r2
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d019      	beq.n	8008158 <USBD_CDC_EP0_RxReady+0x6a>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800812a:	2bff      	cmp	r3, #255	@ 0xff
 800812c:	d014      	beq.n	8008158 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	33b0      	adds	r3, #176	@ 0xb0
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4413      	add	r3, r2
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008146:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800814e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	22ff      	movs	r2, #255	@ 0xff
 8008154:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008158:	2300      	movs	r3, #0
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800816c:	2182      	movs	r1, #130	@ 0x82
 800816e:	4818      	ldr	r0, [pc, #96]	@ (80081d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008170:	f000 fd4f 	bl	8008c12 <USBD_GetEpDesc>
 8008174:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008176:	2101      	movs	r1, #1
 8008178:	4815      	ldr	r0, [pc, #84]	@ (80081d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800817a:	f000 fd4a 	bl	8008c12 <USBD_GetEpDesc>
 800817e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008180:	2181      	movs	r1, #129	@ 0x81
 8008182:	4813      	ldr	r0, [pc, #76]	@ (80081d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008184:	f000 fd45 	bl	8008c12 <USBD_GetEpDesc>
 8008188:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2210      	movs	r2, #16
 8008194:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d006      	beq.n	80081aa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	2200      	movs	r2, #0
 80081a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081a4:	711a      	strb	r2, [r3, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d006      	beq.n	80081be <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081b8:	711a      	strb	r2, [r3, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2243      	movs	r2, #67	@ 0x43
 80081c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80081c4:	4b02      	ldr	r3, [pc, #8]	@ (80081d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	200000f0 	.word	0x200000f0

080081d4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80081dc:	2182      	movs	r1, #130	@ 0x82
 80081de:	4818      	ldr	r0, [pc, #96]	@ (8008240 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081e0:	f000 fd17 	bl	8008c12 <USBD_GetEpDesc>
 80081e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80081e6:	2101      	movs	r1, #1
 80081e8:	4815      	ldr	r0, [pc, #84]	@ (8008240 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081ea:	f000 fd12 	bl	8008c12 <USBD_GetEpDesc>
 80081ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80081f0:	2181      	movs	r1, #129	@ 0x81
 80081f2:	4813      	ldr	r0, [pc, #76]	@ (8008240 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80081f4:	f000 fd0d 	bl	8008c12 <USBD_GetEpDesc>
 80081f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d002      	beq.n	8008206 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	2210      	movs	r2, #16
 8008204:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d006      	beq.n	800821a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	2200      	movs	r2, #0
 8008210:	711a      	strb	r2, [r3, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f042 0202 	orr.w	r2, r2, #2
 8008218:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d006      	beq.n	800822e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	711a      	strb	r2, [r3, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	f042 0202 	orr.w	r2, r2, #2
 800822c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2243      	movs	r2, #67	@ 0x43
 8008232:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008234:	4b02      	ldr	r3, [pc, #8]	@ (8008240 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	200000f0 	.word	0x200000f0

08008244 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800824c:	2182      	movs	r1, #130	@ 0x82
 800824e:	4818      	ldr	r0, [pc, #96]	@ (80082b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008250:	f000 fcdf 	bl	8008c12 <USBD_GetEpDesc>
 8008254:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008256:	2101      	movs	r1, #1
 8008258:	4815      	ldr	r0, [pc, #84]	@ (80082b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800825a:	f000 fcda 	bl	8008c12 <USBD_GetEpDesc>
 800825e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008260:	2181      	movs	r1, #129	@ 0x81
 8008262:	4813      	ldr	r0, [pc, #76]	@ (80082b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008264:	f000 fcd5 	bl	8008c12 <USBD_GetEpDesc>
 8008268:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d002      	beq.n	8008276 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	2210      	movs	r2, #16
 8008274:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d006      	beq.n	800828a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	2200      	movs	r2, #0
 8008280:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008284:	711a      	strb	r2, [r3, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d006      	beq.n	800829e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008298:	711a      	strb	r2, [r3, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2243      	movs	r2, #67	@ 0x43
 80082a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80082a4:	4b02      	ldr	r3, [pc, #8]	@ (80082b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3718      	adds	r7, #24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	200000f0 	.word	0x200000f0

080082b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	220a      	movs	r2, #10
 80082c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80082c2:	4b03      	ldr	r3, [pc, #12]	@ (80082d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	200000ac 	.word	0x200000ac

080082d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e009      	b.n	80082fc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	33b0      	adds	r3, #176	@ 0xb0
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	32b0      	adds	r2, #176	@ 0xb0
 800831e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008322:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800832a:	2303      	movs	r3, #3
 800832c:	e008      	b.n	8008340 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	371c      	adds	r7, #28
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	32b0      	adds	r2, #176	@ 0xb0
 8008360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008364:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800836c:	2303      	movs	r3, #3
 800836e:	e004      	b.n	800837a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
	...

08008388 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	32b0      	adds	r2, #176	@ 0xb0
 800839a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800839e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80083a0:	2301      	movs	r3, #1
 80083a2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80083aa:	2303      	movs	r3, #3
 80083ac:	e025      	b.n	80083fa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d11f      	bne.n	80083f8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80083c0:	4b10      	ldr	r3, [pc, #64]	@ (8008404 <USBD_CDC_TransmitPacket+0x7c>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	f003 020f 	and.w	r2, r3, #15
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4613      	mov	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	4413      	add	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4403      	add	r3, r0
 80083da:	3318      	adds	r3, #24
 80083dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80083de:	4b09      	ldr	r3, [pc, #36]	@ (8008404 <USBD_CDC_TransmitPacket+0x7c>)
 80083e0:	7819      	ldrb	r1, [r3, #0]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f001 ffd5 	bl	800a39e <USBD_LL_Transmit>

    ret = USBD_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000133 	.word	0x20000133

08008408 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	32b0      	adds	r2, #176	@ 0xb0
 800841a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	32b0      	adds	r2, #176	@ 0xb0
 800842a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008432:	2303      	movs	r3, #3
 8008434:	e018      	b.n	8008468 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	7c1b      	ldrb	r3, [r3, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800843e:	4b0c      	ldr	r3, [pc, #48]	@ (8008470 <USBD_CDC_ReceivePacket+0x68>)
 8008440:	7819      	ldrb	r1, [r3, #0]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 ffc7 	bl	800a3e0 <USBD_LL_PrepareReceive>
 8008452:	e008      	b.n	8008466 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008454:	4b06      	ldr	r3, [pc, #24]	@ (8008470 <USBD_CDC_ReceivePacket+0x68>)
 8008456:	7819      	ldrb	r1, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800845e:	2340      	movs	r3, #64	@ 0x40
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 ffbd 	bl	800a3e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	20000134 	.word	0x20000134

08008474 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	4613      	mov	r3, r2
 8008480:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008488:	2303      	movs	r3, #3
 800848a:	e01f      	b.n	80084cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	79fa      	ldrb	r2, [r7, #7]
 80084be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f001 fe31 	bl	800a128 <USBD_LL_Init>
 80084c6:	4603      	mov	r3, r0
 80084c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d101      	bne.n	80084ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e025      	b.n	8008538 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	683a      	ldr	r2, [r7, #0]
 80084f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	32ae      	adds	r2, #174	@ 0xae
 80084fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00f      	beq.n	8008528 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	32ae      	adds	r2, #174	@ 0xae
 8008512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008518:	f107 020e 	add.w	r2, r7, #14
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	4602      	mov	r2, r0
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 fe3f 	bl	800a1cc <USBD_LL_Start>
 800854e:	4603      	mov	r3, r0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008560:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008562:	4618      	mov	r0, r3
 8008564:	370c      	adds	r7, #12
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	460b      	mov	r3, r1
 8008578:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008584:	2b00      	cmp	r3, #0
 8008586:	d009      	beq.n	800859c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	78fa      	ldrb	r2, [r7, #3]
 8008592:	4611      	mov	r1, r2
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	4798      	blx	r3
 8008598:	4603      	mov	r3, r0
 800859a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800859c:	7bfb      	ldrb	r3, [r7, #15]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}

080085a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085a6:	b580      	push	{r7, lr}
 80085a8:	b084      	sub	sp, #16
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	460b      	mov	r3, r1
 80085b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	4611      	mov	r1, r2
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	4798      	blx	r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085cc:	2303      	movs	r3, #3
 80085ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f001 f90c 	bl	800980a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008600:	461a      	mov	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800860e:	f003 031f 	and.w	r3, r3, #31
 8008612:	2b02      	cmp	r3, #2
 8008614:	d01a      	beq.n	800864c <USBD_LL_SetupStage+0x72>
 8008616:	2b02      	cmp	r3, #2
 8008618:	d822      	bhi.n	8008660 <USBD_LL_SetupStage+0x86>
 800861a:	2b00      	cmp	r3, #0
 800861c:	d002      	beq.n	8008624 <USBD_LL_SetupStage+0x4a>
 800861e:	2b01      	cmp	r3, #1
 8008620:	d00a      	beq.n	8008638 <USBD_LL_SetupStage+0x5e>
 8008622:	e01d      	b.n	8008660 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fb63 	bl	8008cf8 <USBD_StdDevReq>
 8008632:	4603      	mov	r3, r0
 8008634:	73fb      	strb	r3, [r7, #15]
      break;
 8008636:	e020      	b.n	800867a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fbcb 	bl	8008ddc <USBD_StdItfReq>
 8008646:	4603      	mov	r3, r0
 8008648:	73fb      	strb	r3, [r7, #15]
      break;
 800864a:	e016      	b.n	800867a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fc2d 	bl	8008eb4 <USBD_StdEPReq>
 800865a:	4603      	mov	r3, r0
 800865c:	73fb      	strb	r3, [r7, #15]
      break;
 800865e:	e00c      	b.n	800867a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008666:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800866a:	b2db      	uxtb	r3, r3
 800866c:	4619      	mov	r1, r3
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f001 fe0c 	bl	800a28c <USBD_LL_StallEP>
 8008674:	4603      	mov	r3, r0
 8008676:	73fb      	strb	r3, [r7, #15]
      break;
 8008678:	bf00      	nop
  }

  return ret;
 800867a:	7bfb      	ldrb	r3, [r7, #15]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b086      	sub	sp, #24
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	460b      	mov	r3, r1
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008692:	2300      	movs	r3, #0
 8008694:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008696:	7afb      	ldrb	r3, [r7, #11]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d16e      	bne.n	800877a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80086a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	f040 8098 	bne.w	80087e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	689a      	ldr	r2, [r3, #8]
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d913      	bls.n	80086e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	689a      	ldr	r2, [r3, #8]
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	1ad2      	subs	r2, r2, r3
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	68da      	ldr	r2, [r3, #12]
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	4293      	cmp	r3, r2
 80086d4:	bf28      	it	cs
 80086d6:	4613      	movcs	r3, r2
 80086d8:	461a      	mov	r2, r3
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f001 f994 	bl	8009a0a <USBD_CtlContinueRx>
 80086e2:	e07d      	b.n	80087e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80086ea:	f003 031f 	and.w	r3, r3, #31
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d014      	beq.n	800871c <USBD_LL_DataOutStage+0x98>
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d81d      	bhi.n	8008732 <USBD_LL_DataOutStage+0xae>
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d002      	beq.n	8008700 <USBD_LL_DataOutStage+0x7c>
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d003      	beq.n	8008706 <USBD_LL_DataOutStage+0x82>
 80086fe:	e018      	b.n	8008732 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008700:	2300      	movs	r3, #0
 8008702:	75bb      	strb	r3, [r7, #22]
            break;
 8008704:	e018      	b.n	8008738 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800870c:	b2db      	uxtb	r3, r3
 800870e:	4619      	mov	r1, r3
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f000 fa64 	bl	8008bde <USBD_CoreFindIF>
 8008716:	4603      	mov	r3, r0
 8008718:	75bb      	strb	r3, [r7, #22]
            break;
 800871a:	e00d      	b.n	8008738 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008722:	b2db      	uxtb	r3, r3
 8008724:	4619      	mov	r1, r3
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 fa66 	bl	8008bf8 <USBD_CoreFindEP>
 800872c:	4603      	mov	r3, r0
 800872e:	75bb      	strb	r3, [r7, #22]
            break;
 8008730:	e002      	b.n	8008738 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	75bb      	strb	r3, [r7, #22]
            break;
 8008736:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008738:	7dbb      	ldrb	r3, [r7, #22]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d119      	bne.n	8008772 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b03      	cmp	r3, #3
 8008748:	d113      	bne.n	8008772 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800874a:	7dba      	ldrb	r2, [r7, #22]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	32ae      	adds	r2, #174	@ 0xae
 8008750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00b      	beq.n	8008772 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800875a:	7dba      	ldrb	r2, [r7, #22]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008762:	7dba      	ldrb	r2, [r7, #22]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	32ae      	adds	r2, #174	@ 0xae
 8008768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f001 f95a 	bl	8009a2c <USBD_CtlSendStatus>
 8008778:	e032      	b.n	80087e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800877a:	7afb      	ldrb	r3, [r7, #11]
 800877c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008780:	b2db      	uxtb	r3, r3
 8008782:	4619      	mov	r1, r3
 8008784:	68f8      	ldr	r0, [r7, #12]
 8008786:	f000 fa37 	bl	8008bf8 <USBD_CoreFindEP>
 800878a:	4603      	mov	r3, r0
 800878c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800878e:	7dbb      	ldrb	r3, [r7, #22]
 8008790:	2bff      	cmp	r3, #255	@ 0xff
 8008792:	d025      	beq.n	80087e0 <USBD_LL_DataOutStage+0x15c>
 8008794:	7dbb      	ldrb	r3, [r7, #22]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d122      	bne.n	80087e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d117      	bne.n	80087d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087a6:	7dba      	ldrb	r2, [r7, #22]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	32ae      	adds	r2, #174	@ 0xae
 80087ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d00f      	beq.n	80087d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087b6:	7dba      	ldrb	r2, [r7, #22]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087be:	7dba      	ldrb	r2, [r7, #22]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	32ae      	adds	r2, #174	@ 0xae
 80087c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c8:	699b      	ldr	r3, [r3, #24]
 80087ca:	7afa      	ldrb	r2, [r7, #11]
 80087cc:	4611      	mov	r1, r2
 80087ce:	68f8      	ldr	r0, [r7, #12]
 80087d0:	4798      	blx	r3
 80087d2:	4603      	mov	r3, r0
 80087d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087d6:	7dfb      	ldrb	r3, [r7, #23]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087dc:	7dfb      	ldrb	r3, [r7, #23]
 80087de:	e000      	b.n	80087e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b086      	sub	sp, #24
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	60f8      	str	r0, [r7, #12]
 80087f2:	460b      	mov	r3, r1
 80087f4:	607a      	str	r2, [r7, #4]
 80087f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80087f8:	7afb      	ldrb	r3, [r7, #11]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d16f      	bne.n	80088de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3314      	adds	r3, #20
 8008802:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800880a:	2b02      	cmp	r3, #2
 800880c:	d15a      	bne.n	80088c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	429a      	cmp	r2, r3
 8008818:	d914      	bls.n	8008844 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	689a      	ldr	r2, [r3, #8]
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	1ad2      	subs	r2, r2, r3
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	461a      	mov	r2, r3
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f001 f8bc 	bl	80099ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008836:	2300      	movs	r3, #0
 8008838:	2200      	movs	r2, #0
 800883a:	2100      	movs	r1, #0
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f001 fdcf 	bl	800a3e0 <USBD_LL_PrepareReceive>
 8008842:	e03f      	b.n	80088c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	429a      	cmp	r2, r3
 800884e:	d11c      	bne.n	800888a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	685a      	ldr	r2, [r3, #4]
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008858:	429a      	cmp	r2, r3
 800885a:	d316      	bcc.n	800888a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	685a      	ldr	r2, [r3, #4]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008866:	429a      	cmp	r2, r3
 8008868:	d20f      	bcs.n	800888a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800886a:	2200      	movs	r2, #0
 800886c:	2100      	movs	r1, #0
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f001 f89d 	bl	80099ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800887c:	2300      	movs	r3, #0
 800887e:	2200      	movs	r2, #0
 8008880:	2100      	movs	r1, #0
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f001 fdac 	bl	800a3e0 <USBD_LL_PrepareReceive>
 8008888:	e01c      	b.n	80088c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b03      	cmp	r3, #3
 8008894:	d10f      	bne.n	80088b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d009      	beq.n	80088b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088b6:	2180      	movs	r1, #128	@ 0x80
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f001 fce7 	bl	800a28c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f001 f8c7 	bl	8009a52 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d03a      	beq.n	8008944 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7ff fe42 	bl	8008558 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80088dc:	e032      	b.n	8008944 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088de:	7afb      	ldrb	r3, [r7, #11]
 80088e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	4619      	mov	r1, r3
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f985 	bl	8008bf8 <USBD_CoreFindEP>
 80088ee:	4603      	mov	r3, r0
 80088f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
 80088f4:	2bff      	cmp	r3, #255	@ 0xff
 80088f6:	d025      	beq.n	8008944 <USBD_LL_DataInStage+0x15a>
 80088f8:	7dfb      	ldrb	r3, [r7, #23]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d122      	bne.n	8008944 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008904:	b2db      	uxtb	r3, r3
 8008906:	2b03      	cmp	r3, #3
 8008908:	d11c      	bne.n	8008944 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800890a:	7dfa      	ldrb	r2, [r7, #23]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	32ae      	adds	r2, #174	@ 0xae
 8008910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d014      	beq.n	8008944 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800891a:	7dfa      	ldrb	r2, [r7, #23]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008922:	7dfa      	ldrb	r2, [r7, #23]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	32ae      	adds	r2, #174	@ 0xae
 8008928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	7afa      	ldrb	r2, [r7, #11]
 8008930:	4611      	mov	r1, r2
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	4798      	blx	r3
 8008936:	4603      	mov	r3, r0
 8008938:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800893a:	7dbb      	ldrb	r3, [r7, #22]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d001      	beq.n	8008944 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008940:	7dbb      	ldrb	r3, [r7, #22]
 8008942:	e000      	b.n	8008946 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008986:	2b00      	cmp	r3, #0
 8008988:	d014      	beq.n	80089b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00e      	beq.n	80089b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	6852      	ldr	r2, [r2, #4]
 80089a2:	b2d2      	uxtb	r2, r2
 80089a4:	4611      	mov	r1, r2
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4798      	blx	r3
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089b0:	2303      	movs	r3, #3
 80089b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089b4:	2340      	movs	r3, #64	@ 0x40
 80089b6:	2200      	movs	r2, #0
 80089b8:	2100      	movs	r1, #0
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f001 fc21 	bl	800a202 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2240      	movs	r2, #64	@ 0x40
 80089cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089d0:	2340      	movs	r3, #64	@ 0x40
 80089d2:	2200      	movs	r2, #0
 80089d4:	2180      	movs	r1, #128	@ 0x80
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f001 fc13 	bl	800a202 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2240      	movs	r2, #64	@ 0x40
 80089e6:	621a      	str	r2, [r3, #32]

  return ret;
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	460b      	mov	r3, r1
 80089fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	78fa      	ldrb	r2, [r7, #3]
 8008a02:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b083      	sub	sp, #12
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b04      	cmp	r3, #4
 8008a24:	d006      	beq.n	8008a34 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2204      	movs	r2, #4
 8008a38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	370c      	adds	r7, #12
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a58:	b2db      	uxtb	r3, r3
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	d106      	bne.n	8008a6c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	370c      	adds	r7, #12
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr

08008a7a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b082      	sub	sp, #8
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b03      	cmp	r3, #3
 8008a8c:	d110      	bne.n	8008ab0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00b      	beq.n	8008ab0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}

08008aba <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008aba:	b580      	push	{r7, lr}
 8008abc:	b082      	sub	sp, #8
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	32ae      	adds	r2, #174	@ 0xae
 8008ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d101      	bne.n	8008adc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e01c      	b.n	8008b16 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d115      	bne.n	8008b14 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	32ae      	adds	r2, #174	@ 0xae
 8008af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af6:	6a1b      	ldr	r3, [r3, #32]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00b      	beq.n	8008b14 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	32ae      	adds	r2, #174	@ 0xae
 8008b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	78fa      	ldrb	r2, [r7, #3]
 8008b0e:	4611      	mov	r1, r2
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b082      	sub	sp, #8
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	460b      	mov	r3, r1
 8008b28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	32ae      	adds	r2, #174	@ 0xae
 8008b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	e01c      	b.n	8008b7a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d115      	bne.n	8008b78 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	32ae      	adds	r2, #174	@ 0xae
 8008b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00b      	beq.n	8008b78 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	32ae      	adds	r2, #174	@ 0xae
 8008b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b70:	78fa      	ldrb	r2, [r7, #3]
 8008b72:	4611      	mov	r1, r2
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3708      	adds	r7, #8
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00e      	beq.n	8008bd4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	6852      	ldr	r2, [r2, #4]
 8008bc2:	b2d2      	uxtb	r2, r2
 8008bc4:	4611      	mov	r1, r2
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	4798      	blx	r3
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008bd0:	2303      	movs	r3, #3
 8008bd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}

08008bde <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	460b      	mov	r3, r1
 8008c02:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c04:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c10:	4770      	bx	lr

08008c12 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b086      	sub	sp, #24
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	885b      	ldrh	r3, [r3, #2]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	7812      	ldrb	r2, [r2, #0]
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d91f      	bls.n	8008c78 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c3e:	e013      	b.n	8008c68 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c40:	f107 030a 	add.w	r3, r7, #10
 8008c44:	4619      	mov	r1, r3
 8008c46:	6978      	ldr	r0, [r7, #20]
 8008c48:	f000 f81b 	bl	8008c82 <USBD_GetNextDesc>
 8008c4c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	785b      	ldrb	r3, [r3, #1]
 8008c52:	2b05      	cmp	r3, #5
 8008c54:	d108      	bne.n	8008c68 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	789b      	ldrb	r3, [r3, #2]
 8008c5e:	78fa      	ldrb	r2, [r7, #3]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d008      	beq.n	8008c76 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c64:	2300      	movs	r3, #0
 8008c66:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	885b      	ldrh	r3, [r3, #2]
 8008c6c:	b29a      	uxth	r2, r3
 8008c6e:	897b      	ldrh	r3, [r7, #10]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d8e5      	bhi.n	8008c40 <USBD_GetEpDesc+0x2e>
 8008c74:	e000      	b.n	8008c78 <USBD_GetEpDesc+0x66>
          break;
 8008c76:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c78:	693b      	ldr	r3, [r7, #16]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b085      	sub	sp, #20
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
 8008c8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	7812      	ldrb	r2, [r2, #0]
 8008c98:	4413      	add	r3, r2
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4413      	add	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cac:	68fb      	ldr	r3, [r7, #12]
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b087      	sub	sp, #28
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008cd8:	8a3b      	ldrh	r3, [r7, #16]
 8008cda:	021b      	lsls	r3, r3, #8
 8008cdc:	b21a      	sxth	r2, r3
 8008cde:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	b21b      	sxth	r3, r3
 8008ce6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008ce8:	89fb      	ldrh	r3, [r7, #14]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
	...

08008cf8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d0e:	2b40      	cmp	r3, #64	@ 0x40
 8008d10:	d005      	beq.n	8008d1e <USBD_StdDevReq+0x26>
 8008d12:	2b40      	cmp	r3, #64	@ 0x40
 8008d14:	d857      	bhi.n	8008dc6 <USBD_StdDevReq+0xce>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00f      	beq.n	8008d3a <USBD_StdDevReq+0x42>
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	d153      	bne.n	8008dc6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	32ae      	adds	r2, #174	@ 0xae
 8008d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	4798      	blx	r3
 8008d34:	4603      	mov	r3, r0
 8008d36:	73fb      	strb	r3, [r7, #15]
      break;
 8008d38:	e04a      	b.n	8008dd0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	785b      	ldrb	r3, [r3, #1]
 8008d3e:	2b09      	cmp	r3, #9
 8008d40:	d83b      	bhi.n	8008dba <USBD_StdDevReq+0xc2>
 8008d42:	a201      	add	r2, pc, #4	@ (adr r2, 8008d48 <USBD_StdDevReq+0x50>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008d9d 	.word	0x08008d9d
 8008d4c:	08008db1 	.word	0x08008db1
 8008d50:	08008dbb 	.word	0x08008dbb
 8008d54:	08008da7 	.word	0x08008da7
 8008d58:	08008dbb 	.word	0x08008dbb
 8008d5c:	08008d7b 	.word	0x08008d7b
 8008d60:	08008d71 	.word	0x08008d71
 8008d64:	08008dbb 	.word	0x08008dbb
 8008d68:	08008d93 	.word	0x08008d93
 8008d6c:	08008d85 	.word	0x08008d85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fa3c 	bl	80091f0 <USBD_GetDescriptor>
          break;
 8008d78:	e024      	b.n	8008dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fba1 	bl	80094c4 <USBD_SetAddress>
          break;
 8008d82:	e01f      	b.n	8008dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fbe0 	bl	800954c <USBD_SetConfig>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]
          break;
 8008d90:	e018      	b.n	8008dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d92:	6839      	ldr	r1, [r7, #0]
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fc83 	bl	80096a0 <USBD_GetConfig>
          break;
 8008d9a:	e013      	b.n	8008dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d9c:	6839      	ldr	r1, [r7, #0]
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fcb4 	bl	800970c <USBD_GetStatus>
          break;
 8008da4:	e00e      	b.n	8008dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fce3 	bl	8009774 <USBD_SetFeature>
          break;
 8008dae:	e009      	b.n	8008dc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fd07 	bl	80097c6 <USBD_ClrFeature>
          break;
 8008db8:	e004      	b.n	8008dc4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fd5e 	bl	800987e <USBD_CtlError>
          break;
 8008dc2:	bf00      	nop
      }
      break;
 8008dc4:	e004      	b.n	8008dd0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fd58 	bl	800987e <USBD_CtlError>
      break;
 8008dce:	bf00      	nop
  }

  return ret;
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop

08008ddc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008df2:	2b40      	cmp	r3, #64	@ 0x40
 8008df4:	d005      	beq.n	8008e02 <USBD_StdItfReq+0x26>
 8008df6:	2b40      	cmp	r3, #64	@ 0x40
 8008df8:	d852      	bhi.n	8008ea0 <USBD_StdItfReq+0xc4>
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d001      	beq.n	8008e02 <USBD_StdItfReq+0x26>
 8008dfe:	2b20      	cmp	r3, #32
 8008e00:	d14e      	bne.n	8008ea0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	3b01      	subs	r3, #1
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d840      	bhi.n	8008e92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	889b      	ldrh	r3, [r3, #4]
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d836      	bhi.n	8008e88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	889b      	ldrh	r3, [r3, #4]
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff fedb 	bl	8008bde <USBD_CoreFindIF>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2bff      	cmp	r3, #255	@ 0xff
 8008e30:	d01d      	beq.n	8008e6e <USBD_StdItfReq+0x92>
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d11a      	bne.n	8008e6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e38:	7bba      	ldrb	r2, [r7, #14]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	32ae      	adds	r2, #174	@ 0xae
 8008e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00f      	beq.n	8008e68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e48:	7bba      	ldrb	r2, [r7, #14]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e50:	7bba      	ldrb	r2, [r7, #14]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	32ae      	adds	r2, #174	@ 0xae
 8008e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	4798      	blx	r3
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e66:	e004      	b.n	8008e72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e6c:	e001      	b.n	8008e72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e6e:	2303      	movs	r3, #3
 8008e70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	88db      	ldrh	r3, [r3, #6]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d110      	bne.n	8008e9c <USBD_StdItfReq+0xc0>
 8008e7a:	7bfb      	ldrb	r3, [r7, #15]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10d      	bne.n	8008e9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fdd3 	bl	8009a2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e86:	e009      	b.n	8008e9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fcf7 	bl	800987e <USBD_CtlError>
          break;
 8008e90:	e004      	b.n	8008e9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fcf2 	bl	800987e <USBD_CtlError>
          break;
 8008e9a:	e000      	b.n	8008e9e <USBD_StdItfReq+0xc2>
          break;
 8008e9c:	bf00      	nop
      }
      break;
 8008e9e:	e004      	b.n	8008eaa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ea0:	6839      	ldr	r1, [r7, #0]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 fceb 	bl	800987e <USBD_CtlError>
      break;
 8008ea8:	bf00      	nop
  }

  return ret;
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b084      	sub	sp, #16
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	889b      	ldrh	r3, [r3, #4]
 8008ec6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ed0:	2b40      	cmp	r3, #64	@ 0x40
 8008ed2:	d007      	beq.n	8008ee4 <USBD_StdEPReq+0x30>
 8008ed4:	2b40      	cmp	r3, #64	@ 0x40
 8008ed6:	f200 817f 	bhi.w	80091d8 <USBD_StdEPReq+0x324>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d02a      	beq.n	8008f34 <USBD_StdEPReq+0x80>
 8008ede:	2b20      	cmp	r3, #32
 8008ee0:	f040 817a 	bne.w	80091d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008ee4:	7bbb      	ldrb	r3, [r7, #14]
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff fe85 	bl	8008bf8 <USBD_CoreFindEP>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ef2:	7b7b      	ldrb	r3, [r7, #13]
 8008ef4:	2bff      	cmp	r3, #255	@ 0xff
 8008ef6:	f000 8174 	beq.w	80091e2 <USBD_StdEPReq+0x32e>
 8008efa:	7b7b      	ldrb	r3, [r7, #13]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f040 8170 	bne.w	80091e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f02:	7b7a      	ldrb	r2, [r7, #13]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f0a:	7b7a      	ldrb	r2, [r7, #13]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	32ae      	adds	r2, #174	@ 0xae
 8008f10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f000 8163 	beq.w	80091e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f1c:	7b7a      	ldrb	r2, [r7, #13]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	32ae      	adds	r2, #174	@ 0xae
 8008f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	4798      	blx	r3
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f32:	e156      	b.n	80091e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	785b      	ldrb	r3, [r3, #1]
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d008      	beq.n	8008f4e <USBD_StdEPReq+0x9a>
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	f300 8145 	bgt.w	80091cc <USBD_StdEPReq+0x318>
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f000 809b 	beq.w	800907e <USBD_StdEPReq+0x1ca>
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d03c      	beq.n	8008fc6 <USBD_StdEPReq+0x112>
 8008f4c:	e13e      	b.n	80091cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d002      	beq.n	8008f60 <USBD_StdEPReq+0xac>
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d016      	beq.n	8008f8c <USBD_StdEPReq+0xd8>
 8008f5e:	e02c      	b.n	8008fba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f60:	7bbb      	ldrb	r3, [r7, #14]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00d      	beq.n	8008f82 <USBD_StdEPReq+0xce>
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	2b80      	cmp	r3, #128	@ 0x80
 8008f6a:	d00a      	beq.n	8008f82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 f98b 	bl	800a28c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f76:	2180      	movs	r1, #128	@ 0x80
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 f987 	bl	800a28c <USBD_LL_StallEP>
 8008f7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f80:	e020      	b.n	8008fc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fc7a 	bl	800987e <USBD_CtlError>
              break;
 8008f8a:	e01b      	b.n	8008fc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	885b      	ldrh	r3, [r3, #2]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10e      	bne.n	8008fb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00b      	beq.n	8008fb2 <USBD_StdEPReq+0xfe>
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	2b80      	cmp	r3, #128	@ 0x80
 8008f9e:	d008      	beq.n	8008fb2 <USBD_StdEPReq+0xfe>
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	88db      	ldrh	r3, [r3, #6]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fa8:	7bbb      	ldrb	r3, [r7, #14]
 8008faa:	4619      	mov	r1, r3
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f001 f96d 	bl	800a28c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fd3a 	bl	8009a2c <USBD_CtlSendStatus>

              break;
 8008fb8:	e004      	b.n	8008fc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008fba:	6839      	ldr	r1, [r7, #0]
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fc5e 	bl	800987e <USBD_CtlError>
              break;
 8008fc2:	bf00      	nop
          }
          break;
 8008fc4:	e107      	b.n	80091d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d002      	beq.n	8008fd8 <USBD_StdEPReq+0x124>
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d016      	beq.n	8009004 <USBD_StdEPReq+0x150>
 8008fd6:	e04b      	b.n	8009070 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00d      	beq.n	8008ffa <USBD_StdEPReq+0x146>
 8008fde:	7bbb      	ldrb	r3, [r7, #14]
 8008fe0:	2b80      	cmp	r3, #128	@ 0x80
 8008fe2:	d00a      	beq.n	8008ffa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fe4:	7bbb      	ldrb	r3, [r7, #14]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 f94f 	bl	800a28c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fee:	2180      	movs	r1, #128	@ 0x80
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 f94b 	bl	800a28c <USBD_LL_StallEP>
 8008ff6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ff8:	e040      	b.n	800907c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008ffa:	6839      	ldr	r1, [r7, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 fc3e 	bl	800987e <USBD_CtlError>
              break;
 8009002:	e03b      	b.n	800907c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	885b      	ldrh	r3, [r3, #2]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d136      	bne.n	800907a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800900c:	7bbb      	ldrb	r3, [r7, #14]
 800900e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009012:	2b00      	cmp	r3, #0
 8009014:	d004      	beq.n	8009020 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009016:	7bbb      	ldrb	r3, [r7, #14]
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f001 f955 	bl	800a2ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 fd03 	bl	8009a2c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7ff fde4 	bl	8008bf8 <USBD_CoreFindEP>
 8009030:	4603      	mov	r3, r0
 8009032:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009034:	7b7b      	ldrb	r3, [r7, #13]
 8009036:	2bff      	cmp	r3, #255	@ 0xff
 8009038:	d01f      	beq.n	800907a <USBD_StdEPReq+0x1c6>
 800903a:	7b7b      	ldrb	r3, [r7, #13]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d11c      	bne.n	800907a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009040:	7b7a      	ldrb	r2, [r7, #13]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009048:	7b7a      	ldrb	r2, [r7, #13]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	32ae      	adds	r2, #174	@ 0xae
 800904e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d010      	beq.n	800907a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009058:	7b7a      	ldrb	r2, [r7, #13]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	32ae      	adds	r2, #174	@ 0xae
 800905e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	4798      	blx	r3
 800906a:	4603      	mov	r3, r0
 800906c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800906e:	e004      	b.n	800907a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009070:	6839      	ldr	r1, [r7, #0]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fc03 	bl	800987e <USBD_CtlError>
              break;
 8009078:	e000      	b.n	800907c <USBD_StdEPReq+0x1c8>
              break;
 800907a:	bf00      	nop
          }
          break;
 800907c:	e0ab      	b.n	80091d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d002      	beq.n	8009090 <USBD_StdEPReq+0x1dc>
 800908a:	2b03      	cmp	r3, #3
 800908c:	d032      	beq.n	80090f4 <USBD_StdEPReq+0x240>
 800908e:	e097      	b.n	80091c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009090:	7bbb      	ldrb	r3, [r7, #14]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d007      	beq.n	80090a6 <USBD_StdEPReq+0x1f2>
 8009096:	7bbb      	ldrb	r3, [r7, #14]
 8009098:	2b80      	cmp	r3, #128	@ 0x80
 800909a:	d004      	beq.n	80090a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fbed 	bl	800987e <USBD_CtlError>
                break;
 80090a4:	e091      	b.n	80091ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	da0b      	bge.n	80090c6 <USBD_StdEPReq+0x212>
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090b4:	4613      	mov	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4413      	add	r3, r2
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	3310      	adds	r3, #16
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	4413      	add	r3, r2
 80090c2:	3304      	adds	r3, #4
 80090c4:	e00b      	b.n	80090de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090c6:	7bbb      	ldrb	r3, [r7, #14]
 80090c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090cc:	4613      	mov	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	4413      	add	r3, r2
 80090dc:	3304      	adds	r3, #4
 80090de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	2202      	movs	r2, #2
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fc43 	bl	8009978 <USBD_CtlSendData>
              break;
 80090f2:	e06a      	b.n	80091ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	da11      	bge.n	8009120 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	f003 020f 	and.w	r2, r3, #15
 8009102:	6879      	ldr	r1, [r7, #4]
 8009104:	4613      	mov	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	4413      	add	r3, r2
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	440b      	add	r3, r1
 800910e:	3324      	adds	r3, #36	@ 0x24
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d117      	bne.n	8009146 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fbb0 	bl	800987e <USBD_CtlError>
                  break;
 800911e:	e054      	b.n	80091ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009120:	7bbb      	ldrb	r3, [r7, #14]
 8009122:	f003 020f 	and.w	r2, r3, #15
 8009126:	6879      	ldr	r1, [r7, #4]
 8009128:	4613      	mov	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4413      	add	r3, r2
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	440b      	add	r3, r1
 8009132:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d104      	bne.n	8009146 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fb9d 	bl	800987e <USBD_CtlError>
                  break;
 8009144:	e041      	b.n	80091ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009146:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da0b      	bge.n	8009166 <USBD_StdEPReq+0x2b2>
 800914e:	7bbb      	ldrb	r3, [r7, #14]
 8009150:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009154:	4613      	mov	r3, r2
 8009156:	009b      	lsls	r3, r3, #2
 8009158:	4413      	add	r3, r2
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	3310      	adds	r3, #16
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	4413      	add	r3, r2
 8009162:	3304      	adds	r3, #4
 8009164:	e00b      	b.n	800917e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800916c:	4613      	mov	r3, r2
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	4413      	add	r3, r2
 800917c:	3304      	adds	r3, #4
 800917e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009180:	7bbb      	ldrb	r3, [r7, #14]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d002      	beq.n	800918c <USBD_StdEPReq+0x2d8>
 8009186:	7bbb      	ldrb	r3, [r7, #14]
 8009188:	2b80      	cmp	r3, #128	@ 0x80
 800918a:	d103      	bne.n	8009194 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	e00e      	b.n	80091b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009194:	7bbb      	ldrb	r3, [r7, #14]
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 f8b5 	bl	800a308 <USBD_LL_IsStallEP>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d003      	beq.n	80091ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2201      	movs	r2, #1
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	e002      	b.n	80091b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2200      	movs	r2, #0
 80091b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2202      	movs	r2, #2
 80091b6:	4619      	mov	r1, r3
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fbdd 	bl	8009978 <USBD_CtlSendData>
              break;
 80091be:	e004      	b.n	80091ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 fb5b 	bl	800987e <USBD_CtlError>
              break;
 80091c8:	bf00      	nop
          }
          break;
 80091ca:	e004      	b.n	80091d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 fb55 	bl	800987e <USBD_CtlError>
          break;
 80091d4:	bf00      	nop
      }
      break;
 80091d6:	e005      	b.n	80091e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fb4f 	bl	800987e <USBD_CtlError>
      break;
 80091e0:	e000      	b.n	80091e4 <USBD_StdEPReq+0x330>
      break;
 80091e2:	bf00      	nop
  }

  return ret;
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091fe:	2300      	movs	r3, #0
 8009200:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	885b      	ldrh	r3, [r3, #2]
 800920a:	0a1b      	lsrs	r3, r3, #8
 800920c:	b29b      	uxth	r3, r3
 800920e:	3b01      	subs	r3, #1
 8009210:	2b06      	cmp	r3, #6
 8009212:	f200 8128 	bhi.w	8009466 <USBD_GetDescriptor+0x276>
 8009216:	a201      	add	r2, pc, #4	@ (adr r2, 800921c <USBD_GetDescriptor+0x2c>)
 8009218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921c:	08009239 	.word	0x08009239
 8009220:	08009251 	.word	0x08009251
 8009224:	08009291 	.word	0x08009291
 8009228:	08009467 	.word	0x08009467
 800922c:	08009467 	.word	0x08009467
 8009230:	08009407 	.word	0x08009407
 8009234:	08009433 	.word	0x08009433
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	7c12      	ldrb	r2, [r2, #16]
 8009244:	f107 0108 	add.w	r1, r7, #8
 8009248:	4610      	mov	r0, r2
 800924a:	4798      	blx	r3
 800924c:	60f8      	str	r0, [r7, #12]
      break;
 800924e:	e112      	b.n	8009476 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	7c1b      	ldrb	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d10d      	bne.n	8009274 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800925e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009260:	f107 0208 	add.w	r2, r7, #8
 8009264:	4610      	mov	r0, r2
 8009266:	4798      	blx	r3
 8009268:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3301      	adds	r3, #1
 800926e:	2202      	movs	r2, #2
 8009270:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009272:	e100      	b.n	8009476 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800927a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800927c:	f107 0208 	add.w	r2, r7, #8
 8009280:	4610      	mov	r0, r2
 8009282:	4798      	blx	r3
 8009284:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3301      	adds	r3, #1
 800928a:	2202      	movs	r2, #2
 800928c:	701a      	strb	r2, [r3, #0]
      break;
 800928e:	e0f2      	b.n	8009476 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	885b      	ldrh	r3, [r3, #2]
 8009294:	b2db      	uxtb	r3, r3
 8009296:	2b05      	cmp	r3, #5
 8009298:	f200 80ac 	bhi.w	80093f4 <USBD_GetDescriptor+0x204>
 800929c:	a201      	add	r2, pc, #4	@ (adr r2, 80092a4 <USBD_GetDescriptor+0xb4>)
 800929e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a2:	bf00      	nop
 80092a4:	080092bd 	.word	0x080092bd
 80092a8:	080092f1 	.word	0x080092f1
 80092ac:	08009325 	.word	0x08009325
 80092b0:	08009359 	.word	0x08009359
 80092b4:	0800938d 	.word	0x0800938d
 80092b8:	080093c1 	.word	0x080093c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00b      	beq.n	80092e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	7c12      	ldrb	r2, [r2, #16]
 80092d4:	f107 0108 	add.w	r1, r7, #8
 80092d8:	4610      	mov	r0, r2
 80092da:	4798      	blx	r3
 80092dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092de:	e091      	b.n	8009404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 facb 	bl	800987e <USBD_CtlError>
            err++;
 80092e8:	7afb      	ldrb	r3, [r7, #11]
 80092ea:	3301      	adds	r3, #1
 80092ec:	72fb      	strb	r3, [r7, #11]
          break;
 80092ee:	e089      	b.n	8009404 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d00b      	beq.n	8009314 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	7c12      	ldrb	r2, [r2, #16]
 8009308:	f107 0108 	add.w	r1, r7, #8
 800930c:	4610      	mov	r0, r2
 800930e:	4798      	blx	r3
 8009310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009312:	e077      	b.n	8009404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fab1 	bl	800987e <USBD_CtlError>
            err++;
 800931c:	7afb      	ldrb	r3, [r7, #11]
 800931e:	3301      	adds	r3, #1
 8009320:	72fb      	strb	r3, [r7, #11]
          break;
 8009322:	e06f      	b.n	8009404 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00b      	beq.n	8009348 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	7c12      	ldrb	r2, [r2, #16]
 800933c:	f107 0108 	add.w	r1, r7, #8
 8009340:	4610      	mov	r0, r2
 8009342:	4798      	blx	r3
 8009344:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009346:	e05d      	b.n	8009404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009348:	6839      	ldr	r1, [r7, #0]
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fa97 	bl	800987e <USBD_CtlError>
            err++;
 8009350:	7afb      	ldrb	r3, [r7, #11]
 8009352:	3301      	adds	r3, #1
 8009354:	72fb      	strb	r3, [r7, #11]
          break;
 8009356:	e055      	b.n	8009404 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00b      	beq.n	800937c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	7c12      	ldrb	r2, [r2, #16]
 8009370:	f107 0108 	add.w	r1, r7, #8
 8009374:	4610      	mov	r0, r2
 8009376:	4798      	blx	r3
 8009378:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800937a:	e043      	b.n	8009404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800937c:	6839      	ldr	r1, [r7, #0]
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 fa7d 	bl	800987e <USBD_CtlError>
            err++;
 8009384:	7afb      	ldrb	r3, [r7, #11]
 8009386:	3301      	adds	r3, #1
 8009388:	72fb      	strb	r3, [r7, #11]
          break;
 800938a:	e03b      	b.n	8009404 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00b      	beq.n	80093b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	7c12      	ldrb	r2, [r2, #16]
 80093a4:	f107 0108 	add.w	r1, r7, #8
 80093a8:	4610      	mov	r0, r2
 80093aa:	4798      	blx	r3
 80093ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ae:	e029      	b.n	8009404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fa63 	bl	800987e <USBD_CtlError>
            err++;
 80093b8:	7afb      	ldrb	r3, [r7, #11]
 80093ba:	3301      	adds	r3, #1
 80093bc:	72fb      	strb	r3, [r7, #11]
          break;
 80093be:	e021      	b.n	8009404 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00b      	beq.n	80093e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	7c12      	ldrb	r2, [r2, #16]
 80093d8:	f107 0108 	add.w	r1, r7, #8
 80093dc:	4610      	mov	r0, r2
 80093de:	4798      	blx	r3
 80093e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093e2:	e00f      	b.n	8009404 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093e4:	6839      	ldr	r1, [r7, #0]
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fa49 	bl	800987e <USBD_CtlError>
            err++;
 80093ec:	7afb      	ldrb	r3, [r7, #11]
 80093ee:	3301      	adds	r3, #1
 80093f0:	72fb      	strb	r3, [r7, #11]
          break;
 80093f2:	e007      	b.n	8009404 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093f4:	6839      	ldr	r1, [r7, #0]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fa41 	bl	800987e <USBD_CtlError>
          err++;
 80093fc:	7afb      	ldrb	r3, [r7, #11]
 80093fe:	3301      	adds	r3, #1
 8009400:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009402:	bf00      	nop
      }
      break;
 8009404:	e037      	b.n	8009476 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	7c1b      	ldrb	r3, [r3, #16]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d109      	bne.n	8009422 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009416:	f107 0208 	add.w	r2, r7, #8
 800941a:	4610      	mov	r0, r2
 800941c:	4798      	blx	r3
 800941e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009420:	e029      	b.n	8009476 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 fa2a 	bl	800987e <USBD_CtlError>
        err++;
 800942a:	7afb      	ldrb	r3, [r7, #11]
 800942c:	3301      	adds	r3, #1
 800942e:	72fb      	strb	r3, [r7, #11]
      break;
 8009430:	e021      	b.n	8009476 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	7c1b      	ldrb	r3, [r3, #16]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d10d      	bne.n	8009456 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009442:	f107 0208 	add.w	r2, r7, #8
 8009446:	4610      	mov	r0, r2
 8009448:	4798      	blx	r3
 800944a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	3301      	adds	r3, #1
 8009450:	2207      	movs	r2, #7
 8009452:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009454:	e00f      	b.n	8009476 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009456:	6839      	ldr	r1, [r7, #0]
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 fa10 	bl	800987e <USBD_CtlError>
        err++;
 800945e:	7afb      	ldrb	r3, [r7, #11]
 8009460:	3301      	adds	r3, #1
 8009462:	72fb      	strb	r3, [r7, #11]
      break;
 8009464:	e007      	b.n	8009476 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fa08 	bl	800987e <USBD_CtlError>
      err++;
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	3301      	adds	r3, #1
 8009472:	72fb      	strb	r3, [r7, #11]
      break;
 8009474:	bf00      	nop
  }

  if (err != 0U)
 8009476:	7afb      	ldrb	r3, [r7, #11]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d11e      	bne.n	80094ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	88db      	ldrh	r3, [r3, #6]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d016      	beq.n	80094b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009484:	893b      	ldrh	r3, [r7, #8]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00e      	beq.n	80094a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	88da      	ldrh	r2, [r3, #6]
 800948e:	893b      	ldrh	r3, [r7, #8]
 8009490:	4293      	cmp	r3, r2
 8009492:	bf28      	it	cs
 8009494:	4613      	movcs	r3, r2
 8009496:	b29b      	uxth	r3, r3
 8009498:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800949a:	893b      	ldrh	r3, [r7, #8]
 800949c:	461a      	mov	r2, r3
 800949e:	68f9      	ldr	r1, [r7, #12]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 fa69 	bl	8009978 <USBD_CtlSendData>
 80094a6:	e009      	b.n	80094bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f9e7 	bl	800987e <USBD_CtlError>
 80094b0:	e004      	b.n	80094bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 faba 	bl	8009a2c <USBD_CtlSendStatus>
 80094b8:	e000      	b.n	80094bc <USBD_GetDescriptor+0x2cc>
    return;
 80094ba:	bf00      	nop
  }
}
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop

080094c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	889b      	ldrh	r3, [r3, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d131      	bne.n	800953a <USBD_SetAddress+0x76>
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	88db      	ldrh	r3, [r3, #6]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d12d      	bne.n	800953a <USBD_SetAddress+0x76>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	885b      	ldrh	r3, [r3, #2]
 80094e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80094e4:	d829      	bhi.n	800953a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	885b      	ldrh	r3, [r3, #2]
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d104      	bne.n	8009508 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80094fe:	6839      	ldr	r1, [r7, #0]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f000 f9bc 	bl	800987e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009506:	e01d      	b.n	8009544 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	7bfa      	ldrb	r2, [r7, #15]
 800950c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009510:	7bfb      	ldrb	r3, [r7, #15]
 8009512:	4619      	mov	r1, r3
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 ff23 	bl	800a360 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 fa86 	bl	8009a2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d004      	beq.n	8009530 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2202      	movs	r2, #2
 800952a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800952e:	e009      	b.n	8009544 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009538:	e004      	b.n	8009544 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800953a:	6839      	ldr	r1, [r7, #0]
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f99e 	bl	800987e <USBD_CtlError>
  }
}
 8009542:	bf00      	nop
 8009544:	bf00      	nop
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	885b      	ldrh	r3, [r3, #2]
 800955e:	b2da      	uxtb	r2, r3
 8009560:	4b4e      	ldr	r3, [pc, #312]	@ (800969c <USBD_SetConfig+0x150>)
 8009562:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009564:	4b4d      	ldr	r3, [pc, #308]	@ (800969c <USBD_SetConfig+0x150>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d905      	bls.n	8009578 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f985 	bl	800987e <USBD_CtlError>
    return USBD_FAIL;
 8009574:	2303      	movs	r3, #3
 8009576:	e08c      	b.n	8009692 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b02      	cmp	r3, #2
 8009582:	d002      	beq.n	800958a <USBD_SetConfig+0x3e>
 8009584:	2b03      	cmp	r3, #3
 8009586:	d029      	beq.n	80095dc <USBD_SetConfig+0x90>
 8009588:	e075      	b.n	8009676 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800958a:	4b44      	ldr	r3, [pc, #272]	@ (800969c <USBD_SetConfig+0x150>)
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d020      	beq.n	80095d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009592:	4b42      	ldr	r3, [pc, #264]	@ (800969c <USBD_SetConfig+0x150>)
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800959c:	4b3f      	ldr	r3, [pc, #252]	@ (800969c <USBD_SetConfig+0x150>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	4619      	mov	r1, r3
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7fe ffe3 	bl	800856e <USBD_SetClassConfig>
 80095a8:	4603      	mov	r3, r0
 80095aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d008      	beq.n	80095c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f962 	bl	800987e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2202      	movs	r2, #2
 80095be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095c2:	e065      	b.n	8009690 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fa31 	bl	8009a2c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2203      	movs	r2, #3
 80095ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80095d2:	e05d      	b.n	8009690 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fa29 	bl	8009a2c <USBD_CtlSendStatus>
      break;
 80095da:	e059      	b.n	8009690 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095dc:	4b2f      	ldr	r3, [pc, #188]	@ (800969c <USBD_SetConfig+0x150>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d112      	bne.n	800960a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80095ec:	4b2b      	ldr	r3, [pc, #172]	@ (800969c <USBD_SetConfig+0x150>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095f6:	4b29      	ldr	r3, [pc, #164]	@ (800969c <USBD_SetConfig+0x150>)
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fe ffd2 	bl	80085a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fa12 	bl	8009a2c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009608:	e042      	b.n	8009690 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800960a:	4b24      	ldr	r3, [pc, #144]	@ (800969c <USBD_SetConfig+0x150>)
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	429a      	cmp	r2, r3
 8009616:	d02a      	beq.n	800966e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	b2db      	uxtb	r3, r3
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7fe ffc0 	bl	80085a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009626:	4b1d      	ldr	r3, [pc, #116]	@ (800969c <USBD_SetConfig+0x150>)
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009630:	4b1a      	ldr	r3, [pc, #104]	@ (800969c <USBD_SetConfig+0x150>)
 8009632:	781b      	ldrb	r3, [r3, #0]
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7fe ff99 	bl	800856e <USBD_SetClassConfig>
 800963c:	4603      	mov	r3, r0
 800963e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00f      	beq.n	8009666 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f918 	bl	800987e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	b2db      	uxtb	r3, r3
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7fe ffa5 	bl	80085a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009664:	e014      	b.n	8009690 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f9e0 	bl	8009a2c <USBD_CtlSendStatus>
      break;
 800966c:	e010      	b.n	8009690 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f9dc 	bl	8009a2c <USBD_CtlSendStatus>
      break;
 8009674:	e00c      	b.n	8009690 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009676:	6839      	ldr	r1, [r7, #0]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f900 	bl	800987e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800967e:	4b07      	ldr	r3, [pc, #28]	@ (800969c <USBD_SetConfig+0x150>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7fe ff8e 	bl	80085a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800968a:	2303      	movs	r3, #3
 800968c:	73fb      	strb	r3, [r7, #15]
      break;
 800968e:	bf00      	nop
  }

  return ret;
 8009690:	7bfb      	ldrb	r3, [r7, #15]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20000450 	.word	0x20000450

080096a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	88db      	ldrh	r3, [r3, #6]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d004      	beq.n	80096bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 f8e2 	bl	800987e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096ba:	e023      	b.n	8009704 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	dc02      	bgt.n	80096ce <USBD_GetConfig+0x2e>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	dc03      	bgt.n	80096d4 <USBD_GetConfig+0x34>
 80096cc:	e015      	b.n	80096fa <USBD_GetConfig+0x5a>
 80096ce:	2b03      	cmp	r3, #3
 80096d0:	d00b      	beq.n	80096ea <USBD_GetConfig+0x4a>
 80096d2:	e012      	b.n	80096fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	3308      	adds	r3, #8
 80096de:	2201      	movs	r2, #1
 80096e0:	4619      	mov	r1, r3
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f948 	bl	8009978 <USBD_CtlSendData>
        break;
 80096e8:	e00c      	b.n	8009704 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	3304      	adds	r3, #4
 80096ee:	2201      	movs	r2, #1
 80096f0:	4619      	mov	r1, r3
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f940 	bl	8009978 <USBD_CtlSendData>
        break;
 80096f8:	e004      	b.n	8009704 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f8be 	bl	800987e <USBD_CtlError>
        break;
 8009702:	bf00      	nop
}
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800971c:	b2db      	uxtb	r3, r3
 800971e:	3b01      	subs	r3, #1
 8009720:	2b02      	cmp	r3, #2
 8009722:	d81e      	bhi.n	8009762 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	88db      	ldrh	r3, [r3, #6]
 8009728:	2b02      	cmp	r3, #2
 800972a:	d004      	beq.n	8009736 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 f8a5 	bl	800987e <USBD_CtlError>
        break;
 8009734:	e01a      	b.n	800976c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009742:	2b00      	cmp	r3, #0
 8009744:	d005      	beq.n	8009752 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	f043 0202 	orr.w	r2, r3, #2
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	330c      	adds	r3, #12
 8009756:	2202      	movs	r2, #2
 8009758:	4619      	mov	r1, r3
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f90c 	bl	8009978 <USBD_CtlSendData>
      break;
 8009760:	e004      	b.n	800976c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 f88a 	bl	800987e <USBD_CtlError>
      break;
 800976a:	bf00      	nop
  }
}
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	885b      	ldrh	r3, [r3, #2]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d107      	bne.n	8009796 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f94c 	bl	8009a2c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009794:	e013      	b.n	80097be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	885b      	ldrh	r3, [r3, #2]
 800979a:	2b02      	cmp	r3, #2
 800979c:	d10b      	bne.n	80097b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	889b      	ldrh	r3, [r3, #4]
 80097a2:	0a1b      	lsrs	r3, r3, #8
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f000 f93c 	bl	8009a2c <USBD_CtlSendStatus>
}
 80097b4:	e003      	b.n	80097be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80097b6:	6839      	ldr	r1, [r7, #0]
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f860 	bl	800987e <USBD_CtlError>
}
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b082      	sub	sp, #8
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
 80097ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	3b01      	subs	r3, #1
 80097da:	2b02      	cmp	r3, #2
 80097dc:	d80b      	bhi.n	80097f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	885b      	ldrh	r3, [r3, #2]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d10c      	bne.n	8009800 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 f91c 	bl	8009a2c <USBD_CtlSendStatus>
      }
      break;
 80097f4:	e004      	b.n	8009800 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f840 	bl	800987e <USBD_CtlError>
      break;
 80097fe:	e000      	b.n	8009802 <USBD_ClrFeature+0x3c>
      break;
 8009800:	bf00      	nop
  }
}
 8009802:	bf00      	nop
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	781a      	ldrb	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3301      	adds	r3, #1
 8009824:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	781a      	ldrb	r2, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	3301      	adds	r3, #1
 8009832:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f7ff fa40 	bl	8008cba <SWAPBYTE>
 800983a:	4603      	mov	r3, r0
 800983c:	461a      	mov	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	3301      	adds	r3, #1
 8009846:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	3301      	adds	r3, #1
 800984c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f7ff fa33 	bl	8008cba <SWAPBYTE>
 8009854:	4603      	mov	r3, r0
 8009856:	461a      	mov	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	3301      	adds	r3, #1
 8009860:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3301      	adds	r3, #1
 8009866:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f7ff fa26 	bl	8008cba <SWAPBYTE>
 800986e:	4603      	mov	r3, r0
 8009870:	461a      	mov	r2, r3
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	80da      	strh	r2, [r3, #6]
}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b082      	sub	sp, #8
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009888:	2180      	movs	r1, #128	@ 0x80
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fcfe 	bl	800a28c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009890:	2100      	movs	r1, #0
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fcfa 	bl	800a28c <USBD_LL_StallEP>
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b086      	sub	sp, #24
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d042      	beq.n	800993c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80098ba:	6938      	ldr	r0, [r7, #16]
 80098bc:	f000 f842 	bl	8009944 <USBD_GetLen>
 80098c0:	4603      	mov	r3, r0
 80098c2:	3301      	adds	r3, #1
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098ca:	d808      	bhi.n	80098de <USBD_GetString+0x3e>
 80098cc:	6938      	ldr	r0, [r7, #16]
 80098ce:	f000 f839 	bl	8009944 <USBD_GetLen>
 80098d2:	4603      	mov	r3, r0
 80098d4:	3301      	adds	r3, #1
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	b29a      	uxth	r2, r3
 80098dc:	e001      	b.n	80098e2 <USBD_GetString+0x42>
 80098de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	4413      	add	r3, r2
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	7812      	ldrb	r2, [r2, #0]
 80098f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	3301      	adds	r3, #1
 80098f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098f8:	7dfb      	ldrb	r3, [r7, #23]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	4413      	add	r3, r2
 80098fe:	2203      	movs	r2, #3
 8009900:	701a      	strb	r2, [r3, #0]
  idx++;
 8009902:	7dfb      	ldrb	r3, [r7, #23]
 8009904:	3301      	adds	r3, #1
 8009906:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009908:	e013      	b.n	8009932 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800990a:	7dfb      	ldrb	r3, [r7, #23]
 800990c:	68ba      	ldr	r2, [r7, #8]
 800990e:	4413      	add	r3, r2
 8009910:	693a      	ldr	r2, [r7, #16]
 8009912:	7812      	ldrb	r2, [r2, #0]
 8009914:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	3301      	adds	r3, #1
 800991a:	613b      	str	r3, [r7, #16]
    idx++;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	3301      	adds	r3, #1
 8009920:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009922:	7dfb      	ldrb	r3, [r7, #23]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	4413      	add	r3, r2
 8009928:	2200      	movs	r2, #0
 800992a:	701a      	strb	r2, [r3, #0]
    idx++;
 800992c:	7dfb      	ldrb	r3, [r7, #23]
 800992e:	3301      	adds	r3, #1
 8009930:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d1e7      	bne.n	800990a <USBD_GetString+0x6a>
 800993a:	e000      	b.n	800993e <USBD_GetString+0x9e>
    return;
 800993c:	bf00      	nop
  }
}
 800993e:	3718      	adds	r7, #24
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}

08009944 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009954:	e005      	b.n	8009962 <USBD_GetLen+0x1e>
  {
    len++;
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	3301      	adds	r3, #1
 800995a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	3301      	adds	r3, #1
 8009960:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d1f5      	bne.n	8009956 <USBD_GetLen+0x12>
  }

  return len;
 800996a:	7bfb      	ldrb	r3, [r7, #15]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2202      	movs	r2, #2
 8009988:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	2100      	movs	r1, #0
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f000 fcfd 	bl	800a39e <USBD_LL_Transmit>

  return USBD_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	2100      	movs	r1, #0
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f000 fcec 	bl	800a39e <USBD_LL_Transmit>

  return USBD_OK;
 80099c6:	2300      	movs	r3, #0
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b084      	sub	sp, #16
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	60f8      	str	r0, [r7, #12]
 80099d8:	60b9      	str	r1, [r7, #8]
 80099da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2203      	movs	r2, #3
 80099e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	2100      	movs	r1, #0
 80099fa:	68f8      	ldr	r0, [r7, #12]
 80099fc:	f000 fcf0 	bl	800a3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	2100      	movs	r1, #0
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 fcdf 	bl	800a3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2204      	movs	r2, #4
 8009a38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	2200      	movs	r2, #0
 8009a40:	2100      	movs	r1, #0
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fcab 	bl	800a39e <USBD_LL_Transmit>

  return USBD_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2205      	movs	r2, #5
 8009a5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a62:	2300      	movs	r3, #0
 8009a64:	2200      	movs	r2, #0
 8009a66:	2100      	movs	r1, #0
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fcb9 	bl	800a3e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	4912      	ldr	r1, [pc, #72]	@ (8009ac8 <MX_USB_DEVICE_Init+0x50>)
 8009a80:	4812      	ldr	r0, [pc, #72]	@ (8009acc <MX_USB_DEVICE_Init+0x54>)
 8009a82:	f7fe fcf7 	bl	8008474 <USBD_Init>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a8c:	f7f6 fece 	bl	800082c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8009a90:	490f      	ldr	r1, [pc, #60]	@ (8009ad0 <MX_USB_DEVICE_Init+0x58>)
 8009a92:	480e      	ldr	r0, [pc, #56]	@ (8009acc <MX_USB_DEVICE_Init+0x54>)
 8009a94:	f7fe fd1e 	bl	80084d4 <USBD_RegisterClass>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a9e:	f7f6 fec5 	bl	800082c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8009aa2:	490c      	ldr	r1, [pc, #48]	@ (8009ad4 <MX_USB_DEVICE_Init+0x5c>)
 8009aa4:	4809      	ldr	r0, [pc, #36]	@ (8009acc <MX_USB_DEVICE_Init+0x54>)
 8009aa6:	f7fe fc15 	bl	80082d4 <USBD_CDC_RegisterInterface>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ab0:	f7f6 febc 	bl	800082c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009ab4:	4805      	ldr	r0, [pc, #20]	@ (8009acc <MX_USB_DEVICE_Init+0x54>)
 8009ab6:	f7fe fd43 	bl	8008540 <USBD_Start>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d001      	beq.n	8009ac4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ac0:	f7f6 feb4 	bl	800082c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ac4:	bf00      	nop
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	2000014c 	.word	0x2000014c
 8009acc:	20000454 	.word	0x20000454
 8009ad0:	200000b8 	.word	0x200000b8
 8009ad4:	20000138 	.word	0x20000138

08009ad8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8009adc:	2200      	movs	r2, #0
 8009ade:	4905      	ldr	r1, [pc, #20]	@ (8009af4 <CDC_Init_HS+0x1c>)
 8009ae0:	4805      	ldr	r0, [pc, #20]	@ (8009af8 <CDC_Init_HS+0x20>)
 8009ae2:	f7fe fc11 	bl	8008308 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8009ae6:	4905      	ldr	r1, [pc, #20]	@ (8009afc <CDC_Init_HS+0x24>)
 8009ae8:	4803      	ldr	r0, [pc, #12]	@ (8009af8 <CDC_Init_HS+0x20>)
 8009aea:	f7fe fc2f 	bl	800834c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009aee:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	20000f30 	.word	0x20000f30
 8009af8:	20000454 	.word	0x20000454
 8009afc:	20000730 	.word	0x20000730

08009b00 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009b00:	b480      	push	{r7}
 8009b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009b04:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4603      	mov	r3, r0
 8009b18:	6039      	str	r1, [r7, #0]
 8009b1a:	71fb      	strb	r3, [r7, #7]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	2b23      	cmp	r3, #35	@ 0x23
 8009b24:	d84a      	bhi.n	8009bbc <CDC_Control_HS+0xac>
 8009b26:	a201      	add	r2, pc, #4	@ (adr r2, 8009b2c <CDC_Control_HS+0x1c>)
 8009b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b2c:	08009bbd 	.word	0x08009bbd
 8009b30:	08009bbd 	.word	0x08009bbd
 8009b34:	08009bbd 	.word	0x08009bbd
 8009b38:	08009bbd 	.word	0x08009bbd
 8009b3c:	08009bbd 	.word	0x08009bbd
 8009b40:	08009bbd 	.word	0x08009bbd
 8009b44:	08009bbd 	.word	0x08009bbd
 8009b48:	08009bbd 	.word	0x08009bbd
 8009b4c:	08009bbd 	.word	0x08009bbd
 8009b50:	08009bbd 	.word	0x08009bbd
 8009b54:	08009bbd 	.word	0x08009bbd
 8009b58:	08009bbd 	.word	0x08009bbd
 8009b5c:	08009bbd 	.word	0x08009bbd
 8009b60:	08009bbd 	.word	0x08009bbd
 8009b64:	08009bbd 	.word	0x08009bbd
 8009b68:	08009bbd 	.word	0x08009bbd
 8009b6c:	08009bbd 	.word	0x08009bbd
 8009b70:	08009bbd 	.word	0x08009bbd
 8009b74:	08009bbd 	.word	0x08009bbd
 8009b78:	08009bbd 	.word	0x08009bbd
 8009b7c:	08009bbd 	.word	0x08009bbd
 8009b80:	08009bbd 	.word	0x08009bbd
 8009b84:	08009bbd 	.word	0x08009bbd
 8009b88:	08009bbd 	.word	0x08009bbd
 8009b8c:	08009bbd 	.word	0x08009bbd
 8009b90:	08009bbd 	.word	0x08009bbd
 8009b94:	08009bbd 	.word	0x08009bbd
 8009b98:	08009bbd 	.word	0x08009bbd
 8009b9c:	08009bbd 	.word	0x08009bbd
 8009ba0:	08009bbd 	.word	0x08009bbd
 8009ba4:	08009bbd 	.word	0x08009bbd
 8009ba8:	08009bbd 	.word	0x08009bbd
 8009bac:	08009bbd 	.word	0x08009bbd
 8009bb0:	08009bbd 	.word	0x08009bbd
 8009bb4:	08009bbd 	.word	0x08009bbd
 8009bb8:	08009bbd 	.word	0x08009bbd
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009bbc:	bf00      	nop
  }

  return (USBD_OK);
 8009bbe:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	370c      	adds	r7, #12
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr

08009bcc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  memcpy(usb_rx_buffer, Buf, *Len);
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	480b      	ldr	r0, [pc, #44]	@ (8009c0c <CDC_Receive_HS+0x40>)
 8009be0:	f000 fca2 	bl	800a528 <memcpy>

  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8009be4:	6879      	ldr	r1, [r7, #4]
 8009be6:	480a      	ldr	r0, [pc, #40]	@ (8009c10 <CDC_Receive_HS+0x44>)
 8009be8:	f7fe fbb0 	bl	800834c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009bec:	4808      	ldr	r0, [pc, #32]	@ (8009c10 <CDC_Receive_HS+0x44>)
 8009bee:	f7fe fc0b 	bl	8008408 <USBD_CDC_ReceivePacket>
  CDC_Transmit_HS(Buf, *Len);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 f80a 	bl	8009c14 <CDC_Transmit_HS>
  return (USBD_OK);
 8009c00:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	200001b8 	.word	0x200001b8
 8009c10:	20000454 	.word	0x20000454

08009c14 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009c20:	2300      	movs	r3, #0
 8009c22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8009c24:	4b0d      	ldr	r3, [pc, #52]	@ (8009c5c <CDC_Transmit_HS+0x48>)
 8009c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d001      	beq.n	8009c3a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e00b      	b.n	8009c52 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8009c3a:	887b      	ldrh	r3, [r7, #2]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	4806      	ldr	r0, [pc, #24]	@ (8009c5c <CDC_Transmit_HS+0x48>)
 8009c42:	f7fe fb61 	bl	8008308 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8009c46:	4805      	ldr	r0, [pc, #20]	@ (8009c5c <CDC_Transmit_HS+0x48>)
 8009c48:	f7fe fb9e 	bl	8008388 <USBD_CDC_TransmitPacket>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	20000454 	.word	0x20000454

08009c60 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b087      	sub	sp, #28
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	4613      	mov	r3, r2
 8009c6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8009c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	371c      	adds	r7, #28
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
	...

08009c84 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	6039      	str	r1, [r7, #0]
 8009c8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	2212      	movs	r2, #18
 8009c94:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8009c96:	4b03      	ldr	r3, [pc, #12]	@ (8009ca4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	20000168 	.word	0x20000168

08009ca8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b083      	sub	sp, #12
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	4603      	mov	r3, r0
 8009cb0:	6039      	str	r1, [r7, #0]
 8009cb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	2204      	movs	r2, #4
 8009cb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009cba:	4b03      	ldr	r3, [pc, #12]	@ (8009cc8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	2000017c 	.word	0x2000017c

08009ccc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	6039      	str	r1, [r7, #0]
 8009cd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cd8:	79fb      	ldrb	r3, [r7, #7]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d105      	bne.n	8009cea <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	4907      	ldr	r1, [pc, #28]	@ (8009d00 <USBD_HS_ProductStrDescriptor+0x34>)
 8009ce2:	4808      	ldr	r0, [pc, #32]	@ (8009d04 <USBD_HS_ProductStrDescriptor+0x38>)
 8009ce4:	f7ff fddc 	bl	80098a0 <USBD_GetString>
 8009ce8:	e004      	b.n	8009cf4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	4904      	ldr	r1, [pc, #16]	@ (8009d00 <USBD_HS_ProductStrDescriptor+0x34>)
 8009cee:	4805      	ldr	r0, [pc, #20]	@ (8009d04 <USBD_HS_ProductStrDescriptor+0x38>)
 8009cf0:	f7ff fdd6 	bl	80098a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cf4:	4b02      	ldr	r3, [pc, #8]	@ (8009d00 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20001730 	.word	0x20001730
 8009d04:	0800a5a4 	.word	0x0800a5a4

08009d08 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	4603      	mov	r3, r0
 8009d10:	6039      	str	r1, [r7, #0]
 8009d12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	4904      	ldr	r1, [pc, #16]	@ (8009d28 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009d18:	4804      	ldr	r0, [pc, #16]	@ (8009d2c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009d1a:	f7ff fdc1 	bl	80098a0 <USBD_GetString>
  return USBD_StrDesc;
 8009d1e:	4b02      	ldr	r3, [pc, #8]	@ (8009d28 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	20001730 	.word	0x20001730
 8009d2c:	0800a5bc 	.word	0x0800a5bc

08009d30 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	4603      	mov	r3, r0
 8009d38:	6039      	str	r1, [r7, #0]
 8009d3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	221a      	movs	r2, #26
 8009d40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009d42:	f000 f843 	bl	8009dcc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009d46:	4b02      	ldr	r3, [pc, #8]	@ (8009d50 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20000180 	.word	0x20000180

08009d54 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	6039      	str	r1, [r7, #0]
 8009d5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009d60:	79fb      	ldrb	r3, [r7, #7]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d105      	bne.n	8009d72 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	4907      	ldr	r1, [pc, #28]	@ (8009d88 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009d6a:	4808      	ldr	r0, [pc, #32]	@ (8009d8c <USBD_HS_ConfigStrDescriptor+0x38>)
 8009d6c:	f7ff fd98 	bl	80098a0 <USBD_GetString>
 8009d70:	e004      	b.n	8009d7c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	4904      	ldr	r1, [pc, #16]	@ (8009d88 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009d76:	4805      	ldr	r0, [pc, #20]	@ (8009d8c <USBD_HS_ConfigStrDescriptor+0x38>)
 8009d78:	f7ff fd92 	bl	80098a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009d7c:	4b02      	ldr	r3, [pc, #8]	@ (8009d88 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	20001730 	.word	0x20001730
 8009d8c:	0800a5d0 	.word	0x0800a5d0

08009d90 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	4603      	mov	r3, r0
 8009d98:	6039      	str	r1, [r7, #0]
 8009d9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009d9c:	79fb      	ldrb	r3, [r7, #7]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d105      	bne.n	8009dae <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	4907      	ldr	r1, [pc, #28]	@ (8009dc4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009da6:	4808      	ldr	r0, [pc, #32]	@ (8009dc8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009da8:	f7ff fd7a 	bl	80098a0 <USBD_GetString>
 8009dac:	e004      	b.n	8009db8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009dae:	683a      	ldr	r2, [r7, #0]
 8009db0:	4904      	ldr	r1, [pc, #16]	@ (8009dc4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009db2:	4805      	ldr	r0, [pc, #20]	@ (8009dc8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009db4:	f7ff fd74 	bl	80098a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009db8:	4b02      	ldr	r3, [pc, #8]	@ (8009dc4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3708      	adds	r7, #8
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20001730 	.word	0x20001730
 8009dc8:	0800a5dc 	.word	0x0800a5dc

08009dcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8009e10 <Get_SerialNum+0x44>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8009e14 <Get_SerialNum+0x48>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009dde:	4b0e      	ldr	r3, [pc, #56]	@ (8009e18 <Get_SerialNum+0x4c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4413      	add	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d009      	beq.n	8009e06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009df2:	2208      	movs	r2, #8
 8009df4:	4909      	ldr	r1, [pc, #36]	@ (8009e1c <Get_SerialNum+0x50>)
 8009df6:	68f8      	ldr	r0, [r7, #12]
 8009df8:	f000 f814 	bl	8009e24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009dfc:	2204      	movs	r2, #4
 8009dfe:	4908      	ldr	r1, [pc, #32]	@ (8009e20 <Get_SerialNum+0x54>)
 8009e00:	68b8      	ldr	r0, [r7, #8]
 8009e02:	f000 f80f 	bl	8009e24 <IntToUnicode>
  }
}
 8009e06:	bf00      	nop
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	1fff7a10 	.word	0x1fff7a10
 8009e14:	1fff7a14 	.word	0x1fff7a14
 8009e18:	1fff7a18 	.word	0x1fff7a18
 8009e1c:	20000182 	.word	0x20000182
 8009e20:	20000192 	.word	0x20000192

08009e24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	4613      	mov	r3, r2
 8009e30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]
 8009e3a:	e027      	b.n	8009e8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	0f1b      	lsrs	r3, r3, #28
 8009e40:	2b09      	cmp	r3, #9
 8009e42:	d80b      	bhi.n	8009e5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	0f1b      	lsrs	r3, r3, #28
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	7dfb      	ldrb	r3, [r7, #23]
 8009e4c:	005b      	lsls	r3, r3, #1
 8009e4e:	4619      	mov	r1, r3
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	440b      	add	r3, r1
 8009e54:	3230      	adds	r2, #48	@ 0x30
 8009e56:	b2d2      	uxtb	r2, r2
 8009e58:	701a      	strb	r2, [r3, #0]
 8009e5a:	e00a      	b.n	8009e72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	0f1b      	lsrs	r3, r3, #28
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	4619      	mov	r1, r3
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	440b      	add	r3, r1
 8009e6c:	3237      	adds	r2, #55	@ 0x37
 8009e6e:	b2d2      	uxtb	r2, r2
 8009e70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	011b      	lsls	r3, r3, #4
 8009e76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	005b      	lsls	r3, r3, #1
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	4413      	add	r3, r2
 8009e82:	2200      	movs	r2, #0
 8009e84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009e86:	7dfb      	ldrb	r3, [r7, #23]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	75fb      	strb	r3, [r7, #23]
 8009e8c:	7dfa      	ldrb	r2, [r7, #23]
 8009e8e:	79fb      	ldrb	r3, [r7, #7]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d3d3      	bcc.n	8009e3c <IntToUnicode+0x18>
  }
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop
 8009e98:	371c      	adds	r7, #28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
	...

08009ea4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b08a      	sub	sp, #40	@ 0x28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009eac:	f107 0314 	add.w	r3, r7, #20
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	605a      	str	r2, [r3, #4]
 8009eb6:	609a      	str	r2, [r3, #8]
 8009eb8:	60da      	str	r2, [r3, #12]
 8009eba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8009f38 <HAL_PCD_MspInit+0x94>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d134      	bne.n	8009f30 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	613b      	str	r3, [r7, #16]
 8009eca:	4b1c      	ldr	r3, [pc, #112]	@ (8009f3c <HAL_PCD_MspInit+0x98>)
 8009ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ece:	4a1b      	ldr	r2, [pc, #108]	@ (8009f3c <HAL_PCD_MspInit+0x98>)
 8009ed0:	f043 0302 	orr.w	r3, r3, #2
 8009ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ed6:	4b19      	ldr	r3, [pc, #100]	@ (8009f3c <HAL_PCD_MspInit+0x98>)
 8009ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	613b      	str	r3, [r7, #16]
 8009ee0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8009ee2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8009ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ee8:	2302      	movs	r3, #2
 8009eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eec:	2300      	movs	r3, #0
 8009eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ef0:	2303      	movs	r3, #3
 8009ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8009ef4:	230c      	movs	r3, #12
 8009ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ef8:	f107 0314 	add.w	r3, r7, #20
 8009efc:	4619      	mov	r1, r3
 8009efe:	4810      	ldr	r0, [pc, #64]	@ (8009f40 <HAL_PCD_MspInit+0x9c>)
 8009f00:	f7f8 fdae 	bl	8002a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009f04:	2300      	movs	r3, #0
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	4b0c      	ldr	r3, [pc, #48]	@ (8009f3c <HAL_PCD_MspInit+0x98>)
 8009f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8009f3c <HAL_PCD_MspInit+0x98>)
 8009f0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8009f14:	4b09      	ldr	r3, [pc, #36]	@ (8009f3c <HAL_PCD_MspInit+0x98>)
 8009f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009f20:	2200      	movs	r2, #0
 8009f22:	2100      	movs	r1, #0
 8009f24:	204d      	movs	r0, #77	@ 0x4d
 8009f26:	f7f8 f910 	bl	800214a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009f2a:	204d      	movs	r0, #77	@ 0x4d
 8009f2c:	f7f8 f929 	bl	8002182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009f30:	bf00      	nop
 8009f32:	3728      	adds	r7, #40	@ 0x28
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	40040000 	.word	0x40040000
 8009f3c:	40023800 	.word	0x40023800
 8009f40:	40020400 	.word	0x40020400

08009f44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009f58:	4619      	mov	r1, r3
 8009f5a:	4610      	mov	r0, r2
 8009f5c:	f7fe fb3d 	bl	80085da <USBD_LL_SetupStage>
}
 8009f60:	bf00      	nop
 8009f62:	3708      	adds	r7, #8
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009f7a:	78fa      	ldrb	r2, [r7, #3]
 8009f7c:	6879      	ldr	r1, [r7, #4]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	00db      	lsls	r3, r3, #3
 8009f82:	4413      	add	r3, r2
 8009f84:	009b      	lsls	r3, r3, #2
 8009f86:	440b      	add	r3, r1
 8009f88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	78fb      	ldrb	r3, [r7, #3]
 8009f90:	4619      	mov	r1, r3
 8009f92:	f7fe fb77 	bl	8008684 <USBD_LL_DataOutStage>
}
 8009f96:	bf00      	nop
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009fb0:	78fa      	ldrb	r2, [r7, #3]
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	3320      	adds	r3, #32
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	78fb      	ldrb	r3, [r7, #3]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	f7fe fc10 	bl	80087ea <USBD_LL_DataInStage>
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b082      	sub	sp, #8
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7fe fd4a 	bl	8008a7a <USBD_LL_SOF>
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	79db      	ldrb	r3, [r3, #7]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d102      	bne.n	800a008 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a002:	2300      	movs	r3, #0
 800a004:	73fb      	strb	r3, [r7, #15]
 800a006:	e008      	b.n	800a01a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	79db      	ldrb	r3, [r3, #7]
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d102      	bne.n	800a016 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a010:	2301      	movs	r3, #1
 800a012:	73fb      	strb	r3, [r7, #15]
 800a014:	e001      	b.n	800a01a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a016:	f7f6 fc09 	bl	800082c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a020:	7bfa      	ldrb	r2, [r7, #15]
 800a022:	4611      	mov	r1, r2
 800a024:	4618      	mov	r0, r3
 800a026:	f7fe fce4 	bl	80089f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a030:	4618      	mov	r0, r3
 800a032:	f7fe fc8c 	bl	800894e <USBD_LL_Reset>
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
	...

0800a040 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a04e:	4618      	mov	r0, r3
 800a050:	f7fe fcdf 	bl	8008a12 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	6812      	ldr	r2, [r2, #0]
 800a062:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a066:	f043 0301 	orr.w	r3, r3, #1
 800a06a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	7adb      	ldrb	r3, [r3, #11]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d005      	beq.n	800a080 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a074:	4b04      	ldr	r3, [pc, #16]	@ (800a088 <HAL_PCD_SuspendCallback+0x48>)
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	4a03      	ldr	r2, [pc, #12]	@ (800a088 <HAL_PCD_SuspendCallback+0x48>)
 800a07a:	f043 0306 	orr.w	r3, r3, #6
 800a07e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a080:	bf00      	nop
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	e000ed00 	.word	0xe000ed00

0800a08c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7fe fcd5 	bl	8008a4a <USBD_LL_Resume>
}
 800a0a0:	bf00      	nop
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0ba:	78fa      	ldrb	r2, [r7, #3]
 800a0bc:	4611      	mov	r1, r2
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fe fd2d 	bl	8008b1e <USBD_LL_IsoOUTIncomplete>
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0de:	78fa      	ldrb	r2, [r7, #3]
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fe fce9 	bl	8008aba <USBD_LL_IsoINIncomplete>
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe fd3f 	bl	8008b82 <USBD_LL_DevConnected>
}
 800a104:	bf00      	nop
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fd3c 	bl	8008b98 <USBD_LL_DevDisconnected>
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d140      	bne.n	800a1ba <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800a138:	4a22      	ldr	r2, [pc, #136]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a20      	ldr	r2, [pc, #128]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a144:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a148:	4b1e      	ldr	r3, [pc, #120]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a14a:	4a1f      	ldr	r2, [pc, #124]	@ (800a1c8 <USBD_LL_Init+0xa0>)
 800a14c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800a14e:	4b1d      	ldr	r3, [pc, #116]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a150:	2206      	movs	r2, #6
 800a152:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800a154:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a156:	2202      	movs	r2, #2
 800a158:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a15a:	4b1a      	ldr	r3, [pc, #104]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a160:	4b18      	ldr	r3, [pc, #96]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a162:	2202      	movs	r2, #2
 800a164:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a166:	4b17      	ldr	r3, [pc, #92]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a168:	2200      	movs	r2, #0
 800a16a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a16c:	4b15      	ldr	r3, [pc, #84]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a16e:	2200      	movs	r2, #0
 800a170:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800a172:	4b14      	ldr	r3, [pc, #80]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a174:	2200      	movs	r2, #0
 800a176:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a178:	4b12      	ldr	r3, [pc, #72]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800a17e:	4b11      	ldr	r3, [pc, #68]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a180:	2200      	movs	r2, #0
 800a182:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a184:	4b0f      	ldr	r3, [pc, #60]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a186:	2200      	movs	r2, #0
 800a188:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800a18a:	480e      	ldr	r0, [pc, #56]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a18c:	f7f9 f907 	bl	800339e <HAL_PCD_Init>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800a196:	f7f6 fb49 	bl	800082c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800a19a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a19e:	4809      	ldr	r0, [pc, #36]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a1a0:	f7fa fb33 	bl	800480a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800a1a4:	2280      	movs	r2, #128	@ 0x80
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	4806      	ldr	r0, [pc, #24]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a1aa:	f7fa fae7 	bl	800477c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800a1ae:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	4803      	ldr	r0, [pc, #12]	@ (800a1c4 <USBD_LL_Init+0x9c>)
 800a1b6:	f7fa fae1 	bl	800477c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	20001930 	.word	0x20001930
 800a1c8:	40040000 	.word	0x40040000

0800a1cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b084      	sub	sp, #16
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7f9 f9ea 	bl	80035bc <HAL_PCD_Start>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f000 f942 	bl	800a478 <USBD_Get_USB_Status>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	4608      	mov	r0, r1
 800a20c:	4611      	mov	r1, r2
 800a20e:	461a      	mov	r2, r3
 800a210:	4603      	mov	r3, r0
 800a212:	70fb      	strb	r3, [r7, #3]
 800a214:	460b      	mov	r3, r1
 800a216:	70bb      	strb	r3, [r7, #2]
 800a218:	4613      	mov	r3, r2
 800a21a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a22a:	78bb      	ldrb	r3, [r7, #2]
 800a22c:	883a      	ldrh	r2, [r7, #0]
 800a22e:	78f9      	ldrb	r1, [r7, #3]
 800a230:	f7f9 febe 	bl	8003fb0 <HAL_PCD_EP_Open>
 800a234:	4603      	mov	r3, r0
 800a236:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a238:	7bfb      	ldrb	r3, [r7, #15]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 f91c 	bl	800a478 <USBD_Get_USB_Status>
 800a240:	4603      	mov	r3, r0
 800a242:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a244:	7bbb      	ldrb	r3, [r7, #14]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
 800a256:	460b      	mov	r3, r1
 800a258:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a25a:	2300      	movs	r3, #0
 800a25c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a268:	78fa      	ldrb	r2, [r7, #3]
 800a26a:	4611      	mov	r1, r2
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7f9 ff09 	bl	8004084 <HAL_PCD_EP_Close>
 800a272:	4603      	mov	r3, r0
 800a274:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a276:	7bfb      	ldrb	r3, [r7, #15]
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 f8fd 	bl	800a478 <USBD_Get_USB_Status>
 800a27e:	4603      	mov	r3, r0
 800a280:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a282:	7bbb      	ldrb	r3, [r7, #14]
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	460b      	mov	r3, r1
 800a296:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a298:	2300      	movs	r3, #0
 800a29a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a29c:	2300      	movs	r3, #0
 800a29e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2a6:	78fa      	ldrb	r2, [r7, #3]
 800a2a8:	4611      	mov	r1, r2
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7f9 ffc1 	bl	8004232 <HAL_PCD_EP_SetStall>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 f8de 	bl	800a478 <USBD_Get_USB_Status>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a2e4:	78fa      	ldrb	r2, [r7, #3]
 800a2e6:	4611      	mov	r1, r2
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fa f805 	bl	80042f8 <HAL_PCD_EP_ClrStall>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2f2:	7bfb      	ldrb	r3, [r7, #15]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 f8bf 	bl	800a478 <USBD_Get_USB_Status>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	460b      	mov	r3, r1
 800a312:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a31a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a31c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a320:	2b00      	cmp	r3, #0
 800a322:	da0b      	bge.n	800a33c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a324:	78fb      	ldrb	r3, [r7, #3]
 800a326:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a32a:	68f9      	ldr	r1, [r7, #12]
 800a32c:	4613      	mov	r3, r2
 800a32e:	00db      	lsls	r3, r3, #3
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	440b      	add	r3, r1
 800a336:	3316      	adds	r3, #22
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	e00b      	b.n	800a354 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a33c:	78fb      	ldrb	r3, [r7, #3]
 800a33e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a342:	68f9      	ldr	r1, [r7, #12]
 800a344:	4613      	mov	r3, r2
 800a346:	00db      	lsls	r3, r3, #3
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	440b      	add	r3, r1
 800a34e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a352:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a370:	2300      	movs	r3, #0
 800a372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a37a:	78fa      	ldrb	r2, [r7, #3]
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f7f9 fdf2 	bl	8003f68 <HAL_PCD_SetAddress>
 800a384:	4603      	mov	r3, r0
 800a386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a388:	7bfb      	ldrb	r3, [r7, #15]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f000 f874 	bl	800a478 <USBD_Get_USB_Status>
 800a390:	4603      	mov	r3, r0
 800a392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a394:	7bbb      	ldrb	r3, [r7, #14]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b086      	sub	sp, #24
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	60f8      	str	r0, [r7, #12]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a3bc:	7af9      	ldrb	r1, [r7, #11]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	f7f9 fefc 	bl	80041be <HAL_PCD_EP_Transmit>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3ca:	7dfb      	ldrb	r3, [r7, #23]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f000 f853 	bl	800a478 <USBD_Get_USB_Status>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a3d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	607a      	str	r2, [r7, #4]
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a3fe:	7af9      	ldrb	r1, [r7, #11]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	f7f9 fe88 	bl	8004118 <HAL_PCD_EP_Receive>
 800a408:	4603      	mov	r3, r0
 800a40a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a40c:	7dfb      	ldrb	r3, [r7, #23]
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 f832 	bl	800a478 <USBD_Get_USB_Status>
 800a414:	4603      	mov	r3, r0
 800a416:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a418:	7dbb      	ldrb	r3, [r7, #22]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3718      	adds	r7, #24
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b082      	sub	sp, #8
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	4611      	mov	r1, r2
 800a438:	4618      	mov	r0, r3
 800a43a:	f7f9 fea8 	bl	800418e <HAL_PCD_EP_GetRxCount>
 800a43e:	4603      	mov	r3, r0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a450:	4b03      	ldr	r3, [pc, #12]	@ (800a460 <USBD_static_malloc+0x18>)
}
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	20001e14 	.word	0x20001e14

0800a464 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]

}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a478:	b480      	push	{r7}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	4603      	mov	r3, r0
 800a480:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a482:	2300      	movs	r3, #0
 800a484:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a486:	79fb      	ldrb	r3, [r7, #7]
 800a488:	2b03      	cmp	r3, #3
 800a48a:	d817      	bhi.n	800a4bc <USBD_Get_USB_Status+0x44>
 800a48c:	a201      	add	r2, pc, #4	@ (adr r2, 800a494 <USBD_Get_USB_Status+0x1c>)
 800a48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a492:	bf00      	nop
 800a494:	0800a4a5 	.word	0x0800a4a5
 800a498:	0800a4ab 	.word	0x0800a4ab
 800a49c:	0800a4b1 	.word	0x0800a4b1
 800a4a0:	0800a4b7 	.word	0x0800a4b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a4a8:	e00b      	b.n	800a4c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a4aa:	2303      	movs	r3, #3
 800a4ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ae:	e008      	b.n	800a4c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b4:	e005      	b.n	800a4c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ba:	e002      	b.n	800a4c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	73fb      	strb	r3, [r7, #15]
    break;
 800a4c0:	bf00      	nop
  }
  return usb_status;
 800a4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <memset>:
 800a4d0:	4402      	add	r2, r0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d100      	bne.n	800a4da <memset+0xa>
 800a4d8:	4770      	bx	lr
 800a4da:	f803 1b01 	strb.w	r1, [r3], #1
 800a4de:	e7f9      	b.n	800a4d4 <memset+0x4>

0800a4e0 <__libc_init_array>:
 800a4e0:	b570      	push	{r4, r5, r6, lr}
 800a4e2:	4d0d      	ldr	r5, [pc, #52]	@ (800a518 <__libc_init_array+0x38>)
 800a4e4:	4c0d      	ldr	r4, [pc, #52]	@ (800a51c <__libc_init_array+0x3c>)
 800a4e6:	1b64      	subs	r4, r4, r5
 800a4e8:	10a4      	asrs	r4, r4, #2
 800a4ea:	2600      	movs	r6, #0
 800a4ec:	42a6      	cmp	r6, r4
 800a4ee:	d109      	bne.n	800a504 <__libc_init_array+0x24>
 800a4f0:	4d0b      	ldr	r5, [pc, #44]	@ (800a520 <__libc_init_array+0x40>)
 800a4f2:	4c0c      	ldr	r4, [pc, #48]	@ (800a524 <__libc_init_array+0x44>)
 800a4f4:	f000 f826 	bl	800a544 <_init>
 800a4f8:	1b64      	subs	r4, r4, r5
 800a4fa:	10a4      	asrs	r4, r4, #2
 800a4fc:	2600      	movs	r6, #0
 800a4fe:	42a6      	cmp	r6, r4
 800a500:	d105      	bne.n	800a50e <__libc_init_array+0x2e>
 800a502:	bd70      	pop	{r4, r5, r6, pc}
 800a504:	f855 3b04 	ldr.w	r3, [r5], #4
 800a508:	4798      	blx	r3
 800a50a:	3601      	adds	r6, #1
 800a50c:	e7ee      	b.n	800a4ec <__libc_init_array+0xc>
 800a50e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a512:	4798      	blx	r3
 800a514:	3601      	adds	r6, #1
 800a516:	e7f2      	b.n	800a4fe <__libc_init_array+0x1e>
 800a518:	0800c0c4 	.word	0x0800c0c4
 800a51c:	0800c0c4 	.word	0x0800c0c4
 800a520:	0800c0c4 	.word	0x0800c0c4
 800a524:	0800c0c8 	.word	0x0800c0c8

0800a528 <memcpy>:
 800a528:	440a      	add	r2, r1
 800a52a:	4291      	cmp	r1, r2
 800a52c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a530:	d100      	bne.n	800a534 <memcpy+0xc>
 800a532:	4770      	bx	lr
 800a534:	b510      	push	{r4, lr}
 800a536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a53a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a53e:	4291      	cmp	r1, r2
 800a540:	d1f9      	bne.n	800a536 <memcpy+0xe>
 800a542:	bd10      	pop	{r4, pc}

0800a544 <_init>:
 800a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a546:	bf00      	nop
 800a548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a54a:	bc08      	pop	{r3}
 800a54c:	469e      	mov	lr, r3
 800a54e:	4770      	bx	lr

0800a550 <_fini>:
 800a550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a552:	bf00      	nop
 800a554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a556:	bc08      	pop	{r3}
 800a558:	469e      	mov	lr, r3
 800a55a:	4770      	bx	lr
